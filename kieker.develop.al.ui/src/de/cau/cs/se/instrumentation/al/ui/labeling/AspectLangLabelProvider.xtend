/*
* generated by Xtext
*/
package kieker.develop.al.ui.labeling

import com.google.inject.Inject
import kieker.develop.al.aspectLang.Aspect
import kieker.develop.al.aspectLang.ContainerNode
import kieker.develop.al.mapping.NamedElement
import kieker.develop.al.aspectLang.WildcardNode
import kieker.develop.al.aspectLang.SubPathNode
import kieker.develop.al.aspectLang.LocationQuery
import kieker.develop.al.aspectLang.Collector
import kieker.develop.al.aspectLang.Pointcut

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class AspectLangLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	new(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

		def text(Aspect e) { 'aspect' }
	
		def text(ContainerNode e) {
			if (e.container instanceof NamedElement)
				(e.container as NamedElement).name
			else
				'''Container is of type «e.container.class.name»'''
		}
		
		def text (WildcardNode e) { '*' }
		
		def text (SubPathNode e) { '**' }
		
		def text(Pointcut e) { 'pointcut' + e.name }
		def text(LocationQuery e) { 'path' }
		 
		def text (Collector e) { // TODO this is most likely broken
			//e.type.name + " " + e.insertionPoint.toString
		}
	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
