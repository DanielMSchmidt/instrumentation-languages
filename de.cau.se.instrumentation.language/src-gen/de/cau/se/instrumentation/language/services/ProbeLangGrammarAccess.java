/*
* generated by Xtext
*/

package de.cau.se.instrumentation.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ProbeLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesDataTypeDeclarationParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Assignment cPatternsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternsPatternParserRuleCall_4_0 = (RuleCall)cPatternsAssignment_4.eContents().get(0);
		private final Assignment cProbesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProbesProbeParserRuleCall_5_0 = (RuleCall)cProbesAssignment_5.eContents().get(0);
		
		//Model:
		//	"package" name=QualifiedName imports+=Import* types+=DataTypeDeclaration* patterns+=Pattern* probes+=Probe*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName imports+=Import* types+=DataTypeDeclaration* patterns+=Pattern* probes+=Probe*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//types+=DataTypeDeclaration*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }

		//DataTypeDeclaration
		public RuleCall getTypesDataTypeDeclarationParserRuleCall_3_0() { return cTypesDataTypeDeclarationParserRuleCall_3_0; }

		//patterns+=Pattern*
		public Assignment getPatternsAssignment_4() { return cPatternsAssignment_4; }

		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_4_0() { return cPatternsPatternParserRuleCall_4_0; }

		//probes+=Probe*
		public Assignment getProbesAssignment_5() { return cProbesAssignment_5; }

		//Probe
		public RuleCall getProbesProbeParserRuleCall_5_0() { return cProbesProbeParserRuleCall_5_0; }
	}

	public class DataTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataTypeDeclaration:
		//	"type" name=ID;
		public ParserRule getRule() { return rule; }

		//"type" name=ID
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEPackageEPackageCrossReference_1_0 = (CrossReference)cEPackageAssignment_1.eContents().get(0);
		private final RuleCall cEPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cEPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Import:
		//	"import" ePackage=[ecore::EPackage|STRING] "as" name=ID;
		public ParserRule getRule() { return rule; }

		//"import" ePackage=[ecore::EPackage|STRING] "as" name=ID
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//ePackage=[ecore::EPackage|STRING]
		public Assignment getEPackageAssignment_1() { return cEPackageAssignment_1; }

		//[ecore::EPackage|STRING]
		public CrossReference getEPackageEPackageCrossReference_1_0() { return cEPackageEPackageCrossReference_1_0; }

		//STRING
		public RuleCall getEPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cEPackageEPackageSTRINGTerminalRuleCall_1_0_1; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCodeSequceneAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCodeSequceneCodeElementParserRuleCall_6_0 = (RuleCall)cCodeSequceneAssignment_6.eContents().get(0);
		
		//Pattern:
		//	"pattern" name=ID "(" parameters+=Parameter ("," parameters+=Parameter)* ")" codeSequcene+=CodeElement*;
		public ParserRule getRule() { return rule; }

		//"pattern" name=ID "(" parameters+=Parameter ("," parameters+=Parameter)* ")" codeSequcene+=CodeElement*
		public Group getGroup() { return cGroup; }

		//"pattern"
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0() { return cParametersParameterParserRuleCall_3_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_0() { return cParametersParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//codeSequcene+=CodeElement*
		public Assignment getCodeSequceneAssignment_6() { return cCodeSequceneAssignment_6; }

		//CodeElement
		public RuleCall getCodeSequceneCodeElementParserRuleCall_6_0() { return cCodeSequceneCodeElementParserRuleCall_6_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CodeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cToUpperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cToUpperNumberSignKeyword_0_0 = (Keyword)cToUpperAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSimpleCodeElementParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//CodeElement:
		//	toUpper?="#"? value=SimpleCodeElement;
		public ParserRule getRule() { return rule; }

		//toUpper?="#"? value=SimpleCodeElement
		public Group getGroup() { return cGroup; }

		//toUpper?="#"?
		public Assignment getToUpperAssignment_0() { return cToUpperAssignment_0; }

		//"#"
		public Keyword getToUpperNumberSignKeyword_0_0() { return cToUpperNumberSignKeyword_0_0; }

		//value=SimpleCodeElement
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//SimpleCodeElement
		public RuleCall getValueSimpleCodeElementParserRuleCall_1_0() { return cValueSimpleCodeElementParserRuleCall_1_0; }
	}

	public class SimpleCodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleCodeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleCodeElement returns xbase::XExpression:
		//	XStringLiteral | ParameterRef;
		public ParserRule getRule() { return rule; }

		//XStringLiteral | ParameterRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_0() { return cXStringLiteralParserRuleCall_0; }

		//ParameterRef
		public RuleCall getParameterRefParserRuleCall_1() { return cParameterRefParserRuleCall_1; }
	}

	public class ParameterRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefParameterCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefParameterIDTerminalRuleCall_0_1 = (RuleCall)cRefParameterCrossReference_0.eContents().get(1);
		
		//ParameterRef:
		//	ref=[Parameter];
		public ParserRule getRule() { return rule; }

		//ref=[Parameter]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[Parameter]
		public CrossReference getRefParameterCrossReference_0() { return cRefParameterCrossReference_0; }

		//ID
		public RuleCall getRefParameterIDTerminalRuleCall_0_1() { return cRefParameterIDTerminalRuleCall_0_1; }
	}

	public class ProbeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Probe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRecordAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRecordRecordDeclarationParserRuleCall_3_0 = (RuleCall)cRecordAssignment_3.eContents().get(0);
		private final Assignment cReplacementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReplacementsReplacementParserRuleCall_4_0 = (RuleCall)cReplacementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Probe:
		//	"probe" name=ID "{" record=RecordDeclaration? replacements+=Replacement* "}";
		public ParserRule getRule() { return rule; }

		//"probe" name=ID "{" record=RecordDeclaration? replacements+=Replacement* "}"
		public Group getGroup() { return cGroup; }

		//"probe"
		public Keyword getProbeKeyword_0() { return cProbeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//record=RecordDeclaration?
		public Assignment getRecordAssignment_3() { return cRecordAssignment_3; }

		//RecordDeclaration
		public RuleCall getRecordRecordDeclarationParserRuleCall_3_0() { return cRecordRecordDeclarationParserRuleCall_3_0; }

		//replacements+=Replacement*
		public Assignment getReplacementsAssignment_4() { return cReplacementsAssignment_4; }

		//Replacement
		public RuleCall getReplacementsReplacementParserRuleCall_4_0() { return cReplacementsReplacementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RecordDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RecordDeclaration:
		//	"record" "{" properties+=Property+ "}";
		public ParserRule getRule() { return rule; }

		//"record" "{" properties+=Property+ "}"
		public Group getGroup() { return cGroup; }

		//"record"
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=Property+
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeDataTypeDeclarationCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeDataTypeDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeDataTypeDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Property:
		//	type=[DataTypeDeclaration] name=ID;
		public ParserRule getRule() { return rule; }

		//type=[DataTypeDeclaration] name=ID
		public Group getGroup() { return cGroup; }

		//type=[DataTypeDeclaration]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[DataTypeDeclaration]
		public CrossReference getTypeDataTypeDeclarationCrossReference_0_0() { return cTypeDataTypeDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getTypeDataTypeDeclarationIDTerminalRuleCall_0_0_1() { return cTypeDataTypeDeclarationIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ReplacementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Replacement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScopeScopeParserRuleCall_1_0 = (RuleCall)cScopeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternsPatternCallParserRuleCall_3_0 = (RuleCall)cPatternsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Replacement:
		//	name=ID scope=Scope "{" patterns+=PatternCall* "}";
		public ParserRule getRule() { return rule; }

		//name=ID scope=Scope "{" patterns+=PatternCall* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//scope=Scope
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }

		//Scope
		public RuleCall getScopeScopeParserRuleCall_1_0() { return cScopeScopeParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//patterns+=PatternCall*
		public Assignment getPatternsAssignment_3() { return cPatternsAssignment_3; }

		//PatternCall
		public RuleCall getPatternsPatternCallParserRuleCall_3_0() { return cPatternsPatternCallParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelRefQualifiedNameParserRuleCall_1_0 = (RuleCall)cModelRefAssignment_1.eContents().get(0);
		private final Assignment cInsertBeforeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInsertBeforeLessThanSignKeyword_2_0 = (Keyword)cInsertBeforeAssignment_2.eContents().get(0);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetAlternativeParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Assignment cInsertAfterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cInsertAfterGreaterThanSignKeyword_4_0 = (Keyword)cInsertAfterAssignment_4.eContents().get(0);
		
		//Scope:
		//	"scope" modelRef=QualifiedName insertBefore?="<"? target=Alternative insertAfter?=">"?;
		public ParserRule getRule() { return rule; }

		//"scope" modelRef=QualifiedName insertBefore?="<"? target=Alternative insertAfter?=">"?
		public Group getGroup() { return cGroup; }

		//"scope"
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }

		//modelRef=QualifiedName
		public Assignment getModelRefAssignment_1() { return cModelRefAssignment_1; }

		//QualifiedName
		public RuleCall getModelRefQualifiedNameParserRuleCall_1_0() { return cModelRefQualifiedNameParserRuleCall_1_0; }

		//insertBefore?="<"?
		public Assignment getInsertBeforeAssignment_2() { return cInsertBeforeAssignment_2; }

		//"<"
		public Keyword getInsertBeforeLessThanSignKeyword_2_0() { return cInsertBeforeLessThanSignKeyword_2_0; }

		//target=Alternative
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//Alternative
		public RuleCall getTargetAlternativeParserRuleCall_3_0() { return cTargetAlternativeParserRuleCall_3_0; }

		//insertAfter?=">"?
		public Assignment getInsertAfterAssignment_4() { return cInsertAfterAssignment_4; }

		//">"
		public Keyword getInsertAfterGreaterThanSignKeyword_4_0() { return cInsertAfterGreaterThanSignKeyword_4_0; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrExprSequenceParserRuleCall_0_0 = (RuleCall)cOrExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrExprSequenceParserRuleCall_1_1_0 = (RuleCall)cOrExprAssignment_1_1.eContents().get(0);
		
		//Alternative:
		//	orExpr+=Sequence ("|" orExpr+=Sequence)*;
		public ParserRule getRule() { return rule; }

		//orExpr+=Sequence ("|" orExpr+=Sequence)*
		public Group getGroup() { return cGroup; }

		//orExpr+=Sequence
		public Assignment getOrExprAssignment_0() { return cOrExprAssignment_0; }

		//Sequence
		public RuleCall getOrExprSequenceParserRuleCall_0_0() { return cOrExprSequenceParserRuleCall_0_0; }

		//("|" orExpr+=Sequence)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//orExpr+=Sequence
		public Assignment getOrExprAssignment_1_1() { return cOrExprAssignment_1_1; }

		//Sequence
		public RuleCall getOrExprSequenceParserRuleCall_1_1_0() { return cOrExprSequenceParserRuleCall_1_1_0; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Assignment cAndExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAndExprQuantifierParserRuleCall_0 = (RuleCall)cAndExprAssignment.eContents().get(0);
		
		//Sequence:
		//	andExpr+=Quantifier+;
		public ParserRule getRule() { return rule; }

		//andExpr+=Quantifier+
		public Assignment getAndExprAssignment() { return cAndExprAssignment; }

		//Quantifier
		public RuleCall getAndExprQuantifierParserRuleCall_0() { return cAndExprQuantifierParserRuleCall_0; }
	}

	public class QuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cItemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cItemItemParserRuleCall_0_0 = (RuleCall)cItemAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQuantifierTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Quantifier:
		//	item=Item type=QuantifierType?;
		public ParserRule getRule() { return rule; }

		//item=Item type=QuantifierType?
		public Group getGroup() { return cGroup; }

		//item=Item
		public Assignment getItemAssignment_0() { return cItemAssignment_0; }

		//Item
		public RuleCall getItemItemParserRuleCall_0_0() { return cItemItemParserRuleCall_0_0; }

		//type=QuantifierType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//QuantifierType
		public RuleCall getTypeQuantifierTypeEnumRuleCall_1_0() { return cTypeQuantifierTypeEnumRuleCall_1_0; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGroupParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Item returns xbase::XExpression:
		//	Operator | XStringLiteral | Group;
		public ParserRule getRule() { return rule; }

		//Operator | XStringLiteral | Group
		public Alternatives getAlternatives() { return cAlternatives; }

		//Operator
		public RuleCall getOperatorParserRuleCall_0() { return cOperatorParserRuleCall_0; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_1() { return cXStringLiteralParserRuleCall_1; }

		//Group
		public RuleCall getGroupParserRuleCall_2() { return cGroupParserRuleCall_2; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeOperatorTypeEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Operator:
		//	type=OperatorType;
		public ParserRule getRule() { return rule; }

		//type=OperatorType
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//OperatorType
		public RuleCall getTypeOperatorTypeEnumRuleCall_0() { return cTypeOperatorTypeEnumRuleCall_0; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubTargetAlternativeParserRuleCall_1_0 = (RuleCall)cSubTargetAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Group:
		//	"(" subTarget=Alternative ")";
		public ParserRule getRule() { return rule; }

		//"(" subTarget=Alternative ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//subTarget=Alternative
		public Assignment getSubTargetAssignment_1() { return cSubTargetAssignment_1; }

		//Alternative
		public RuleCall getSubTargetAlternativeParserRuleCall_1_0() { return cSubTargetAlternativeParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PatternCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefPatternCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cRefPatternCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PatternCall:
		//	ref=[Pattern] "(" values+=Value ("," values+=Value)* ")";
		public ParserRule getRule() { return rule; }

		//ref=[Pattern] "(" values+=Value ("," values+=Value)* ")"
		public Group getGroup() { return cGroup; }

		//ref=[Pattern]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[Pattern]
		public CrossReference getRefPatternCrossReference_0_0() { return cRefPatternCrossReference_0_0; }

		//ID
		public RuleCall getRefPatternIDTerminalRuleCall_0_0_1() { return cRefPatternIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=Value
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//Value
		public RuleCall getValuesValueParserRuleCall_2_0() { return cValuesValueParserRuleCall_2_0; }

		//("," values+=Value)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=Value
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//Value
		public RuleCall getValuesValueParserRuleCall_3_1_0() { return cValuesValueParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsStringElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Value:
		//	elements+=StringElement+;
		public ParserRule getRule() { return rule; }

		//elements+=StringElement+
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//StringElement
		public RuleCall getElementsStringElementParserRuleCall_0() { return cElementsStringElementParserRuleCall_0; }
	}

	public class StringElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cToUpperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cToUpperNumberSignKeyword_0_0 = (Keyword)cToUpperAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueElementParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringElement:
		//	toUpper?="#"? value=ValueElement;
		public ParserRule getRule() { return rule; }

		//toUpper?="#"? value=ValueElement
		public Group getGroup() { return cGroup; }

		//toUpper?="#"?
		public Assignment getToUpperAssignment_0() { return cToUpperAssignment_0; }

		//"#"
		public Keyword getToUpperNumberSignKeyword_0_0() { return cToUpperNumberSignKeyword_0_0; }

		//value=ValueElement
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ValueElement
		public RuleCall getValueValueElementParserRuleCall_1_0() { return cValueValueElementParserRuleCall_1_0; }
	}

	public class ValueElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScopeRefElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValueElement returns xbase::XExpression:
		//	XStringLiteral | PatternCall | ScopeRefElement | PropertyReference;
		public ParserRule getRule() { return rule; }

		//XStringLiteral | PatternCall | ScopeRefElement | PropertyReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_0() { return cXStringLiteralParserRuleCall_0; }

		//PatternCall
		public RuleCall getPatternCallParserRuleCall_1() { return cPatternCallParserRuleCall_1; }

		//ScopeRefElement
		public RuleCall getScopeRefElementParserRuleCall_2() { return cScopeRefElementParserRuleCall_2; }

		//PropertyReference
		public RuleCall getPropertyReferenceParserRuleCall_3() { return cPropertyReferenceParserRuleCall_3; }
	}

	public class PropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefPropertyCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefPropertyIDTerminalRuleCall_0_1 = (RuleCall)cRefPropertyCrossReference_0.eContents().get(1);
		
		//PropertyReference:
		//	ref=[Property];
		public ParserRule getRule() { return rule; }

		//ref=[Property]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[Property]
		public CrossReference getRefPropertyCrossReference_0() { return cRefPropertyCrossReference_0; }

		//ID
		public RuleCall getRefPropertyIDTerminalRuleCall_0_1() { return cRefPropertyIDTerminalRuleCall_0_1; }
	}

	public class ScopeRefElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopeRefElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefQualifiedNameParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//ScopeRefElement: //ref=[ecore::ENamedElement|QualifiedName]
		//	"@" ref=QualifiedName;
		public ParserRule getRule() { return rule; }

		////ref=[ecore::ENamedElement|QualifiedName]
		//"@" ref=QualifiedName
		public Group getGroup() { return cGroup; }

		////ref=[ecore::ENamedElement|QualifiedName]
		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//ref=QualifiedName
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//QualifiedName
		public RuleCall getRefQualifiedNameParserRuleCall_1_0() { return cRefQualifiedNameParserRuleCall_1_0; }
	}
	
	
	public class QuantifierTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "QuantifierType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONE_OR_MANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONE_OR_MANYAsteriskKeyword_0_0 = (Keyword)cNONE_OR_MANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOPTIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOPTIONALQuestionMarkKeyword_1_0 = (Keyword)cOPTIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cONE_OR_MANYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cONE_OR_MANYPlusSignKeyword_2_0 = (Keyword)cONE_OR_MANYEnumLiteralDeclaration_2.eContents().get(0);
		
		/// * * / enum QuantifierType:
		//	NONE_OR_MANY="*" | OPTIONAL="?" | ONE_OR_MANY="+";
		public EnumRule getRule() { return rule; }

		//NONE_OR_MANY="*" | OPTIONAL="?" | ONE_OR_MANY="+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE_OR_MANY="*"
		public EnumLiteralDeclaration getNONE_OR_MANYEnumLiteralDeclaration_0() { return cNONE_OR_MANYEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getNONE_OR_MANYAsteriskKeyword_0_0() { return cNONE_OR_MANYAsteriskKeyword_0_0; }

		//OPTIONAL="?"
		public EnumLiteralDeclaration getOPTIONALEnumLiteralDeclaration_1() { return cOPTIONALEnumLiteralDeclaration_1; }

		//"?"
		public Keyword getOPTIONALQuestionMarkKeyword_1_0() { return cOPTIONALQuestionMarkKeyword_1_0; }

		//ONE_OR_MANY="+"
		public EnumLiteralDeclaration getONE_OR_MANYEnumLiteralDeclaration_2() { return cONE_OR_MANYEnumLiteralDeclaration_2; }

		//"+"
		public Keyword getONE_OR_MANYPlusSignKeyword_2_0() { return cONE_OR_MANYPlusSignKeyword_2_0; }
	}

	public class OperatorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANY_CHAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANY_CHARFullStopKeyword_0_0 = (Keyword)cANY_CHAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWHITE_SPACEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWHITE_SPACESKeyword_1_0 = (Keyword)cWHITE_SPACEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNON_WHITE_SPACEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNON_WHITE_SPACESKeyword_2_0 = (Keyword)cNON_WHITE_SPACEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWORD_CHAREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWORD_CHARWKeyword_3_0 = (Keyword)cWORD_CHAREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNON_WORD_CHAREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNON_WORD_CHARWKeyword_4_0 = (Keyword)cNON_WORD_CHAREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDIGITEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDIGITDKeyword_5_0 = (Keyword)cDIGITEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNON_DIGITEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNON_DIGITDKeyword_6_0 = (Keyword)cNON_DIGITEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum OperatorType:
		//	ANY_CHAR="." | WHITE_SPACE="\\s" | NON_WHITE_SPACE="\\S" | WORD_CHAR="\\w" | NON_WORD_CHAR="\\W" | DIGIT="\\d" |
		//	NON_DIGIT="\\D";
		public EnumRule getRule() { return rule; }

		//ANY_CHAR="." | WHITE_SPACE="\\s" | NON_WHITE_SPACE="\\S" | WORD_CHAR="\\w" | NON_WORD_CHAR="\\W" | DIGIT="\\d" |
		//NON_DIGIT="\\D"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANY_CHAR="."
		public EnumLiteralDeclaration getANY_CHAREnumLiteralDeclaration_0() { return cANY_CHAREnumLiteralDeclaration_0; }

		//"."
		public Keyword getANY_CHARFullStopKeyword_0_0() { return cANY_CHARFullStopKeyword_0_0; }

		//WHITE_SPACE="\\s"
		public EnumLiteralDeclaration getWHITE_SPACEEnumLiteralDeclaration_1() { return cWHITE_SPACEEnumLiteralDeclaration_1; }

		//"\\s"
		public Keyword getWHITE_SPACESKeyword_1_0() { return cWHITE_SPACESKeyword_1_0; }

		//NON_WHITE_SPACE="\\S"
		public EnumLiteralDeclaration getNON_WHITE_SPACEEnumLiteralDeclaration_2() { return cNON_WHITE_SPACEEnumLiteralDeclaration_2; }

		//"\\S"
		public Keyword getNON_WHITE_SPACESKeyword_2_0() { return cNON_WHITE_SPACESKeyword_2_0; }

		//WORD_CHAR="\\w"
		public EnumLiteralDeclaration getWORD_CHAREnumLiteralDeclaration_3() { return cWORD_CHAREnumLiteralDeclaration_3; }

		//"\\w"
		public Keyword getWORD_CHARWKeyword_3_0() { return cWORD_CHARWKeyword_3_0; }

		//NON_WORD_CHAR="\\W"
		public EnumLiteralDeclaration getNON_WORD_CHAREnumLiteralDeclaration_4() { return cNON_WORD_CHAREnumLiteralDeclaration_4; }

		//"\\W"
		public Keyword getNON_WORD_CHARWKeyword_4_0() { return cNON_WORD_CHARWKeyword_4_0; }

		//DIGIT="\\d"
		public EnumLiteralDeclaration getDIGITEnumLiteralDeclaration_5() { return cDIGITEnumLiteralDeclaration_5; }

		//"\\d"
		public Keyword getDIGITDKeyword_5_0() { return cDIGITDKeyword_5_0; }

		//NON_DIGIT="\\D"
		public EnumLiteralDeclaration getNON_DIGITEnumLiteralDeclaration_6() { return cNON_DIGITEnumLiteralDeclaration_6; }

		//"\\D"
		public Keyword getNON_DIGITDKeyword_6_0() { return cNON_DIGITDKeyword_6_0; }
	}
	
	private ModelElements pModel;
	private DataTypeDeclarationElements pDataTypeDeclaration;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private PatternElements pPattern;
	private ParameterElements pParameter;
	private CodeElementElements pCodeElement;
	private SimpleCodeElementElements pSimpleCodeElement;
	private ParameterRefElements pParameterRef;
	private ProbeElements pProbe;
	private RecordDeclarationElements pRecordDeclaration;
	private PropertyElements pProperty;
	private ReplacementElements pReplacement;
	private ScopeElements pScope;
	private AlternativeElements pAlternative;
	private SequenceElements pSequence;
	private QuantifierElements pQuantifier;
	private ItemElements pItem;
	private OperatorElements pOperator;
	private GroupElements pGroup;
	private PatternCallElements pPatternCall;
	private ValueElements pValue;
	private StringElementElements pStringElement;
	private ValueElementElements pValueElement;
	private PropertyReferenceElements pPropertyReference;
	private ScopeRefElementElements pScopeRefElement;
	private QuantifierTypeElements unknownRuleQuantifierType;
	private OperatorTypeElements unknownRuleOperatorType;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public ProbeLangGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.se.instrumentation.language.ProbeLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	"package" name=QualifiedName imports+=Import* types+=DataTypeDeclaration* patterns+=Pattern* probes+=Probe*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//DataTypeDeclaration:
	//	"type" name=ID;
	public DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return (pDataTypeDeclaration != null) ? pDataTypeDeclaration : (pDataTypeDeclaration = new DataTypeDeclarationElements());
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}

	//Import:
	//	"import" ePackage=[ecore::EPackage|STRING] "as" name=ID;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//Pattern:
	//	"pattern" name=ID "(" parameters+=Parameter ("," parameters+=Parameter)* ")" codeSequcene+=CodeElement*;
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//Parameter:
	//	name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//CodeElement:
	//	toUpper?="#"? value=SimpleCodeElement;
	public CodeElementElements getCodeElementAccess() {
		return (pCodeElement != null) ? pCodeElement : (pCodeElement = new CodeElementElements());
	}
	
	public ParserRule getCodeElementRule() {
		return getCodeElementAccess().getRule();
	}

	//SimpleCodeElement returns xbase::XExpression:
	//	XStringLiteral | ParameterRef;
	public SimpleCodeElementElements getSimpleCodeElementAccess() {
		return (pSimpleCodeElement != null) ? pSimpleCodeElement : (pSimpleCodeElement = new SimpleCodeElementElements());
	}
	
	public ParserRule getSimpleCodeElementRule() {
		return getSimpleCodeElementAccess().getRule();
	}

	//ParameterRef:
	//	ref=[Parameter];
	public ParameterRefElements getParameterRefAccess() {
		return (pParameterRef != null) ? pParameterRef : (pParameterRef = new ParameterRefElements());
	}
	
	public ParserRule getParameterRefRule() {
		return getParameterRefAccess().getRule();
	}

	//Probe:
	//	"probe" name=ID "{" record=RecordDeclaration? replacements+=Replacement* "}";
	public ProbeElements getProbeAccess() {
		return (pProbe != null) ? pProbe : (pProbe = new ProbeElements());
	}
	
	public ParserRule getProbeRule() {
		return getProbeAccess().getRule();
	}

	//RecordDeclaration:
	//	"record" "{" properties+=Property+ "}";
	public RecordDeclarationElements getRecordDeclarationAccess() {
		return (pRecordDeclaration != null) ? pRecordDeclaration : (pRecordDeclaration = new RecordDeclarationElements());
	}
	
	public ParserRule getRecordDeclarationRule() {
		return getRecordDeclarationAccess().getRule();
	}

	//Property:
	//	type=[DataTypeDeclaration] name=ID;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Replacement:
	//	name=ID scope=Scope "{" patterns+=PatternCall* "}";
	public ReplacementElements getReplacementAccess() {
		return (pReplacement != null) ? pReplacement : (pReplacement = new ReplacementElements());
	}
	
	public ParserRule getReplacementRule() {
		return getReplacementAccess().getRule();
	}

	//Scope:
	//	"scope" modelRef=QualifiedName insertBefore?="<"? target=Alternative insertAfter?=">"?;
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Alternative:
	//	orExpr+=Sequence ("|" orExpr+=Sequence)*;
	public AlternativeElements getAlternativeAccess() {
		return (pAlternative != null) ? pAlternative : (pAlternative = new AlternativeElements());
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//Sequence:
	//	andExpr+=Quantifier+;
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Quantifier:
	//	item=Item type=QuantifierType?;
	public QuantifierElements getQuantifierAccess() {
		return (pQuantifier != null) ? pQuantifier : (pQuantifier = new QuantifierElements());
	}
	
	public ParserRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}

	//Item returns xbase::XExpression:
	//	Operator | XStringLiteral | Group;
	public ItemElements getItemAccess() {
		return (pItem != null) ? pItem : (pItem = new ItemElements());
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//Operator:
	//	type=OperatorType;
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Group:
	//	"(" subTarget=Alternative ")";
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//PatternCall:
	//	ref=[Pattern] "(" values+=Value ("," values+=Value)* ")";
	public PatternCallElements getPatternCallAccess() {
		return (pPatternCall != null) ? pPatternCall : (pPatternCall = new PatternCallElements());
	}
	
	public ParserRule getPatternCallRule() {
		return getPatternCallAccess().getRule();
	}

	//Value:
	//	elements+=StringElement+;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//StringElement:
	//	toUpper?="#"? value=ValueElement;
	public StringElementElements getStringElementAccess() {
		return (pStringElement != null) ? pStringElement : (pStringElement = new StringElementElements());
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}

	//ValueElement returns xbase::XExpression:
	//	XStringLiteral | PatternCall | ScopeRefElement | PropertyReference;
	public ValueElementElements getValueElementAccess() {
		return (pValueElement != null) ? pValueElement : (pValueElement = new ValueElementElements());
	}
	
	public ParserRule getValueElementRule() {
		return getValueElementAccess().getRule();
	}

	//PropertyReference:
	//	ref=[Property];
	public PropertyReferenceElements getPropertyReferenceAccess() {
		return (pPropertyReference != null) ? pPropertyReference : (pPropertyReference = new PropertyReferenceElements());
	}
	
	public ParserRule getPropertyReferenceRule() {
		return getPropertyReferenceAccess().getRule();
	}

	//ScopeRefElement: //ref=[ecore::ENamedElement|QualifiedName]
	//	"@" ref=QualifiedName;
	public ScopeRefElementElements getScopeRefElementAccess() {
		return (pScopeRefElement != null) ? pScopeRefElement : (pScopeRefElement = new ScopeRefElementElements());
	}
	
	public ParserRule getScopeRefElementRule() {
		return getScopeRefElementAccess().getRule();
	}

	/// * * / enum QuantifierType:
	//	NONE_OR_MANY="*" | OPTIONAL="?" | ONE_OR_MANY="+";
	public QuantifierTypeElements getQuantifierTypeAccess() {
		return (unknownRuleQuantifierType != null) ? unknownRuleQuantifierType : (unknownRuleQuantifierType = new QuantifierTypeElements());
	}
	
	public EnumRule getQuantifierTypeRule() {
		return getQuantifierTypeAccess().getRule();
	}

	//enum OperatorType:
	//	ANY_CHAR="." | WHITE_SPACE="\\s" | NON_WHITE_SPACE="\\S" | WORD_CHAR="\\w" | NON_WORD_CHAR="\\W" | DIGIT="\\d" |
	//	NON_DIGIT="\\D";
	public OperatorTypeElements getOperatorTypeAccess() {
		return (unknownRuleOperatorType != null) ? unknownRuleOperatorType : (unknownRuleOperatorType = new OperatorTypeElements());
	}
	
	public EnumRule getOperatorTypeRule() {
		return getOperatorTypeAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" ">" => ">"? | "<" "<" => "<"? | "<" ">" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
