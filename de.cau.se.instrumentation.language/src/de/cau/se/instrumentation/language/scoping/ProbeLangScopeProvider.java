/*
 * generated by Xtext
 */
package de.cau.se.instrumentation.language.scoping;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import com.google.common.base.Predicate;

import de.cau.se.instrumentation.language.probeLang.Classifier;
import de.cau.se.instrumentation.language.probeLang.Package;
import de.cau.se.instrumentation.language.probeLang.Property;
import de.cau.se.instrumentation.language.probeLang.ReferenceProperty;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class ProbeLangScopeProvider extends AbstractDeclarativeScopeProvider {
	public IScope scope_Package_package(Package context, EReference reference) {
		IScope result = new FilteringScope(delegateGetScope(context, reference),new Predicate<IEObjectDescription>() {
			
			@Override
			public boolean apply(IEObjectDescription input) {
				String isNSURI = input.getUserData("nsURI");
				return "true".equals(isNSURI);
			}
		});
		return result;
	}
	
	IScope scope_Classifier_class (Classifier classifier, EReference reference) {
		return Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(classifier.getPackage().getPackage(),
				EClassifier.class));
	}
	
	IScope scope_ReferenceProperty_ref (ReferenceProperty property, EReference reference) {
		// check if the parent is a property or a nester property reference
		if (property.eContainer() instanceof Property)
			// for properties you can directly access the EClassifier via getClass_
			return Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(((Property)property.eContainer()).getType().getClass_(),
				EStructuralFeature.class));
		else if (property.eContainer() instanceof ReferenceProperty) {
			// for nested properties the type for the property has to be extracted from the property reference type
			EStructuralFeature feature = ((ReferenceProperty)property.eContainer()).getRef();
			// also, only EReferences refer to classes and can therefore have properties
			if (feature instanceof EReference)
				return Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(((EReference)feature).getEReferenceType(),
						EStructuralFeature.class));
			else // attributes as such do not have properties
				return null;
		} else // illegal type
			return null;
	}

}
