/*
 * generated by Xtext
 */
package de.cau.se.instrumentation.language.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import de.cau.se.instrumentation.language.probeLang.Probe
import de.cau.se.instrumentation.language.probeLang.Model
import de.cau.se.instrumentation.language.probeLang.Property

class ProbeLangGenerator implements IGenerator {
	
	// FIXME be aware this function uses / for path separation
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(e: resource.allContents.toIterable.filter(typeof(Probe))) {
			fsa.generateFile((e.eContainer as Model).name.replace('.','/') + "/" + e.name.toFirstUpper + "Record.java",e.compile)
		}
	}
	
	def CharSequence compile(Probe probe) '''
		package «(probe.eContainer as Model).name»;
		
		import kieker.common.record.AbstractMonitoringRecord;
		
		public class «probe.name.toFirstUpper»Record extends AbstractMonitoringRecord {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			
			«FOR property : probe.properties»«property.property»«ENDFOR»
			«FOR property : probe.properties»«property.getter»«ENDFOR»
			
			public «probe.name.toFirstUpper» («FOR property : probe.properties SEPARATOR ','»«property.propDecl»«ENDFOR») {
				«FOR property : probe.properties»«property.propInit»«ENDFOR»
			}
			
			@Override
			public Object[] toArray() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void initFromArray(Object[] values) {
				// TODO Auto-generated method stub
			}
			
			@Override
			public Class<?>[] getValueTypes() {
				// TODO Auto-generated method stub
				return null;
			}
		}
	'''
	
	/**
	 * Assignments in the record constructor
	 */
	def propInit(Property property) '''
		this.«property.name» = «property.name»;
	'''

	/**
	 * Declarations for constructor parameters
	 */
	 def propDecl(Property property) '''«property.type.class_.name» «property.name»'''

	
	def CharSequence getter(Property property) '''
		public «property.type.class_.name» get«property.name.toFirstUpper»() {
			return «property.name»;
		}
	'''

			
	def CharSequence property(Property property) '''
		private «property.type.class_.name» «property.name»;
	'''

}
