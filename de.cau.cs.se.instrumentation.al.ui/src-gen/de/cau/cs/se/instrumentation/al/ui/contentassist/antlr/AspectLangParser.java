/*
 * generated by Xtext
 */
package de.cau.cs.se.instrumentation.al.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.se.instrumentation.al.services.AspectLangGrammarAccess;

public class AspectLangParser extends AbstractContentAssistParser {
	
	@Inject
	private AspectLangGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.se.instrumentation.al.ui.contentassist.antlr.internal.InternalAspectLangParser createParser() {
		de.cau.cs.se.instrumentation.al.ui.contentassist.antlr.internal.InternalAspectLangParser result = new de.cau.cs.se.instrumentation.al.ui.contentassist.antlr.internal.InternalAspectLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_4(), "rule__Model__Alternatives_4");
					put(grammarAccess.getMethodQueryAccess().getAlternatives_3(), "rule__MethodQuery__Alternatives_3");
					put(grammarAccess.getLocationQueryAccess().getAlternatives_1(), "rule__LocationQuery__Alternatives_1");
					put(grammarAccess.getNodeAccess().getAlternatives_0(), "rule__Node__Alternatives_0");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
					put(grammarAccess.getAnnotationAccess().getAlternatives(), "rule__Annotation__Alternatives");
					put(grammarAccess.getValuedAnnotationAccess().getAlternatives(), "rule__ValuedAnnotation__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getQueryModifierAccess().getAlternatives(), "rule__QueryModifier__Alternatives");
					put(grammarAccess.getLogicOperatorAccess().getAlternatives(), "rule__LogicOperator__Alternatives");
					put(grammarAccess.getInternalFunctionAccess().getAlternatives(), "rule__InternalFunction__Alternatives");
					put(grammarAccess.getReflectionFunctionAccess().getAlternatives(), "rule__ReflectionFunction__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getInsertionPointAccess().getAlternatives(), "rule__InsertionPoint__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getApplicationModelAccess().getGroup(), "rule__ApplicationModel__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
					put(grammarAccess.getAspectAccess().getGroup(), "rule__Aspect__Group__0");
					put(grammarAccess.getAspectAccess().getGroup_4(), "rule__Aspect__Group_4__0");
					put(grammarAccess.getUtilizeAdviceAccess().getGroup(), "rule__UtilizeAdvice__Group__0");
					put(grammarAccess.getUtilizeAdviceAccess().getGroup_1(), "rule__UtilizeAdvice__Group_1__0");
					put(grammarAccess.getUtilizeAdviceAccess().getGroup_1_1(), "rule__UtilizeAdvice__Group_1_1__0");
					put(grammarAccess.getUtilizeAdviceAccess().getGroup_1_1_1(), "rule__UtilizeAdvice__Group_1_1_1__0");
					put(grammarAccess.getAdviceAccess().getGroup(), "rule__Advice__Group__0");
					put(grammarAccess.getAdviceAccess().getGroup_2(), "rule__Advice__Group_2__0");
					put(grammarAccess.getAdviceAccess().getGroup_2_1(), "rule__Advice__Group_2_1__0");
					put(grammarAccess.getAdviceAccess().getGroup_2_1_1(), "rule__Advice__Group_2_1_1__0");
					put(grammarAccess.getParameterDeclarationAccess().getGroup(), "rule__ParameterDeclaration__Group__0");
					put(grammarAccess.getPointcutAccess().getGroup(), "rule__Pointcut__Group__0");
					put(grammarAccess.getPointcutAccess().getGroup_5(), "rule__Pointcut__Group_5__0");
					put(grammarAccess.getMethodQueryAccess().getGroup(), "rule__MethodQuery__Group__0");
					put(grammarAccess.getMethodQueryAccess().getGroup_3_0(), "rule__MethodQuery__Group_3_0__0");
					put(grammarAccess.getMethodQueryAccess().getGroup_3_0_1(), "rule__MethodQuery__Group_3_0_1__0");
					put(grammarAccess.getMethodQueryAccess().getGroup_3_0_1_2(), "rule__MethodQuery__Group_3_0_1_2__0");
					put(grammarAccess.getParameterQueryAccess().getGroup(), "rule__ParameterQuery__Group__0");
					put(grammarAccess.getLocationQueryAccess().getGroup(), "rule__LocationQuery__Group__0");
					put(grammarAccess.getLocationQueryAccess().getGroup_1_0(), "rule__LocationQuery__Group_1_0__0");
					put(grammarAccess.getCompositionQueryAccess().getGroup(), "rule__CompositionQuery__Group__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getParamQueryAccess().getGroup(), "rule__ParamQuery__Group__0");
					put(grammarAccess.getParamOperatorAccess().getGroup(), "rule__ParamOperator__Group__0");
					put(grammarAccess.getParamOperatorAccess().getGroup_1(), "rule__ParamOperator__Group_1__0");
					put(grammarAccess.getParamCompareAccess().getGroup(), "rule__ParamCompare__Group__0");
					put(grammarAccess.getParamCompareAccess().getGroup_1(), "rule__ParamCompare__Group_1__0");
					put(grammarAccess.getReferenceValueAccess().getGroup(), "rule__ReferenceValue__Group__0");
					put(grammarAccess.getRuntimePropertyAccess().getGroup(), "rule__RuntimeProperty__Group__0");
					put(grammarAccess.getReflectionPropertyAccess().getGroup(), "rule__ReflectionProperty__Group__0");
					put(grammarAccess.getWildcardNodeAccess().getGroup(), "rule__WildcardNode__Group__0");
					put(grammarAccess.getSubPathNodeAccess().getGroup(), "rule__SubPathNode__Group__0");
					put(grammarAccess.getParentNodeAccess().getGroup(), "rule__ParentNode__Group__0");
					put(grammarAccess.getCollectorAccess().getGroup(), "rule__Collector__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_2(), "rule__Event__Group_2__0");
					put(grammarAccess.getEventAccess().getGroup_2_1(), "rule__Event__Group_2_1__0");
					put(grammarAccess.getTagAnnotationAccess().getGroup(), "rule__TagAnnotation__Group__0");
					put(grammarAccess.getTagAnnotationAccess().getGroup_2(), "rule__TagAnnotation__Group_2__0");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getGroup(), "rule__KeyStringValueAnnotation__Group__0");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getGroup_3(), "rule__KeyStringValueAnnotation__Group_3__0");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup(), "rule__TypedKeyStringValueAnnotation__Group__0");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup_6(), "rule__TypedKeyStringValueAnnotation__Group_6__0");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup(), "rule__KeyBooleanValueAnnotation__Group__0");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup_3(), "rule__KeyBooleanValueAnnotation__Group_3__0");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getGroup(), "rule__KeyIntValueAnnotation__Group__0");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getGroup_3(), "rule__KeyIntValueAnnotation__Group_3__0");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup(), "rule__KeyFloatValueAnnotation__Group__0");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup_3(), "rule__KeyFloatValueAnnotation__Group_3__0");
					put(grammarAccess.getImportAnnotationAccess().getGroup(), "rule__ImportAnnotation__Group__0");
					put(grammarAccess.getExtendedIDAccess().getGroup(), "rule__ExtendedID__Group__0");
					put(grammarAccess.getExtendedIDAccess().getGroup_1(), "rule__ExtendedID__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_2(), "rule__Model__ImportsAssignment_2");
					put(grammarAccess.getModelAccess().getSourcesAssignment_3(), "rule__Model__SourcesAssignment_3");
					put(grammarAccess.getModelAccess().getAdvicesAssignment_4_0(), "rule__Model__AdvicesAssignment_4_0");
					put(grammarAccess.getModelAccess().getPointcutsAssignment_4_1(), "rule__Model__PointcutsAssignment_4_1");
					put(grammarAccess.getModelAccess().getAspectsAssignment_4_2(), "rule__Model__AspectsAssignment_4_2");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getApplicationModelAccess().getHandlerAssignment_1(), "rule__ApplicationModel__HandlerAssignment_1");
					put(grammarAccess.getApplicationModelAccess().getNameAssignment_3(), "rule__ApplicationModel__NameAssignment_3");
					put(grammarAccess.getApplicationModelAccess().getModelAssignment_4(), "rule__ApplicationModel__ModelAssignment_4");
					put(grammarAccess.getAspectAccess().getPointcutAssignment_1(), "rule__Aspect__PointcutAssignment_1");
					put(grammarAccess.getAspectAccess().getAdvicesAssignment_3(), "rule__Aspect__AdvicesAssignment_3");
					put(grammarAccess.getAspectAccess().getAdvicesAssignment_4_1(), "rule__Aspect__AdvicesAssignment_4_1");
					put(grammarAccess.getUtilizeAdviceAccess().getAdviceAssignment_0(), "rule__UtilizeAdvice__AdviceAssignment_0");
					put(grammarAccess.getUtilizeAdviceAccess().getParameterAssignmentsAssignment_1_1_0(), "rule__UtilizeAdvice__ParameterAssignmentsAssignment_1_1_0");
					put(grammarAccess.getUtilizeAdviceAccess().getParameterAssignmentsAssignment_1_1_1_1(), "rule__UtilizeAdvice__ParameterAssignmentsAssignment_1_1_1_1");
					put(grammarAccess.getAdviceAccess().getNameAssignment_1(), "rule__Advice__NameAssignment_1");
					put(grammarAccess.getAdviceAccess().getParameterDeclarationsAssignment_2_1_0(), "rule__Advice__ParameterDeclarationsAssignment_2_1_0");
					put(grammarAccess.getAdviceAccess().getParameterDeclarationsAssignment_2_1_1_1(), "rule__Advice__ParameterDeclarationsAssignment_2_1_1_1");
					put(grammarAccess.getAdviceAccess().getCollectorsAssignment_4(), "rule__Advice__CollectorsAssignment_4");
					put(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_0(), "rule__ParameterDeclaration__TypeAssignment_0");
					put(grammarAccess.getParameterDeclarationAccess().getNameAssignment_1(), "rule__ParameterDeclaration__NameAssignment_1");
					put(grammarAccess.getPointcutAccess().getAnnotationAssignment_0(), "rule__Pointcut__AnnotationAssignment_0");
					put(grammarAccess.getPointcutAccess().getNameAssignment_2(), "rule__Pointcut__NameAssignment_2");
					put(grammarAccess.getPointcutAccess().getLocationAssignment_4(), "rule__Pointcut__LocationAssignment_4");
					put(grammarAccess.getPointcutAccess().getMethodAssignment_5_1(), "rule__Pointcut__MethodAssignment_5_1");
					put(grammarAccess.getMethodQueryAccess().getModifierAssignment_1(), "rule__MethodQuery__ModifierAssignment_1");
					put(grammarAccess.getMethodQueryAccess().getReturnTypeAssignment_2(), "rule__MethodQuery__ReturnTypeAssignment_2");
					put(grammarAccess.getMethodQueryAccess().getMethodReferenceAssignment_3_0_0(), "rule__MethodQuery__MethodReferenceAssignment_3_0_0");
					put(grammarAccess.getMethodQueryAccess().getParameterQueriesAssignment_3_0_1_1(), "rule__MethodQuery__ParameterQueriesAssignment_3_0_1_1");
					put(grammarAccess.getMethodQueryAccess().getParameterQueriesAssignment_3_0_1_2_1(), "rule__MethodQuery__ParameterQueriesAssignment_3_0_1_2_1");
					put(grammarAccess.getParameterQueryAccess().getModifierAssignment_0(), "rule__ParameterQuery__ModifierAssignment_0");
					put(grammarAccess.getParameterQueryAccess().getTypeAssignment_1(), "rule__ParameterQuery__TypeAssignment_1");
					put(grammarAccess.getParameterQueryAccess().getParameterAssignment_2(), "rule__ParameterQuery__ParameterAssignment_2");
					put(grammarAccess.getLocationQueryAccess().getNodeAssignment_0(), "rule__LocationQuery__NodeAssignment_0");
					put(grammarAccess.getLocationQueryAccess().getSpecializationAssignment_1_0_1(), "rule__LocationQuery__SpecializationAssignment_1_0_1");
					put(grammarAccess.getLocationQueryAccess().getCompositionAssignment_1_1(), "rule__LocationQuery__CompositionAssignment_1_1");
					put(grammarAccess.getCompositionQueryAccess().getModifierAssignment_1(), "rule__CompositionQuery__ModifierAssignment_1");
					put(grammarAccess.getCompositionQueryAccess().getSubQueriesAssignment_3(), "rule__CompositionQuery__SubQueriesAssignment_3");
					put(grammarAccess.getNodeAccess().getParameterAssignment_1(), "rule__Node__ParameterAssignment_1");
					put(grammarAccess.getParamQueryAccess().getQueriesAssignment_1(), "rule__ParamQuery__QueriesAssignment_1");
					put(grammarAccess.getParamOperatorAccess().getLogicAssignment_1_1(), "rule__ParamOperator__LogicAssignment_1_1");
					put(grammarAccess.getParamOperatorAccess().getRightAssignment_1_2(), "rule__ParamOperator__RightAssignment_1_2");
					put(grammarAccess.getParamCompareAccess().getOperatorAssignment_1_1(), "rule__ParamCompare__OperatorAssignment_1_1");
					put(grammarAccess.getParamCompareAccess().getRightAssignment_1_2(), "rule__ParamCompare__RightAssignment_1_2");
					put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
					put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
					put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
					put(grammarAccess.getReferenceValueAccess().getQueryAssignment_0(), "rule__ReferenceValue__QueryAssignment_0");
					put(grammarAccess.getReferenceValueAccess().getParameterAssignment_1(), "rule__ReferenceValue__ParameterAssignment_1");
					put(grammarAccess.getInternalFunctionPropertyAccess().getFunctionAssignment(), "rule__InternalFunctionProperty__FunctionAssignment");
					put(grammarAccess.getRuntimePropertyAccess().getReferenceAssignment_1(), "rule__RuntimeProperty__ReferenceAssignment_1");
					put(grammarAccess.getReflectionPropertyAccess().getFunctionAssignment_1(), "rule__ReflectionProperty__FunctionAssignment_1");
					put(grammarAccess.getContainerNodeAccess().getContainerAssignment(), "rule__ContainerNode__ContainerAssignment");
					put(grammarAccess.getCollectorAccess().getInsertionPointAssignment_0(), "rule__Collector__InsertionPointAssignment_0");
					put(grammarAccess.getCollectorAccess().getEventsAssignment_1(), "rule__Collector__EventsAssignment_1");
					put(grammarAccess.getEventAccess().getTypeAssignment_0(), "rule__Event__TypeAssignment_0");
					put(grammarAccess.getEventAccess().getInitializationsAssignment_2_0(), "rule__Event__InitializationsAssignment_2_0");
					put(grammarAccess.getEventAccess().getInitializationsAssignment_2_1_1(), "rule__Event__InitializationsAssignment_2_1_1");
					put(grammarAccess.getCommentAnnotationAccess().getValueAssignment(), "rule__CommentAnnotation__ValueAssignment");
					put(grammarAccess.getTagAnnotationAccess().getNameAssignment_1(), "rule__TagAnnotation__NameAssignment_1");
					put(grammarAccess.getTagAnnotationAccess().getAnnotationsAssignment_2_1(), "rule__TagAnnotation__AnnotationsAssignment_2_1");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getNameAssignment_1(), "rule__KeyStringValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getValueAssignment_2(), "rule__KeyStringValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyStringValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameAssignment_1(), "rule__TypedKeyStringValueAnnotation__NameAssignment_1");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeAssignment_3(), "rule__TypedKeyStringValueAnnotation__TypeAssignment_3");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueAssignment_5(), "rule__TypedKeyStringValueAnnotation__ValueAssignment_5");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAssignment_6_1(), "rule__TypedKeyStringValueAnnotation__AnnotationsAssignment_6_1");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameAssignment_1(), "rule__KeyBooleanValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getValueAssignment_2(), "rule__KeyBooleanValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyBooleanValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getNameAssignment_1(), "rule__KeyIntValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getValueAssignment_2(), "rule__KeyIntValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyIntValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getNameAssignment_1(), "rule__KeyFloatValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getValueAssignment_2(), "rule__KeyFloatValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyFloatValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getImportAnnotationAccess().getImportURIAssignment_1(), "rule__ImportAnnotation__ImportURIAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.se.instrumentation.al.ui.contentassist.antlr.internal.InternalAspectLangParser typedParser = (de.cau.cs.se.instrumentation.al.ui.contentassist.antlr.internal.InternalAspectLangParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AspectLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AspectLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
