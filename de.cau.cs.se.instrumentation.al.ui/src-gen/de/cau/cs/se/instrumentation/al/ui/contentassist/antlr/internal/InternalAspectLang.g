/*
* generated by Xtext
*/
grammar InternalAspectLang;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.se.instrumentation.al.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.se.instrumentation.al.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.se.instrumentation.al.services.AspectLangGrammarAccess;

}

@parser::members {
 
 	private AspectLangGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AspectLangGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegisteredPackage
entryRuleRegisteredPackage 
:
{ before(grammarAccess.getRegisteredPackageRule()); }
	 ruleRegisteredPackage
{ after(grammarAccess.getRegisteredPackageRule()); } 
	 EOF 
;

// Rule RegisteredPackage
ruleRegisteredPackage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegisteredPackageAccess().getGroup()); }
(rule__RegisteredPackage__Group__0)
{ after(grammarAccess.getRegisteredPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleApplicationModel
entryRuleApplicationModel 
:
{ before(grammarAccess.getApplicationModelRule()); }
	 ruleApplicationModel
{ after(grammarAccess.getApplicationModelRule()); } 
	 EOF 
;

// Rule ApplicationModel
ruleApplicationModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getApplicationModelAccess().getGroup()); }
(rule__ApplicationModel__Group__0)
{ after(grammarAccess.getApplicationModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAspect
entryRuleAspect 
:
{ before(grammarAccess.getAspectRule()); }
	 ruleAspect
{ after(grammarAccess.getAspectRule()); } 
	 EOF 
;

// Rule Aspect
ruleAspect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAspectAccess().getGroup()); }
(rule__Aspect__Group__0)
{ after(grammarAccess.getAspectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuery
entryRuleQuery 
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQueryAccess().getGroup()); }
(rule__Query__Group__0)
{ after(grammarAccess.getQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterPattern
entryRuleParameterPattern 
:
{ before(grammarAccess.getParameterPatternRule()); }
	 ruleParameterPattern
{ after(grammarAccess.getParameterPatternRule()); } 
	 EOF 
;

// Rule ParameterPattern
ruleParameterPattern
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterPatternAccess().getGroup()); }
(rule__ParameterPattern__Group__0)
{ after(grammarAccess.getParameterPatternAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocationQuery
entryRuleLocationQuery 
:
{ before(grammarAccess.getLocationQueryRule()); }
	 ruleLocationQuery
{ after(grammarAccess.getLocationQueryRule()); } 
	 EOF 
;

// Rule LocationQuery
ruleLocationQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationQueryAccess().getGroup()); }
(rule__LocationQuery__Group__0)
{ after(grammarAccess.getLocationQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getGroup()); }
(rule__Node__Group__0)
{ after(grammarAccess.getNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParamQuery
entryRuleParamQuery 
:
{ before(grammarAccess.getParamQueryRule()); }
	 ruleParamQuery
{ after(grammarAccess.getParamQueryRule()); } 
	 EOF 
;

// Rule ParamQuery
ruleParamQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamQueryAccess().getGroup()); }
(rule__ParamQuery__Group__0)
{ after(grammarAccess.getParamQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParamCompare
entryRuleParamCompare 
:
{ before(grammarAccess.getParamCompareRule()); }
	 ruleParamCompare
{ after(grammarAccess.getParamCompareRule()); } 
	 EOF 
;

// Rule ParamCompare
ruleParamCompare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamCompareAccess().getGroup()); }
(rule__ParamCompare__Group__0)
{ after(grammarAccess.getParamCompareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue 
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
(rule__StringValue__ValueAssignment)
{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReferenceValue
entryRuleReferenceValue 
:
{ before(grammarAccess.getReferenceValueRule()); }
	 ruleReferenceValue
{ after(grammarAccess.getReferenceValueRule()); } 
	 EOF 
;

// Rule ReferenceValue
ruleReferenceValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceValueAccess().getGroup()); }
(rule__ReferenceValue__Group__0)
{ after(grammarAccess.getReferenceValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuntimeProperty
entryRuleRuntimeProperty 
:
{ before(grammarAccess.getRuntimePropertyRule()); }
	 ruleRuntimeProperty
{ after(grammarAccess.getRuntimePropertyRule()); } 
	 EOF 
;

// Rule RuntimeProperty
ruleRuntimeProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuntimePropertyAccess().getGroup()); }
(rule__RuntimeProperty__Group__0)
{ after(grammarAccess.getRuntimePropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReflectionProperty
entryRuleReflectionProperty 
:
{ before(grammarAccess.getReflectionPropertyRule()); }
	 ruleReflectionProperty
{ after(grammarAccess.getReflectionPropertyRule()); } 
	 EOF 
;

// Rule ReflectionProperty
ruleReflectionProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReflectionPropertyAccess().getGroup()); }
(rule__ReflectionProperty__Group__0)
{ after(grammarAccess.getReflectionPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainerNode
entryRuleContainerNode 
:
{ before(grammarAccess.getContainerNodeRule()); }
	 ruleContainerNode
{ after(grammarAccess.getContainerNodeRule()); } 
	 EOF 
;

// Rule ContainerNode
ruleContainerNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainerNodeAccess().getContainerAssignment()); }
(rule__ContainerNode__ContainerAssignment)
{ after(grammarAccess.getContainerNodeAccess().getContainerAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWildcardNode
entryRuleWildcardNode 
:
{ before(grammarAccess.getWildcardNodeRule()); }
	 ruleWildcardNode
{ after(grammarAccess.getWildcardNodeRule()); } 
	 EOF 
;

// Rule WildcardNode
ruleWildcardNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWildcardNodeAccess().getGroup()); }
(rule__WildcardNode__Group__0)
{ after(grammarAccess.getWildcardNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubPathNode
entryRuleSubPathNode 
:
{ before(grammarAccess.getSubPathNodeRule()); }
	 ruleSubPathNode
{ after(grammarAccess.getSubPathNodeRule()); } 
	 EOF 
;

// Rule SubPathNode
ruleSubPathNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubPathNodeAccess().getGroup()); }
(rule__SubPathNode__Group__0)
{ after(grammarAccess.getSubPathNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollector
entryRuleCollector 
:
{ before(grammarAccess.getCollectorRule()); }
	 ruleCollector
{ after(grammarAccess.getCollectorRule()); } 
	 EOF 
;

// Rule Collector
ruleCollector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectorAccess().getGroup()); }
(rule__Collector__Group__0)
{ after(grammarAccess.getCollectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ReflectionFunction
ruleReflectionFunction
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReflectionFunctionAccess().getAlternatives()); }
(rule__ReflectionFunction__Alternatives)
{ after(grammarAccess.getReflectionFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule InsertionPoint
ruleInsertionPoint
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInsertionPointAccess().getAlternatives()); }
(rule__InsertionPoint__Alternatives)
{ after(grammarAccess.getInsertionPointAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Query__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getModifierAssignment_1_0_0()); }
(rule__Query__ModifierAssignment_1_0_0)
{ after(grammarAccess.getQueryAccess().getModifierAssignment_1_0_0()); }
)

    |(
{ before(grammarAccess.getQueryAccess().getAsteriskKeyword_1_0_1()); }

	'*' 

{ after(grammarAccess.getQueryAccess().getAsteriskKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getReturnTypeAssignment_1_1_0()); }
(rule__Query__ReturnTypeAssignment_1_1_0)
{ after(grammarAccess.getQueryAccess().getReturnTypeAssignment_1_1_0()); }
)

    |(
{ before(grammarAccess.getQueryAccess().getAsteriskKeyword_1_1_1()); }

	'*' 

{ after(grammarAccess.getQueryAccess().getAsteriskKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPattern__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterPatternAccess().getModifierAssignment_0_0()); }
(rule__ParameterPattern__ModifierAssignment_0_0)
{ after(grammarAccess.getParameterPatternAccess().getModifierAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getParameterPatternAccess().getAsteriskKeyword_0_1()); }

	'*' 

{ after(grammarAccess.getParameterPatternAccess().getAsteriskKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getSubPathNodeParserRuleCall_0_0()); }
	ruleSubPathNode
{ after(grammarAccess.getNodeAccess().getSubPathNodeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getWildcardNodeParserRuleCall_0_1()); }
	ruleWildcardNode
{ after(grammarAccess.getNodeAccess().getWildcardNodeParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getContainerNodeParserRuleCall_0_2()); }
	ruleContainerNode
{ after(grammarAccess.getNodeAccess().getContainerNodeParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); }
	ruleStringValue
{ after(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getIntValueParserRuleCall_1()); }
	ruleIntValue
{ after(grammarAccess.getValueAccess().getIntValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getFloatValueParserRuleCall_2()); }
	ruleFloatValue
{ after(grammarAccess.getValueAccess().getFloatValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getReferenceValueParserRuleCall_3()); }
	ruleReferenceValue
{ after(grammarAccess.getValueAccess().getReferenceValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getRuntimePropertyParserRuleCall_0()); }
	ruleRuntimeProperty
{ after(grammarAccess.getParameterAccess().getRuntimePropertyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getReflectionPropertyParserRuleCall_1()); }
	ruleReflectionProperty
{ after(grammarAccess.getParameterAccess().getReflectionPropertyParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReflectionFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReflectionFunctionAccess().getNAMEEnumLiteralDeclaration_0()); }
(	'name' 
)
{ after(grammarAccess.getReflectionFunctionAccess().getNAMEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getReflectionFunctionAccess().getSIGNATUREEnumLiteralDeclaration_1()); }
(	'signature' 
)
{ after(grammarAccess.getReflectionFunctionAccess().getSIGNATUREEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getReflectionFunctionAccess().getCLASSEnumLiteralDeclaration_2()); }
(	'class' 
)
{ after(grammarAccess.getReflectionFunctionAccess().getCLASSEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getReflectionFunctionAccess().getRETURN_TYPEEnumLiteralDeclaration_3()); }
(	'return-type' 
)
{ after(grammarAccess.getReflectionFunctionAccess().getRETURN_TYPEEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLIKEEnumLiteralDeclaration_1()); }
(	'~' 
)
{ after(grammarAccess.getOperatorAccess().getLIKEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNEEnumLiteralDeclaration_2()); }
(	'!=' 
)
{ after(grammarAccess.getOperatorAccess().getNEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGREnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getOperatorAccess().getGREnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLWEnumLiteralDeclaration_4()); }
(	'<' 
)
{ after(grammarAccess.getOperatorAccess().getLWEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGEEnumLiteralDeclaration_5()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorAccess().getGEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLEEnumLiteralDeclaration_6()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorAccess().getLEEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InsertionPoint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInsertionPointAccess().getBEFOREEnumLiteralDeclaration_0()); }
(	'before' 
)
{ after(grammarAccess.getInsertionPointAccess().getBEFOREEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getInsertionPointAccess().getAFTEREnumLiteralDeclaration_1()); }
(	'after' 
)
{ after(grammarAccess.getInsertionPointAccess().getAFTEREnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getModelAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
(rule__Model__NameAssignment_1)
{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMetamodelsAssignment_2()); }
(rule__Model__MetamodelsAssignment_2)*
{ after(grammarAccess.getModelAccess().getMetamodelsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_3()); }
(rule__Model__ImportsAssignment_3)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSourcesAssignment_4()); }
(rule__Model__SourcesAssignment_4)*
{ after(grammarAccess.getModelAccess().getSourcesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAspectsAssignment_5()); }
(rule__Model__AspectsAssignment_5)*
{ after(grammarAccess.getModelAccess().getAspectsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RegisteredPackage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredPackage__Group__0__Impl
	rule__RegisteredPackage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredPackage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredPackageAccess().getRegisterKeyword_0()); }

	'register' 

{ after(grammarAccess.getRegisteredPackageAccess().getRegisterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegisteredPackage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredPackage__Group__1__Impl
	rule__RegisteredPackage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredPackage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredPackageAccess().getNameAssignment_1()); }
(rule__RegisteredPackage__NameAssignment_1)
{ after(grammarAccess.getRegisteredPackageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegisteredPackage__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredPackage__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredPackage__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredPackageAccess().getEPackageAssignment_2()); }
(rule__RegisteredPackage__EPackageAssignment_2)
{ after(grammarAccess.getRegisteredPackageAccess().getEPackageAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ApplicationModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group__0__Impl
	rule__ApplicationModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getUseKeyword_0()); }

	'use' 

{ after(grammarAccess.getApplicationModelAccess().getUseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplicationModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group__1__Impl
	rule__ApplicationModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getUsePackagesAssignment_1()); }
(rule__ApplicationModel__UsePackagesAssignment_1)
{ after(grammarAccess.getApplicationModelAccess().getUsePackagesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplicationModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group__2__Impl
	rule__ApplicationModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getGroup_2()); }
(rule__ApplicationModel__Group_2__0)*
{ after(grammarAccess.getApplicationModelAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplicationModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group__3__Impl
	rule__ApplicationModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getOnKeyword_3()); }

	'on' 

{ after(grammarAccess.getApplicationModelAccess().getOnKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplicationModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group__4__Impl
	rule__ApplicationModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getNameAssignment_4()); }
(rule__ApplicationModel__NameAssignment_4)
{ after(grammarAccess.getApplicationModelAccess().getNameAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplicationModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getModelAssignment_5()); }
(rule__ApplicationModel__ModelAssignment_5)
{ after(grammarAccess.getApplicationModelAccess().getModelAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ApplicationModel__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group_2__0__Impl
	rule__ApplicationModel__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getApplicationModelAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplicationModel__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplicationModel__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getUsePackagesAssignment_2_1()); }
(rule__ApplicationModel__UsePackagesAssignment_2_1)
{ after(grammarAccess.getApplicationModelAccess().getUsePackagesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
(
	'.' 
)
{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
(rule__QualifiedNameWithWildcard__Group_1__0)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__0__Impl
	rule__QualifiedNameWithWildcard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Aspect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aspect__Group__0__Impl
	rule__Aspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectAccess().getAspectKeyword_0()); }

	'aspect' 

{ after(grammarAccess.getAspectAccess().getAspectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aspect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aspect__Group__1__Impl
	rule__Aspect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectAccess().getQueryAssignment_1()); }
(rule__Aspect__QueryAssignment_1)
{ after(grammarAccess.getAspectAccess().getQueryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aspect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aspect__Group__2__Impl
	rule__Aspect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAspectAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aspect__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aspect__Group__3__Impl
	rule__Aspect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectAccess().getCollectorsAssignment_3()); }
(rule__Aspect__CollectorsAssignment_3)
{ after(grammarAccess.getAspectAccess().getCollectorsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aspect__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aspect__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAspectAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Query__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getLocationAssignment_0()); }
(rule__Query__LocationAssignment_0)
{ after(grammarAccess.getQueryAccess().getLocationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getGroup_1()); }
(rule__Query__Group_1__0)?
{ after(grammarAccess.getQueryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Query__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1__0__Impl
	rule__Query__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getAlternatives_1_0()); }
(rule__Query__Alternatives_1_0)
{ after(grammarAccess.getQueryAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1__1__Impl
	rule__Query__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getAlternatives_1_1()); }
(rule__Query__Alternatives_1_1)
{ after(grammarAccess.getQueryAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1__2__Impl
	rule__Query__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getMethodAssignment_1_2()); }
(rule__Query__MethodAssignment_1_2)
{ after(grammarAccess.getQueryAccess().getMethodAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1__3__Impl
	rule__Query__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getLeftParenthesisKeyword_1_3()); }

	'(' 

{ after(grammarAccess.getQueryAccess().getLeftParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1__4__Impl
	rule__Query__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getParameterAssignment_1_4()); }
(rule__Query__ParameterAssignment_1_4)
{ after(grammarAccess.getQueryAccess().getParameterAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1__5__Impl
	rule__Query__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getGroup_1_5()); }
(rule__Query__Group_1_5__0)*
{ after(grammarAccess.getQueryAccess().getGroup_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getRightParenthesisKeyword_1_6()); }

	')' 

{ after(grammarAccess.getQueryAccess().getRightParenthesisKeyword_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Query__Group_1_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1_5__0__Impl
	rule__Query__Group_1_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getCommaKeyword_1_5_0()); }

	',' 

{ after(grammarAccess.getQueryAccess().getCommaKeyword_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_1_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_1_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_1_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getParameterAssignment_1_5_1()); }
(rule__Query__ParameterAssignment_1_5_1)
{ after(grammarAccess.getQueryAccess().getParameterAssignment_1_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterPattern__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterPattern__Group__0__Impl
	rule__ParameterPattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPattern__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterPatternAccess().getAlternatives_0()); }
(rule__ParameterPattern__Alternatives_0)
{ after(grammarAccess.getParameterPatternAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterPattern__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterPattern__Group__1__Impl
	rule__ParameterPattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPattern__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterPatternAccess().getTypeAssignment_1()); }
(rule__ParameterPattern__TypeAssignment_1)
{ after(grammarAccess.getParameterPatternAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterPattern__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterPattern__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPattern__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterPatternAccess().getParameterAssignment_2()); }
(rule__ParameterPattern__ParameterAssignment_2)
{ after(grammarAccess.getParameterPatternAccess().getParameterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocationQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationQuery__Group__0__Impl
	rule__LocationQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationQueryAccess().getNodeAssignment_0()); }
(rule__LocationQuery__NodeAssignment_0)
{ after(grammarAccess.getLocationQueryAccess().getNodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationQueryAccess().getGroup_1()); }
(rule__LocationQuery__Group_1__0)?
{ after(grammarAccess.getLocationQueryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocationQuery__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationQuery__Group_1__0__Impl
	rule__LocationQuery__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationQuery__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationQueryAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getLocationQueryAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationQuery__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationQuery__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationQuery__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationQueryAccess().getSpecializationAssignment_1_1()); }
(rule__LocationQuery__SpecializationAssignment_1_1)
{ after(grammarAccess.getLocationQueryAccess().getSpecializationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getAlternatives_0()); }
(rule__Node__Alternatives_0)
{ after(grammarAccess.getNodeAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getParameterAssignment_1()); }
(rule__Node__ParameterAssignment_1)?
{ after(grammarAccess.getNodeAccess().getParameterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParamQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamQuery__Group__0__Impl
	rule__ParamQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamQueryAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getParamQueryAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamQuery__Group__1__Impl
	rule__ParamQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getParamQueryAccess().getQueriesAssignment_1()); }
(rule__ParamQuery__QueriesAssignment_1)
{ after(grammarAccess.getParamQueryAccess().getQueriesAssignment_1()); }
)
(
{ before(grammarAccess.getParamQueryAccess().getQueriesAssignment_1()); }
(rule__ParamQuery__QueriesAssignment_1)*
{ after(grammarAccess.getParamQueryAccess().getQueriesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamQuery__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamQuery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamQuery__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamQueryAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getParamQueryAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParamCompare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamCompare__Group__0__Impl
	rule__ParamCompare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCompare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamCompareAccess().getLeftAssignment_0()); }
(rule__ParamCompare__LeftAssignment_0)
{ after(grammarAccess.getParamCompareAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamCompare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamCompare__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCompare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamCompareAccess().getGroup_1()); }
(rule__ParamCompare__Group_1__0)
{ after(grammarAccess.getParamCompareAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParamCompare__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamCompare__Group_1__0__Impl
	rule__ParamCompare__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCompare__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamCompareAccess().getOperatorAssignment_1_0()); }
(rule__ParamCompare__OperatorAssignment_1_0)
{ after(grammarAccess.getParamCompareAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamCompare__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamCompare__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCompare__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamCompareAccess().getRightAssignment_1_1()); }
(rule__ParamCompare__RightAssignment_1_1)
{ after(grammarAccess.getParamCompareAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReferenceValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceValue__Group__0__Impl
	rule__ReferenceValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceValueAccess().getQueryAssignment_0()); }
(rule__ReferenceValue__QueryAssignment_0)
{ after(grammarAccess.getReferenceValueAccess().getQueryAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceValueAccess().getParameterAssignment_1()); }
(rule__ReferenceValue__ParameterAssignment_1)
{ after(grammarAccess.getReferenceValueAccess().getParameterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuntimeProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuntimeProperty__Group__0__Impl
	rule__RuntimeProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuntimeProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuntimePropertyAccess().getNumberSignKeyword_0()); }

	'#' 

{ after(grammarAccess.getRuntimePropertyAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuntimeProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuntimeProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuntimeProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuntimePropertyAccess().getReferenceAssignment_1()); }
(rule__RuntimeProperty__ReferenceAssignment_1)
{ after(grammarAccess.getRuntimePropertyAccess().getReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReflectionProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReflectionProperty__Group__0__Impl
	rule__ReflectionProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReflectionProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReflectionPropertyAccess().getDollarSignKeyword_0()); }

	'$' 

{ after(grammarAccess.getReflectionPropertyAccess().getDollarSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReflectionProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReflectionProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReflectionProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReflectionPropertyAccess().getFunctionAssignment_1()); }
(rule__ReflectionProperty__FunctionAssignment_1)
{ after(grammarAccess.getReflectionPropertyAccess().getFunctionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WildcardNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WildcardNode__Group__0__Impl
	rule__WildcardNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardNodeAccess().getWildcardNodeAction_0()); }
(

)
{ after(grammarAccess.getWildcardNodeAccess().getWildcardNodeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WildcardNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WildcardNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardNodeAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getWildcardNodeAccess().getAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubPathNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubPathNode__Group__0__Impl
	rule__SubPathNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubPathNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubPathNodeAccess().getSubPathNodeAction_0()); }
(

)
{ after(grammarAccess.getSubPathNodeAccess().getSubPathNodeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubPathNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubPathNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubPathNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubPathNodeAccess().getAsteriskAsteriskKeyword_1()); }

	'**' 

{ after(grammarAccess.getSubPathNodeAccess().getAsteriskAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Collector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group__0__Impl
	rule__Collector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getInsertionPointAssignment_0()); }
(rule__Collector__InsertionPointAssignment_0)
{ after(grammarAccess.getCollectorAccess().getInsertionPointAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group__1__Impl
	rule__Collector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getTypeAssignment_1()); }
(rule__Collector__TypeAssignment_1)
{ after(grammarAccess.getCollectorAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collector__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group__2__Impl
	rule__Collector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getCollectorAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collector__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group__3__Impl
	rule__Collector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getGroup_3()); }
(rule__Collector__Group_3__0)?
{ after(grammarAccess.getCollectorAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collector__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCollectorAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Collector__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group_3__0__Impl
	rule__Collector__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getInitializationsAssignment_3_0()); }
(rule__Collector__InitializationsAssignment_3_0)
{ after(grammarAccess.getCollectorAccess().getInitializationsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collector__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getGroup_3_1()); }
(rule__Collector__Group_3_1__0)*
{ after(grammarAccess.getCollectorAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Collector__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group_3_1__0__Impl
	rule__Collector__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getCollectorAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collector__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collector__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getInitializationsAssignment_3_1_1()); }
(rule__Collector__InitializationsAssignment_3_1_1)
{ after(grammarAccess.getCollectorAccess().getInitializationsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__MetamodelsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMetamodelsRegisteredPackageParserRuleCall_2_0()); }
	ruleRegisteredPackage{ after(grammarAccess.getModelAccess().getMetamodelsRegisteredPackageParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ImportsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SourcesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSourcesApplicationModelParserRuleCall_4_0()); }
	ruleApplicationModel{ after(grammarAccess.getModelAccess().getSourcesApplicationModelParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__AspectsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAspectsAspectParserRuleCall_5_0()); }
	ruleAspect{ after(grammarAccess.getModelAccess().getAspectsAspectParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredPackage__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredPackageAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRegisteredPackageAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredPackage__EPackageAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredPackageAccess().getEPackageEPackageCrossReference_2_0()); }
(
{ before(grammarAccess.getRegisteredPackageAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1()); }
	RULE_STRING{ after(grammarAccess.getRegisteredPackageAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getRegisteredPackageAccess().getEPackageEPackageCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__UsePackagesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageCrossReference_1_0()); }
(
{ before(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__UsePackagesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageCrossReference_2_1_0()); }
(
{ before(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getApplicationModelAccess().getUsePackagesRegisteredPackageCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getNameIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getApplicationModelAccess().getNameIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplicationModel__ModelAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationModelAccess().getModelSTRINGTerminalRuleCall_5_0()); }
	RULE_STRING{ after(grammarAccess.getApplicationModelAccess().getModelSTRINGTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__QueryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectAccess().getQueryQueryParserRuleCall_1_0()); }
	ruleQuery{ after(grammarAccess.getAspectAccess().getQueryQueryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__CollectorsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectAccess().getCollectorsCollectorParserRuleCall_3_0()); }
	ruleCollector{ after(grammarAccess.getAspectAccess().getCollectorsCollectorParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__LocationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getLocationLocationQueryParserRuleCall_0_0()); }
	ruleLocationQuery{ after(grammarAccess.getQueryAccess().getLocationLocationQueryParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ModifierAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getModifierMethodModifierCrossReference_1_0_0_0()); }
(
{ before(grammarAccess.getQueryAccess().getModifierMethodModifierIDTerminalRuleCall_1_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getQueryAccess().getModifierMethodModifierIDTerminalRuleCall_1_0_0_0_1()); }
)
{ after(grammarAccess.getQueryAccess().getModifierMethodModifierCrossReference_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ReturnTypeAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getReturnTypeTypeCrossReference_1_1_0_0()); }
(
{ before(grammarAccess.getQueryAccess().getReturnTypeTypeIDTerminalRuleCall_1_1_0_0_1()); }
	RULE_ID{ after(grammarAccess.getQueryAccess().getReturnTypeTypeIDTerminalRuleCall_1_1_0_0_1()); }
)
{ after(grammarAccess.getQueryAccess().getReturnTypeTypeCrossReference_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__MethodAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getMethodMethodCrossReference_1_2_0()); }
(
{ before(grammarAccess.getQueryAccess().getMethodMethodIDTerminalRuleCall_1_2_0_1()); }
	RULE_ID{ after(grammarAccess.getQueryAccess().getMethodMethodIDTerminalRuleCall_1_2_0_1()); }
)
{ after(grammarAccess.getQueryAccess().getMethodMethodCrossReference_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ParameterAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getParameterParameterPatternParserRuleCall_1_4_0()); }
	ruleParameterPattern{ after(grammarAccess.getQueryAccess().getParameterParameterPatternParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ParameterAssignment_1_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getParameterParameterPatternParserRuleCall_1_5_1_0()); }
	ruleParameterPattern{ after(grammarAccess.getQueryAccess().getParameterParameterPatternParserRuleCall_1_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPattern__ModifierAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterPatternAccess().getModifierParameterModifierCrossReference_0_0_0()); }
(
{ before(grammarAccess.getParameterPatternAccess().getModifierParameterModifierIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getParameterPatternAccess().getModifierParameterModifierIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getParameterPatternAccess().getModifierParameterModifierCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPattern__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterPatternAccess().getTypeTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getParameterPatternAccess().getTypeTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getParameterPatternAccess().getTypeTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getParameterPatternAccess().getTypeTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPattern__ParameterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterPatternAccess().getParameterParameterCrossReference_2_0()); }
(
{ before(grammarAccess.getParameterPatternAccess().getParameterParameterIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getParameterPatternAccess().getParameterParameterIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getParameterPatternAccess().getParameterParameterCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationQuery__NodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationQueryAccess().getNodeNodeParserRuleCall_0_0()); }
	ruleNode{ after(grammarAccess.getLocationQueryAccess().getNodeNodeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationQuery__SpecializationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationQueryAccess().getSpecializationLocationQueryParserRuleCall_1_1_0()); }
	ruleLocationQuery{ after(grammarAccess.getLocationQueryAccess().getSpecializationLocationQueryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__ParameterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getParameterParamQueryParserRuleCall_1_0()); }
	ruleParamQuery{ after(grammarAccess.getNodeAccess().getParameterParamQueryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamQuery__QueriesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamQueryAccess().getQueriesParamCompareParserRuleCall_1_0()); }
	ruleParamCompare{ after(grammarAccess.getParamQueryAccess().getQueriesParamCompareParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCompare__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamCompareAccess().getLeftValueParserRuleCall_0_0()); }
	ruleValue{ after(grammarAccess.getParamCompareAccess().getLeftValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCompare__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamCompareAccess().getOperatorOperatorEnumRuleCall_1_0_0()); }
	ruleOperator{ after(grammarAccess.getParamCompareAccess().getOperatorOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCompare__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamCompareAccess().getRightValueParserRuleCall_1_1_0()); }
	ruleValue{ after(grammarAccess.getParamCompareAccess().getRightValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getFloatValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceValue__QueryAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceValueAccess().getQueryLocationQueryParserRuleCall_0_0()); }
	ruleLocationQuery{ after(grammarAccess.getReferenceValueAccess().getQueryLocationQueryParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceValue__ParameterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceValueAccess().getParameterParameterParserRuleCall_1_0()); }
	ruleParameter{ after(grammarAccess.getReferenceValueAccess().getParameterParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuntimeProperty__ReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuntimePropertyAccess().getReferenceIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRuntimePropertyAccess().getReferenceIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReflectionProperty__FunctionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReflectionPropertyAccess().getFunctionReflectionFunctionEnumRuleCall_1_0()); }
	ruleReflectionFunction{ after(grammarAccess.getReflectionPropertyAccess().getFunctionReflectionFunctionEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerNode__ContainerAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerNodeAccess().getContainerContainerCrossReference_0()); }
(
{ before(grammarAccess.getContainerNodeAccess().getContainerContainerIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getContainerNodeAccess().getContainerContainerIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getContainerNodeAccess().getContainerContainerCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__InsertionPointAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getInsertionPointInsertionPointEnumRuleCall_0_0()); }
	ruleInsertionPoint{ after(grammarAccess.getCollectorAccess().getInsertionPointInsertionPointEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getTypeRecordTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getCollectorAccess().getTypeRecordTypeQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getCollectorAccess().getTypeRecordTypeQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getCollectorAccess().getTypeRecordTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__InitializationsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getInitializationsValueParserRuleCall_3_0_0()); }
	ruleValue{ after(grammarAccess.getCollectorAccess().getInitializationsValueParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Collector__InitializationsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectorAccess().getInitializationsValueParserRuleCall_3_1_1_0()); }
	ruleValue{ after(grammarAccess.getCollectorAccess().getInitializationsValueParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


