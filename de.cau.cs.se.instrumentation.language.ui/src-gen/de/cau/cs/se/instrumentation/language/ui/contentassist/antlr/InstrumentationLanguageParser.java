/*
* generated by Xtext
*/
package de.cau.cs.se.instrumentation.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.se.instrumentation.language.services.InstrumentationLanguageGrammarAccess;

public class InstrumentationLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private InstrumentationLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.se.instrumentation.language.ui.contentassist.antlr.internal.InternalInstrumentationLanguageParser createParser() {
		de.cau.cs.se.instrumentation.language.ui.contentassist.antlr.internal.InternalInstrumentationLanguageParser result = new de.cau.cs.se.instrumentation.language.ui.contentassist.antlr.internal.InternalInstrumentationLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSimpleCodeElementAccess().getAlternatives(), "rule__SimpleCodeElement__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
					put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
					put(grammarAccess.getPatternAccess().getGroup_2(), "rule__Pattern__Group_2__0");
					put(grammarAccess.getPatternAccess().getGroup_2_2(), "rule__Pattern__Group_2_2__0");
					put(grammarAccess.getCodeElementAccess().getGroup(), "rule__CodeElement__Group__0");
					put(grammarAccess.getProbeAccess().getGroup(), "rule__Probe__Group__0");
					put(grammarAccess.getProbeAccess().getGroup_2(), "rule__Probe__Group_2__0");
					put(grammarAccess.getClassifierAccess().getGroup(), "rule__Classifier__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_2(), "rule__Property__Group_2__0");
					put(grammarAccess.getReferencePropertyAccess().getGroup(), "rule__ReferenceProperty__Group__0");
					put(grammarAccess.getReferencePropertyAccess().getGroup_1(), "rule__ReferenceProperty__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getPackagesAssignment_2(), "rule__Model__PackagesAssignment_2");
					put(grammarAccess.getModelAccess().getImportsAssignment_3(), "rule__Model__ImportsAssignment_3");
					put(grammarAccess.getModelAccess().getPatternsAssignment_4(), "rule__Model__PatternsAssignment_4");
					put(grammarAccess.getModelAccess().getProbesAssignment_5(), "rule__Model__ProbesAssignment_5");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
					put(grammarAccess.getPackageAccess().getPackageAssignment_2(), "rule__Package__PackageAssignment_2");
					put(grammarAccess.getPatternAccess().getNameAssignment_1(), "rule__Pattern__NameAssignment_1");
					put(grammarAccess.getPatternAccess().getParametersAssignment_2_1(), "rule__Pattern__ParametersAssignment_2_1");
					put(grammarAccess.getPatternAccess().getParametersAssignment_2_2_1(), "rule__Pattern__ParametersAssignment_2_2_1");
					put(grammarAccess.getPatternAccess().getCodeSequceneAssignment_3(), "rule__Pattern__CodeSequceneAssignment_3");
					put(grammarAccess.getParameterAccess().getNameAssignment(), "rule__Parameter__NameAssignment");
					put(grammarAccess.getCodeElementAccess().getToUpperAssignment_0(), "rule__CodeElement__ToUpperAssignment_0");
					put(grammarAccess.getCodeElementAccess().getValueAssignment_1(), "rule__CodeElement__ValueAssignment_1");
					put(grammarAccess.getParameterRefAccess().getRefAssignment(), "rule__ParameterRef__RefAssignment");
					put(grammarAccess.getXStringLiteralAccess().getValueAssignment(), "rule__XStringLiteral__ValueAssignment");
					put(grammarAccess.getProbeAccess().getNameAssignment_1(), "rule__Probe__NameAssignment_1");
					put(grammarAccess.getProbeAccess().getTypeAssignment_2_1(), "rule__Probe__TypeAssignment_2_1");
					put(grammarAccess.getProbeAccess().getPropertiesAssignment_4(), "rule__Probe__PropertiesAssignment_4");
					put(grammarAccess.getClassifierAccess().getPackageAssignment_0(), "rule__Classifier__PackageAssignment_0");
					put(grammarAccess.getClassifierAccess().getClassAssignment_2(), "rule__Classifier__ClassAssignment_2");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_0(), "rule__Property__TypeAssignment_0");
					put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
					put(grammarAccess.getPropertyAccess().getPropertiesAssignment_2_1(), "rule__Property__PropertiesAssignment_2_1");
					put(grammarAccess.getReferencePropertyAccess().getRefAssignment_0(), "rule__ReferenceProperty__RefAssignment_0");
					put(grammarAccess.getReferencePropertyAccess().getPropertiesAssignment_1_1(), "rule__ReferenceProperty__PropertiesAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.se.instrumentation.language.ui.contentassist.antlr.internal.InternalInstrumentationLanguageParser typedParser = (de.cau.cs.se.instrumentation.language.ui.contentassist.antlr.internal.InternalInstrumentationLanguageParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public InstrumentationLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(InstrumentationLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
