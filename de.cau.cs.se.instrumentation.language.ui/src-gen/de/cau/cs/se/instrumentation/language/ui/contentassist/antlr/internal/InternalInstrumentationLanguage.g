/*
* generated by Xtext
*/
grammar InternalInstrumentationLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.se.instrumentation.language.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.se.instrumentation.language.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.se.instrumentation.language.services.InstrumentationLanguageGrammarAccess;

}

@parser::members {
 
 	private InstrumentationLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(InstrumentationLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage
entryRulePackage 
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageAccess().getGroup()); }
(rule__Package__Group__0)
{ after(grammarAccess.getPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePattern
entryRulePattern 
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPatternAccess().getGroup()); }
(rule__Pattern__Group__0)
{ after(grammarAccess.getPatternAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment()); }
(rule__Parameter__NameAssignment)
{ after(grammarAccess.getParameterAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCodeElement
entryRuleCodeElement 
:
{ before(grammarAccess.getCodeElementRule()); }
	 ruleCodeElement
{ after(grammarAccess.getCodeElementRule()); } 
	 EOF 
;

// Rule CodeElement
ruleCodeElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCodeElementAccess().getGroup()); }
(rule__CodeElement__Group__0)
{ after(grammarAccess.getCodeElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleCodeElement
entryRuleSimpleCodeElement 
:
{ before(grammarAccess.getSimpleCodeElementRule()); }
	 ruleSimpleCodeElement
{ after(grammarAccess.getSimpleCodeElementRule()); } 
	 EOF 
;

// Rule SimpleCodeElement
ruleSimpleCodeElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleCodeElementAccess().getAlternatives()); }
(rule__SimpleCodeElement__Alternatives)
{ after(grammarAccess.getSimpleCodeElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterRef
entryRuleParameterRef 
:
{ before(grammarAccess.getParameterRefRule()); }
	 ruleParameterRef
{ after(grammarAccess.getParameterRefRule()); } 
	 EOF 
;

// Rule ParameterRef
ruleParameterRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterRefAccess().getRefAssignment()); }
(rule__ParameterRef__RefAssignment)
{ after(grammarAccess.getParameterRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXStringLiteral
entryRuleXStringLiteral 
:
{ before(grammarAccess.getXStringLiteralRule()); }
	 ruleXStringLiteral
{ after(grammarAccess.getXStringLiteralRule()); } 
	 EOF 
;

// Rule XStringLiteral
ruleXStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXStringLiteralAccess().getValueAssignment()); }
(rule__XStringLiteral__ValueAssignment)
{ after(grammarAccess.getXStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProbe
entryRuleProbe 
:
{ before(grammarAccess.getProbeRule()); }
	 ruleProbe
{ after(grammarAccess.getProbeRule()); } 
	 EOF 
;

// Rule Probe
ruleProbe
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProbeAccess().getGroup()); }
(rule__Probe__Group__0)
{ after(grammarAccess.getProbeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassifier
entryRuleClassifier 
:
{ before(grammarAccess.getClassifierRule()); }
	 ruleClassifier
{ after(grammarAccess.getClassifierRule()); } 
	 EOF 
;

// Rule Classifier
ruleClassifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassifierAccess().getGroup()); }
(rule__Classifier__Group__0)
{ after(grammarAccess.getClassifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperty
entryRuleProperty 
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccess().getGroup()); }
(rule__Property__Group__0)
{ after(grammarAccess.getPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReferenceProperty
entryRuleReferenceProperty 
:
{ before(grammarAccess.getReferencePropertyRule()); }
	 ruleReferenceProperty
{ after(grammarAccess.getReferencePropertyRule()); } 
	 EOF 
;

// Rule ReferenceProperty
ruleReferenceProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferencePropertyAccess().getGroup()); }
(rule__ReferenceProperty__Group__0)
{ after(grammarAccess.getReferencePropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SimpleCodeElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleCodeElementAccess().getXStringLiteralParserRuleCall_0()); }
	ruleXStringLiteral
{ after(grammarAccess.getSimpleCodeElementAccess().getXStringLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSimpleCodeElementAccess().getParameterRefParserRuleCall_1()); }
	ruleParameterRef
{ after(grammarAccess.getSimpleCodeElementAccess().getParameterRefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getModelAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
(rule__Model__NameAssignment_1)
{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackagesAssignment_2()); }
(rule__Model__PackagesAssignment_2)*
{ after(grammarAccess.getModelAccess().getPackagesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_3()); }
(rule__Model__ImportsAssignment_3)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPatternsAssignment_4()); }
(rule__Model__PatternsAssignment_4)*
{ after(grammarAccess.getModelAccess().getPatternsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProbesAssignment_5()); }
(rule__Model__ProbesAssignment_5)*
{ after(grammarAccess.getModelAccess().getProbesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Package__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getUseKeyword_0()); }

	'use' 

{ after(grammarAccess.getPackageAccess().getUseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__1__Impl
	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameAssignment_1()); }
(rule__Package__NameAssignment_1)
{ after(grammarAccess.getPackageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPackageAssignment_2()); }
(rule__Package__PackageAssignment_2)
{ after(grammarAccess.getPackageAccess().getPackageAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
(
	'.' 
)
{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
(rule__QualifiedNameWithWildcard__Group_1__0)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__0__Impl
	rule__QualifiedNameWithWildcard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Pattern__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getPatternKeyword_0()); }

	'pattern' 

{ after(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group__1__Impl
	rule__Pattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getNameAssignment_1()); }
(rule__Pattern__NameAssignment_1)
{ after(grammarAccess.getPatternAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group__2__Impl
	rule__Pattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getGroup_2()); }
(rule__Pattern__Group_2__0)?
{ after(grammarAccess.getPatternAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getCodeSequceneAssignment_3()); }
(rule__Pattern__CodeSequceneAssignment_3)*
{ after(grammarAccess.getPatternAccess().getCodeSequceneAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Pattern__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group_2__0__Impl
	rule__Pattern__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group_2__1__Impl
	rule__Pattern__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_1()); }
(rule__Pattern__ParametersAssignment_2_1)
{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group_2__2__Impl
	rule__Pattern__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getGroup_2_2()); }
(rule__Pattern__Group_2_2__0)*
{ after(grammarAccess.getPatternAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Pattern__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group_2_2__0__Impl
	rule__Pattern__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getPatternAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pattern__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_2_1()); }
(rule__Pattern__ParametersAssignment_2_2_1)
{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CodeElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CodeElement__Group__0__Impl
	rule__CodeElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeElementAccess().getToUpperAssignment_0()); }
(rule__CodeElement__ToUpperAssignment_0)?
{ after(grammarAccess.getCodeElementAccess().getToUpperAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CodeElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CodeElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeElementAccess().getValueAssignment_1()); }
(rule__CodeElement__ValueAssignment_1)
{ after(grammarAccess.getCodeElementAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Probe__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probe__Group__0__Impl
	rule__Probe__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getProbeKeyword_0()); }

	'probe' 

{ after(grammarAccess.getProbeAccess().getProbeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probe__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probe__Group__1__Impl
	rule__Probe__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getNameAssignment_1()); }
(rule__Probe__NameAssignment_1)
{ after(grammarAccess.getProbeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probe__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probe__Group__2__Impl
	rule__Probe__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getProbeAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probe__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probe__Group__3__Impl
	rule__Probe__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getTypeAssignment_3()); }
(rule__Probe__TypeAssignment_3)
{ after(grammarAccess.getProbeAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probe__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probe__Group__4__Impl
	rule__Probe__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getProbeAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probe__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probe__Group__5__Impl
	rule__Probe__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getPropertiesAssignment_5()); }
(rule__Probe__PropertiesAssignment_5)*
{ after(grammarAccess.getProbeAccess().getPropertiesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Probe__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Probe__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getProbeAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Classifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__0__Impl
	rule__Classifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getPackageAssignment_0()); }
(rule__Classifier__PackageAssignment_0)
{ after(grammarAccess.getClassifierAccess().getPackageAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__1__Impl
	rule__Classifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getClassifierAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getClassAssignment_2()); }
(rule__Classifier__ClassAssignment_2)
{ after(grammarAccess.getClassifierAccess().getClassAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Property__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getTypeAssignment_0()); }
(rule__Property__TypeAssignment_0)
{ after(grammarAccess.getPropertyAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
(rule__Property__NameAssignment_1)
{ after(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getGroup_2()); }
(rule__Property__Group_2__0)?
{ after(grammarAccess.getPropertyAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Property__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group_2__0__Impl
	rule__Property__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getLeftCurlyBracketKeyword_2_0()); }

	'{' 

{ after(grammarAccess.getPropertyAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group_2__1__Impl
	rule__Property__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getPropertiesAssignment_2_1()); }
(rule__Property__PropertiesAssignment_2_1)*
{ after(grammarAccess.getPropertyAccess().getPropertiesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getRightCurlyBracketKeyword_2_2()); }

	'}' 

{ after(grammarAccess.getPropertyAccess().getRightCurlyBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReferenceProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceProperty__Group__0__Impl
	rule__ReferenceProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferencePropertyAccess().getRefAssignment_0()); }
(rule__ReferenceProperty__RefAssignment_0)
{ after(grammarAccess.getReferencePropertyAccess().getRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferencePropertyAccess().getGroup_1()); }
(rule__ReferenceProperty__Group_1__0)?
{ after(grammarAccess.getReferencePropertyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReferenceProperty__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceProperty__Group_1__0__Impl
	rule__ReferenceProperty__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceProperty__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferencePropertyAccess().getLeftCurlyBracketKeyword_1_0()); }

	'{' 

{ after(grammarAccess.getReferencePropertyAccess().getLeftCurlyBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceProperty__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceProperty__Group_1__1__Impl
	rule__ReferenceProperty__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceProperty__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferencePropertyAccess().getPropertiesAssignment_1_1()); }
(rule__ReferenceProperty__PropertiesAssignment_1_1)*
{ after(grammarAccess.getReferencePropertyAccess().getPropertiesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceProperty__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceProperty__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceProperty__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferencePropertyAccess().getRightCurlyBracketKeyword_1_2()); }

	'}' 

{ after(grammarAccess.getReferencePropertyAccess().getRightCurlyBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PackagesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackagesPackageParserRuleCall_2_0()); }
	rulePackage{ after(grammarAccess.getModelAccess().getPackagesPackageParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ImportsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PatternsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPatternsPatternParserRuleCall_4_0()); }
	rulePattern{ after(grammarAccess.getModelAccess().getPatternsPatternParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ProbesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProbesProbeParserRuleCall_5_0()); }
	ruleProbe{ after(grammarAccess.getModelAccess().getProbesProbeParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__PackageAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPackageEPackageCrossReference_2_0()); }
(
{ before(grammarAccess.getPackageAccess().getPackageEPackageSTRINGTerminalRuleCall_2_0_1()); }
	RULE_STRING{ after(grammarAccess.getPackageAccess().getPackageEPackageSTRINGTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getPackageAccess().getPackageEPackageCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0()); }
	ruleParameter{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_2_1_0()); }
	ruleParameter{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__CodeSequceneAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getCodeSequceneCodeElementParserRuleCall_3_0()); }
	ruleCodeElement{ after(grammarAccess.getPatternAccess().getCodeSequceneCodeElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CodeElement__ToUpperAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeElementAccess().getToUpperNumberSignKeyword_0_0()); }
(
{ before(grammarAccess.getCodeElementAccess().getToUpperNumberSignKeyword_0_0()); }

	'#' 

{ after(grammarAccess.getCodeElementAccess().getToUpperNumberSignKeyword_0_0()); }
)

{ after(grammarAccess.getCodeElementAccess().getToUpperNumberSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CodeElement__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeElementAccess().getValueSimpleCodeElementParserRuleCall_1_0()); }
	ruleSimpleCodeElement{ after(grammarAccess.getCodeElementAccess().getValueSimpleCodeElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterRefAccess().getRefParameterCrossReference_0()); }
(
{ before(grammarAccess.getParameterRefAccess().getRefParameterIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getParameterRefAccess().getRefParameterIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getParameterRefAccess().getRefParameterCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XStringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getXStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProbeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getTypeClassifierParserRuleCall_3_0()); }
	ruleClassifier{ after(grammarAccess.getProbeAccess().getTypeClassifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Probe__PropertiesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbeAccess().getPropertiesPropertyParserRuleCall_5_0()); }
	ruleProperty{ after(grammarAccess.getProbeAccess().getPropertiesPropertyParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__PackageAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getPackagePackageCrossReference_0_0()); }
(
{ before(grammarAccess.getClassifierAccess().getPackagePackageIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getClassifierAccess().getPackagePackageIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getClassifierAccess().getPackagePackageCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__ClassAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getClassEClassifierCrossReference_2_0()); }
(
{ before(grammarAccess.getClassifierAccess().getClassEClassifierIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getClassifierAccess().getClassEClassifierIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getClassifierAccess().getClassEClassifierCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getTypeClassifierParserRuleCall_0_0()); }
	ruleClassifier{ after(grammarAccess.getPropertyAccess().getTypeClassifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__PropertiesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getPropertiesReferencePropertyParserRuleCall_2_1_0()); }
	ruleReferenceProperty{ after(grammarAccess.getPropertyAccess().getPropertiesReferencePropertyParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceProperty__RefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferencePropertyAccess().getRefEStructuralFeatureCrossReference_0_0()); }
(
{ before(grammarAccess.getReferencePropertyAccess().getRefEStructuralFeatureIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getReferencePropertyAccess().getRefEStructuralFeatureIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getReferencePropertyAccess().getRefEStructuralFeatureCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceProperty__PropertiesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferencePropertyAccess().getPropertiesReferencePropertyParserRuleCall_1_1_0()); }
	ruleReferenceProperty{ after(grammarAccess.getReferencePropertyAccess().getPropertiesReferencePropertyParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


