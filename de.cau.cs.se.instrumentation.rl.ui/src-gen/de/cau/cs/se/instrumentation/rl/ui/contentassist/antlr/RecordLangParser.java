/*
* generated by Xtext
*/
package de.cau.cs.se.instrumentation.rl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.se.instrumentation.rl.services.RecordLangGrammarAccess;

public class RecordLangParser extends AbstractContentAssistParser {
	
	@Inject
	private RecordLangGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.se.instrumentation.rl.ui.contentassist.antlr.internal.InternalRecordLangParser createParser() {
		de.cau.cs.se.instrumentation.rl.ui.contentassist.antlr.internal.InternalRecordLangParser result = new de.cau.cs.se.instrumentation.rl.ui.contentassist.antlr.internal.InternalRecordLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTemplateTypeAccess().getAlternatives_5_1(), "rule__TemplateType__Alternatives_5_1");
					put(grammarAccess.getRecordTypeAccess().getAlternatives_7_1(), "rule__RecordType__Alternatives_7_1");
					put(grammarAccess.getPropertyAccess().getAlternatives_0(), "rule__Property__Alternatives_0");
					put(grammarAccess.getPropertyAccess().getAlternatives_2(), "rule__Property__Alternatives_2");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getTemplateTypeAccess().getGroup(), "rule__TemplateType__Group__0");
					put(grammarAccess.getTemplateTypeAccess().getGroup_0(), "rule__TemplateType__Group_0__0");
					put(grammarAccess.getTemplateTypeAccess().getGroup_1(), "rule__TemplateType__Group_1__0");
					put(grammarAccess.getTemplateTypeAccess().getGroup_4(), "rule__TemplateType__Group_4__0");
					put(grammarAccess.getTemplateTypeAccess().getGroup_4_2(), "rule__TemplateType__Group_4_2__0");
					put(grammarAccess.getTemplateTypeAccess().getGroup_5(), "rule__TemplateType__Group_5__0");
					put(grammarAccess.getRecordTypeAccess().getGroup(), "rule__RecordType__Group__0");
					put(grammarAccess.getRecordTypeAccess().getGroup_0(), "rule__RecordType__Group_0__0");
					put(grammarAccess.getRecordTypeAccess().getGroup_1(), "rule__RecordType__Group_1__0");
					put(grammarAccess.getRecordTypeAccess().getGroup_5(), "rule__RecordType__Group_5__0");
					put(grammarAccess.getRecordTypeAccess().getGroup_6(), "rule__RecordType__Group_6__0");
					put(grammarAccess.getRecordTypeAccess().getGroup_6_2(), "rule__RecordType__Group_6_2__0");
					put(grammarAccess.getRecordTypeAccess().getGroup_7(), "rule__RecordType__Group_7__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_0_1(), "rule__Property__Group_0_1__0");
					put(grammarAccess.getPropertyAccess().getGroup_2_0(), "rule__Property__Group_2_0__0");
					put(grammarAccess.getPropertyAccess().getGroup_2_1(), "rule__Property__Group_2_1__0");
					put(grammarAccess.getClassifierAccess().getGroup(), "rule__Classifier__Group__0");
					put(grammarAccess.getClassifierAccess().getGroup_0(), "rule__Classifier__Group_0__0");
					put(grammarAccess.getArraySizeAccess().getGroup(), "rule__ArraySize__Group__0");
					put(grammarAccess.getReferencePropertyAccess().getGroup(), "rule__ReferenceProperty__Group__0");
					put(grammarAccess.getArrayLiteralAccess().getGroup(), "rule__ArrayLiteral__Group__0");
					put(grammarAccess.getArrayLiteralAccess().getGroup_2(), "rule__ArrayLiteral__Group_2__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getPackagesAssignment_2(), "rule__Model__PackagesAssignment_2");
					put(grammarAccess.getModelAccess().getImportsAssignment_3(), "rule__Model__ImportsAssignment_3");
					put(grammarAccess.getModelAccess().getTypesAssignment_4(), "rule__Model__TypesAssignment_4");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
					put(grammarAccess.getPackageAccess().getPackageAssignment_2(), "rule__Package__PackageAssignment_2");
					put(grammarAccess.getTemplateTypeAccess().getAuthorAssignment_0_1(), "rule__TemplateType__AuthorAssignment_0_1");
					put(grammarAccess.getTemplateTypeAccess().getSinceAssignment_1_1(), "rule__TemplateType__SinceAssignment_1_1");
					put(grammarAccess.getTemplateTypeAccess().getNameAssignment_3(), "rule__TemplateType__NameAssignment_3");
					put(grammarAccess.getTemplateTypeAccess().getParentsAssignment_4_1(), "rule__TemplateType__ParentsAssignment_4_1");
					put(grammarAccess.getTemplateTypeAccess().getParentsAssignment_4_2_1(), "rule__TemplateType__ParentsAssignment_4_2_1");
					put(grammarAccess.getTemplateTypeAccess().getPropertiesAssignment_5_1_0(), "rule__TemplateType__PropertiesAssignment_5_1_0");
					put(grammarAccess.getTemplateTypeAccess().getConstantsAssignment_5_1_1(), "rule__TemplateType__ConstantsAssignment_5_1_1");
					put(grammarAccess.getRecordTypeAccess().getAuthorAssignment_0_1(), "rule__RecordType__AuthorAssignment_0_1");
					put(grammarAccess.getRecordTypeAccess().getSinceAssignment_1_1(), "rule__RecordType__SinceAssignment_1_1");
					put(grammarAccess.getRecordTypeAccess().getAbstractAssignment_2(), "rule__RecordType__AbstractAssignment_2");
					put(grammarAccess.getRecordTypeAccess().getNameAssignment_4(), "rule__RecordType__NameAssignment_4");
					put(grammarAccess.getRecordTypeAccess().getParentAssignment_5_1(), "rule__RecordType__ParentAssignment_5_1");
					put(grammarAccess.getRecordTypeAccess().getParentsAssignment_6_1(), "rule__RecordType__ParentsAssignment_6_1");
					put(grammarAccess.getRecordTypeAccess().getParentsAssignment_6_2_1(), "rule__RecordType__ParentsAssignment_6_2_1");
					put(grammarAccess.getRecordTypeAccess().getPropertiesAssignment_7_1_0(), "rule__RecordType__PropertiesAssignment_7_1_0");
					put(grammarAccess.getRecordTypeAccess().getConstantsAssignment_7_1_1(), "rule__RecordType__ConstantsAssignment_7_1_1");
					put(grammarAccess.getConstantAccess().getTypeAssignment_1(), "rule__Constant__TypeAssignment_1");
					put(grammarAccess.getConstantAccess().getNameAssignment_2(), "rule__Constant__NameAssignment_2");
					put(grammarAccess.getConstantAccess().getValueAssignment_4(), "rule__Constant__ValueAssignment_4");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_0_0(), "rule__Property__TypeAssignment_0_0");
					put(grammarAccess.getPropertyAccess().getReferToAssignment_0_1_1(), "rule__Property__ReferToAssignment_0_1_1");
					put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
					put(grammarAccess.getPropertyAccess().getPropertiesAssignment_2_0_1(), "rule__Property__PropertiesAssignment_2_0_1");
					put(grammarAccess.getPropertyAccess().getValueAssignment_2_1_1(), "rule__Property__ValueAssignment_2_1_1");
					put(grammarAccess.getClassifierAccess().getPackageAssignment_0_0(), "rule__Classifier__PackageAssignment_0_0");
					put(grammarAccess.getClassifierAccess().getClassAssignment_1(), "rule__Classifier__ClassAssignment_1");
					put(grammarAccess.getClassifierAccess().getSizesAssignment_2(), "rule__Classifier__SizesAssignment_2");
					put(grammarAccess.getArraySizeAccess().getSizeAssignment_2(), "rule__ArraySize__SizeAssignment_2");
					put(grammarAccess.getReferencePropertyAccess().getRefAssignment_0(), "rule__ReferenceProperty__RefAssignment_0");
					put(grammarAccess.getReferencePropertyAccess().getPropertiesAssignment_2(), "rule__ReferenceProperty__PropertiesAssignment_2");
					put(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_1(), "rule__ArrayLiteral__LiteralsAssignment_1");
					put(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_2_1(), "rule__ArrayLiteral__LiteralsAssignment_2_1");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
					put(grammarAccess.getFloatLiteralAccess().getValueAssignment(), "rule__FloatLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getConstantLiteralAccess().getValueAssignment(), "rule__ConstantLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.se.instrumentation.rl.ui.contentassist.antlr.internal.InternalRecordLangParser typedParser = (de.cau.cs.se.instrumentation.rl.ui.contentassist.antlr.internal.InternalRecordLangParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RecordLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RecordLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
