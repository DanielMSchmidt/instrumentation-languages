grammar de.cau.cs.se.instrumentation.al.ApplicationLang with de.cau.cs.kieler.core.annotations.text.Annotations 

generate applicationLang "http://www.cau.de/cs/se/instrumentation/al/ApplicationLang"

import "http://kieler.cs.cau.de/annotations" as annotations
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.cau.de/cs/se/instrumentation/rl/RecordLang" as irl


Model:
	'package' name = QualifiedName
	(packages += Package)*
	(imports += Import)*
	(aspects += Aspect)*
;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard
;

Package:
	'use' name=ID package=[ecore::EPackage|STRING] 
;

QualifiedName:
  ID (=>'.' ID)*;

QualifiedNameWithWildcard:
	QualifiedName ('.' '*')?
;

// define subgraph-pattern to locate structures in models
// define selector for reference destination

Aspect:
	annotation=Annotation
	'aspect' query=Query '{'
		collectors+=Collector
	'}'
;

Query:
	location=LocationQuery ((modifier=Modifier|'*') (returnType=ReturnType) methodName=ID '(' ')')?
;

LocationQuery:
	node=Node ('.' specialization=LocationQuery)? 
;


Node:
	(SubPathNode | WildcardNode | NamedNode) (parameter=ParamQuery)?  
;

ParamQuery: // extend ParamQuery to boolean expression with | & !
	'[' queries+=ParamCompare+ ']'
;

ParamCompare:
	left=Value (operator=Operator right=Value)
;

Value:
	StringValue | IntValue | FloatValue | ReferenceValue
;

FloatValue:
	value=FLOAT
;

IntValue:
	value=INT
;

StringValue:
	value=STRING
;

ReferenceValue:
	(query=LocationQuery) parameter=Parameter
;

Parameter:
	'@' property=ID
;

enum Operator:
	EQ = '=' |
	LIKE = '~' |
	NE = '!=' |
	GR = '>' |
	LW = '<' |
	GE = '>=' |
	LE = '<='
;

NamedNode:
	ref=ID 
;

WildcardNode: {WoldcardNode}
	'*'
;

SubPathNode: {SubPathNode}
	'**'
;

Collector:
	insertionPoint=InsertionPoint type=[irl::RecordType|QualifiedName] '(' (initializations+=Value (',' initializations+=Value)*)? ')'
;

ReturnType:
	type=ID
;

enum Modifier:
	PUBLIC = 'public' |
	PRIVATE = 'private'
;

enum InsertionPoint: 
	BEFORE = 'before' |
	AFTER = 'after'
;
