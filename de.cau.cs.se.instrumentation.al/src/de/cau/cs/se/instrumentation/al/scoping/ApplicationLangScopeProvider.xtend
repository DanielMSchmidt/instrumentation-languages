/*
 * generated by Xtext
 */
package de.cau.cs.se.instrumentation.al.scoping

import de.cau.cs.se.instrumentation.al.applicationLang.Query
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference
import de.cau.cs.se.instrumentation.al.applicationLang.LocationQuery
import de.cau.cs.se.instrumentation.al.applicationLang.Node
import de.cau.cs.se.instrumentation.al.applicationLang.ContainerNode
import org.eclipse.xtext.scoping.Scopes
import de.cau.cs.se.instrumentation.al.applicationLang.RegisteredPackage
import de.cau.cs.se.instrumentation.al.modelhandling.ForeignModelTypeProviderFactory
import com.google.inject.Inject
import de.cau.cs.se.instrumentation.al.applicationLang.Model
import org.eclipse.emf.ecore.EObject

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class ApplicationLangScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	@Inject extension ForeignModelTypeProviderFactory typeProviderFactory
	
	def IScope scope_ContainerNode_container(ContainerNode context, EReference reference) {
		if (context.eContainer.eContainer instanceof LocationQuery) {
			val typeProvider = typeProviderFactory.getTypeProvider(context.eResource.resourceSet, null)
			val IScope result = new ContainerParentScope(typeProvider.allTypes, context)   
			return result
		} else {
			return null // null required here to cascade to default resolver
		}
	}
	
	def Model getModel(ContainerNode node) {
		return node.eContainer.model
	}
	
	def Model getModel(EObject node) {
		if (node instanceof Model)
			return node as Model
		else
			return node.eContainer.model
	}

	def IScope scope_Query_method(Query context, EReference reference) {
		System.out.println("scope_Query_method")
		val Node node = context.location.leaveNode
		System.out.println("node " + (node as ContainerNode)?.container.name)
		if (node instanceof ContainerNode) {
			return  Scopes.scopeFor((node as ContainerNode).container.methods)
		} else {
			return IScope.NULLSCOPE
		}
	}
	
	
	def Node leaveNode(LocationQuery query) {
		if (query.specialization != null)
			query.specialization.leaveNode
		else
			query.node
	}
	
		/**
	 * Find scope for the package property in the MetaModel rule.
	 * 
	 * @param context
	 *            The Package-object of the resulting model.
	 * @param reference
	 *            The EReference-reference object of the AST.
	 * @return The scope for the package attribute.
	 */
	def IScope scope_RegisteredPackage_ePackage(RegisteredPackage context, EReference reference) {
		val IScope result = new EPackageScope(context.eResource().getResourceSet())
		return result
	}
	
}


