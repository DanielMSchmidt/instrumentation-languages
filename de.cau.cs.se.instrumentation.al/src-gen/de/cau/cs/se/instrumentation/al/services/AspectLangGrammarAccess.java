/*
 * generated by Xtext
 */
package de.cau.cs.se.instrumentation.al.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;

@Singleton
public class AspectLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cSourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourcesApplicationModelParserRuleCall_3_0 = (RuleCall)cSourcesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAdvicesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAdvicesAdviceParserRuleCall_4_0_0 = (RuleCall)cAdvicesAssignment_4_0.eContents().get(0);
		private final Assignment cPointcutsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPointcutsPointcutParserRuleCall_4_1_0 = (RuleCall)cPointcutsAssignment_4_1.eContents().get(0);
		private final Assignment cAspectsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cAspectsAspectParserRuleCall_4_2_0 = (RuleCall)cAspectsAssignment_4_2.eContents().get(0);
		
		//Model:
		//	"package" name=QualifiedName imports+=Import* sources+=ApplicationModel* (advices+=Advice | pointcuts+=Pointcut |
		//	aspects+=Aspect)*;
		@Override public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName imports+=Import* sources+=ApplicationModel* (advices+=Advice | pointcuts+=Pointcut |
		//aspects+=Aspect)*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//sources+=ApplicationModel*
		public Assignment getSourcesAssignment_3() { return cSourcesAssignment_3; }

		//ApplicationModel
		public RuleCall getSourcesApplicationModelParserRuleCall_3_0() { return cSourcesApplicationModelParserRuleCall_3_0; }

		//(advices+=Advice | pointcuts+=Pointcut | aspects+=Aspect)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//advices+=Advice
		public Assignment getAdvicesAssignment_4_0() { return cAdvicesAssignment_4_0; }

		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_4_0_0() { return cAdvicesAdviceParserRuleCall_4_0_0; }

		//pointcuts+=Pointcut
		public Assignment getPointcutsAssignment_4_1() { return cPointcutsAssignment_4_1; }

		//Pointcut
		public RuleCall getPointcutsPointcutParserRuleCall_4_1_0() { return cPointcutsPointcutParserRuleCall_4_1_0; }

		//aspects+=Aspect
		public Assignment getAspectsAssignment_4_2() { return cAspectsAssignment_4_2; }

		//Aspect
		public RuleCall getAspectsAspectParserRuleCall_4_2_0() { return cAspectsAspectParserRuleCall_4_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ApplicationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplicationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHandlerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHandlerIDTerminalRuleCall_1_0 = (RuleCall)cHandlerAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelSTRINGTerminalRuleCall_4_0 = (RuleCall)cModelAssignment_4.eContents().get(0);
		
		//ApplicationModel:
		//	"use" handler=ID "on" name=ID model=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"use" handler=ID "on" name=ID model=STRING
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//handler=ID
		public Assignment getHandlerAssignment_1() { return cHandlerAssignment_1; }

		//ID
		public RuleCall getHandlerIDTerminalRuleCall_1_0() { return cHandlerIDTerminalRuleCall_1_0; }

		//"on"
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//model=STRING
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }

		//STRING
		public RuleCall getModelSTRINGTerminalRuleCall_4_0() { return cModelSTRINGTerminalRuleCall_4_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ("." "*")?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class AspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAspectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPointcutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPointcutPointcutCrossReference_1_0 = (CrossReference)cPointcutAssignment_1.eContents().get(0);
		private final RuleCall cPointcutPointcutQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cPointcutPointcutCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAdvicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAdvicesUtilizeAdviceParserRuleCall_3_0 = (RuleCall)cAdvicesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAdvicesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAdvicesUtilizeAdviceParserRuleCall_4_1_0 = (RuleCall)cAdvicesAssignment_4_1.eContents().get(0);
		
		//// define subgraph-pattern to locate structures in models
		//// define selector for reference destination
		//Aspect:
		//	"aspect" pointcut=[Pointcut|QualifiedName] ":" advices+=UtilizeAdvice ("," advices+=UtilizeAdvice)*;
		@Override public ParserRule getRule() { return rule; }

		//"aspect" pointcut=[Pointcut|QualifiedName] ":" advices+=UtilizeAdvice ("," advices+=UtilizeAdvice)*
		public Group getGroup() { return cGroup; }

		//"aspect"
		public Keyword getAspectKeyword_0() { return cAspectKeyword_0; }

		//pointcut=[Pointcut|QualifiedName]
		public Assignment getPointcutAssignment_1() { return cPointcutAssignment_1; }

		//[Pointcut|QualifiedName]
		public CrossReference getPointcutPointcutCrossReference_1_0() { return cPointcutPointcutCrossReference_1_0; }

		//QualifiedName
		public RuleCall getPointcutPointcutQualifiedNameParserRuleCall_1_0_1() { return cPointcutPointcutQualifiedNameParserRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//advices+=UtilizeAdvice
		public Assignment getAdvicesAssignment_3() { return cAdvicesAssignment_3; }

		//UtilizeAdvice
		public RuleCall getAdvicesUtilizeAdviceParserRuleCall_3_0() { return cAdvicesUtilizeAdviceParserRuleCall_3_0; }

		//("," advices+=UtilizeAdvice)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//advices+=UtilizeAdvice
		public Assignment getAdvicesAssignment_4_1() { return cAdvicesAssignment_4_1; }

		//UtilizeAdvice
		public RuleCall getAdvicesUtilizeAdviceParserRuleCall_4_1_0() { return cAdvicesUtilizeAdviceParserRuleCall_4_1_0; }
	}

	public class UtilizeAdviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UtilizeAdvice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAdviceAdviceCrossReference_0_0 = (CrossReference)cAdviceAssignment_0.eContents().get(0);
		private final RuleCall cAdviceAdviceQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAdviceAdviceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParameterAssignmentsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParameterAssignmentsValueParserRuleCall_1_1_0_0 = (RuleCall)cParameterAssignmentsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignmentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParameterAssignmentsValueParserRuleCall_1_1_1_1_0 = (RuleCall)cParameterAssignmentsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//UtilizeAdvice:
		//	advice=[Advice|QualifiedName] ("(" (parameterAssignments+=Value ("," parameterAssignments+=Value)*)? ")")?;
		@Override public ParserRule getRule() { return rule; }

		//advice=[Advice|QualifiedName] ("(" (parameterAssignments+=Value ("," parameterAssignments+=Value)*)? ")")?
		public Group getGroup() { return cGroup; }

		//advice=[Advice|QualifiedName]
		public Assignment getAdviceAssignment_0() { return cAdviceAssignment_0; }

		//[Advice|QualifiedName]
		public CrossReference getAdviceAdviceCrossReference_0_0() { return cAdviceAdviceCrossReference_0_0; }

		//QualifiedName
		public RuleCall getAdviceAdviceQualifiedNameParserRuleCall_0_0_1() { return cAdviceAdviceQualifiedNameParserRuleCall_0_0_1; }

		//("(" (parameterAssignments+=Value ("," parameterAssignments+=Value)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(parameterAssignments+=Value ("," parameterAssignments+=Value)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//parameterAssignments+=Value
		public Assignment getParameterAssignmentsAssignment_1_1_0() { return cParameterAssignmentsAssignment_1_1_0; }

		//Value
		public RuleCall getParameterAssignmentsValueParserRuleCall_1_1_0_0() { return cParameterAssignmentsValueParserRuleCall_1_1_0_0; }

		//("," parameterAssignments+=Value)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//parameterAssignments+=Value
		public Assignment getParameterAssignmentsAssignment_1_1_1_1() { return cParameterAssignmentsAssignment_1_1_1_1; }

		//Value
		public RuleCall getParameterAssignmentsValueParserRuleCall_1_1_1_1_0() { return cParameterAssignmentsValueParserRuleCall_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AdviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Advice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCollectorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCollectorsCollectorParserRuleCall_4_0 = (RuleCall)cCollectorsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Advice:
		//	"advice" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" collectors+=Collector* "}";
		@Override public ParserRule getRule() { return rule; }

		//"advice" name=ID ("(" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)?
		//")")? "{" collectors+=Collector* "}"
		public Group getGroup() { return cGroup; }

		//"advice"
		public Keyword getAdviceKeyword_0() { return cAdviceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//collectors+=Collector*
		public Assignment getCollectorsAssignment_4() { return cCollectorsAssignment_4; }

		//Collector
		public RuleCall getCollectorsCollectorParserRuleCall_4_0() { return cCollectorsCollectorParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeTypeKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParameterDeclaration:
		//	type="type" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type="type" name=ID
		public Group getGroup() { return cGroup; }

		//type="type"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"type"
		public Keyword getTypeTypeKeyword_0_0() { return cTypeTypeKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PointcutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pointcut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cPointcutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocationLocationQueryParserRuleCall_4_0 = (RuleCall)cLocationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOperationKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMethodAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMethodMethodQueryParserRuleCall_5_1_0 = (RuleCall)cMethodAssignment_5_1.eContents().get(0);
		
		//Pointcut:
		//	annotation=Annotation? "pointcut" name=ID "class" location=LocationQuery ("operation" method=MethodQuery)?;
		@Override public ParserRule getRule() { return rule; }

		//annotation=Annotation? "pointcut" name=ID "class" location=LocationQuery ("operation" method=MethodQuery)?
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"pointcut"
		public Keyword getPointcutKeyword_1() { return cPointcutKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"class"
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }

		//location=LocationQuery
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }

		//LocationQuery
		public RuleCall getLocationLocationQueryParserRuleCall_4_0() { return cLocationLocationQueryParserRuleCall_4_0; }

		//("operation" method=MethodQuery)?
		public Group getGroup_5() { return cGroup_5; }

		//"operation"
		public Keyword getOperationKeyword_5_0() { return cOperationKeyword_5_0; }

		//method=MethodQuery
		public Assignment getMethodAssignment_5_1() { return cMethodAssignment_5_1; }

		//MethodQuery
		public RuleCall getMethodMethodQueryParserRuleCall_5_1_0() { return cMethodMethodQueryParserRuleCall_5_1_0; }
	}

	public class MethodQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModifierMethodModifierCrossReference_1_0 = (CrossReference)cModifierAssignment_1.eContents().get(0);
		private final RuleCall cModifierMethodModifierIDTerminalRuleCall_1_0_1 = (RuleCall)cModifierMethodModifierCrossReference_1_0.eContents().get(1);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReturnTypeTypeCrossReference_2_0 = (CrossReference)cReturnTypeAssignment_2.eContents().get(0);
		private final RuleCall cReturnTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cReturnTypeTypeCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cMethodReferenceAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cMethodReferenceMethodCrossReference_3_0_0_0 = (CrossReference)cMethodReferenceAssignment_3_0_0.eContents().get(0);
		private final RuleCall cMethodReferenceMethodIDTerminalRuleCall_3_0_0_0_1 = (RuleCall)cMethodReferenceMethodCrossReference_3_0_0_0.eContents().get(1);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cParameterQueriesAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cParameterQueriesParameterQueryParserRuleCall_3_0_1_1_0 = (RuleCall)cParameterQueriesAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_0_1_2 = (Group)cGroup_3_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_1_2_0 = (Keyword)cGroup_3_0_1_2.eContents().get(0);
		private final Assignment cParameterQueriesAssignment_3_0_1_2_1 = (Assignment)cGroup_3_0_1_2.eContents().get(1);
		private final RuleCall cParameterQueriesParameterQueryParserRuleCall_3_0_1_2_1_0 = (RuleCall)cParameterQueriesAssignment_3_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_1_3 = (Keyword)cGroup_3_0_1.eContents().get(3);
		private final Keyword cAsteriskKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//MethodQuery:
		//	{MethodQuery} modifier=[structure::MethodModifier]? returnType=[structure::Type]? (methodReference=[structure::Method]
		//	("(" parameterQueries+=ParameterQuery ("," parameterQueries+=ParameterQuery)* ")")? | "*");
		@Override public ParserRule getRule() { return rule; }

		//{MethodQuery} modifier=[structure::MethodModifier]? returnType=[structure::Type]? (methodReference=[structure::Method]
		//("(" parameterQueries+=ParameterQuery ("," parameterQueries+=ParameterQuery)* ")")? | "*")
		public Group getGroup() { return cGroup; }

		//{MethodQuery}
		public Action getMethodQueryAction_0() { return cMethodQueryAction_0; }

		//modifier=[structure::MethodModifier]?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//[structure::MethodModifier]
		public CrossReference getModifierMethodModifierCrossReference_1_0() { return cModifierMethodModifierCrossReference_1_0; }

		//ID
		public RuleCall getModifierMethodModifierIDTerminalRuleCall_1_0_1() { return cModifierMethodModifierIDTerminalRuleCall_1_0_1; }

		//returnType=[structure::Type]?
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//[structure::Type]
		public CrossReference getReturnTypeTypeCrossReference_2_0() { return cReturnTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getReturnTypeTypeIDTerminalRuleCall_2_0_1() { return cReturnTypeTypeIDTerminalRuleCall_2_0_1; }

		//methodReference=[structure::Method] ("(" parameterQueries+=ParameterQuery ("," parameterQueries+=ParameterQuery)* ")")?
		//| "*"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//methodReference=[structure::Method] ("(" parameterQueries+=ParameterQuery ("," parameterQueries+=ParameterQuery)* ")")?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//methodReference=[structure::Method]
		public Assignment getMethodReferenceAssignment_3_0_0() { return cMethodReferenceAssignment_3_0_0; }

		//[structure::Method]
		public CrossReference getMethodReferenceMethodCrossReference_3_0_0_0() { return cMethodReferenceMethodCrossReference_3_0_0_0; }

		//ID
		public RuleCall getMethodReferenceMethodIDTerminalRuleCall_3_0_0_0_1() { return cMethodReferenceMethodIDTerminalRuleCall_3_0_0_0_1; }

		//("(" parameterQueries+=ParameterQuery ("," parameterQueries+=ParameterQuery)* ")")?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0_1_0() { return cLeftParenthesisKeyword_3_0_1_0; }

		//parameterQueries+=ParameterQuery
		public Assignment getParameterQueriesAssignment_3_0_1_1() { return cParameterQueriesAssignment_3_0_1_1; }

		//ParameterQuery
		public RuleCall getParameterQueriesParameterQueryParserRuleCall_3_0_1_1_0() { return cParameterQueriesParameterQueryParserRuleCall_3_0_1_1_0; }

		//("," parameterQueries+=ParameterQuery)*
		public Group getGroup_3_0_1_2() { return cGroup_3_0_1_2; }

		//","
		public Keyword getCommaKeyword_3_0_1_2_0() { return cCommaKeyword_3_0_1_2_0; }

		//parameterQueries+=ParameterQuery
		public Assignment getParameterQueriesAssignment_3_0_1_2_1() { return cParameterQueriesAssignment_3_0_1_2_1; }

		//ParameterQuery
		public RuleCall getParameterQueriesParameterQueryParserRuleCall_3_0_1_2_1_0() { return cParameterQueriesParameterQueryParserRuleCall_3_0_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_0_1_3() { return cRightParenthesisKeyword_3_0_1_3; }

		//"*"
		public Keyword getAsteriskKeyword_3_1() { return cAsteriskKeyword_3_1; }
	}

	public class ParameterQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModifierParameterModifierCrossReference_0_0 = (CrossReference)cModifierAssignment_0.eContents().get(0);
		private final RuleCall cModifierParameterModifierIDTerminalRuleCall_0_0_1 = (RuleCall)cModifierParameterModifierCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParameterParameterCrossReference_2_0 = (CrossReference)cParameterAssignment_2.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_2_0_1 = (RuleCall)cParameterParameterCrossReference_2_0.eContents().get(1);
		
		//ParameterQuery:
		//	modifier=[structure::ParameterModifier]? type=[structure::Type] parameter=[structure::Parameter]?;
		@Override public ParserRule getRule() { return rule; }

		//modifier=[structure::ParameterModifier]? type=[structure::Type] parameter=[structure::Parameter]?
		public Group getGroup() { return cGroup; }

		//modifier=[structure::ParameterModifier]?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//[structure::ParameterModifier]
		public CrossReference getModifierParameterModifierCrossReference_0_0() { return cModifierParameterModifierCrossReference_0_0; }

		//ID
		public RuleCall getModifierParameterModifierIDTerminalRuleCall_0_0_1() { return cModifierParameterModifierIDTerminalRuleCall_0_0_1; }

		//type=[structure::Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[structure::Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }

		//parameter=[structure::Parameter]?
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }

		//[structure::Parameter]
		public CrossReference getParameterParameterCrossReference_2_0() { return cParameterParameterCrossReference_2_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_2_0_1() { return cParameterParameterIDTerminalRuleCall_2_0_1; }
	}

	public class LocationQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cSpecializationAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSpecializationLocationQueryParserRuleCall_1_0_1_0 = (RuleCall)cSpecializationAssignment_1_0_1.eContents().get(0);
		private final Assignment cCompositionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCompositionCompositionQueryParserRuleCall_1_1_0 = (RuleCall)cCompositionAssignment_1_1.eContents().get(0);
		
		//LocationQuery:
		//	node=Node ("." specialization=LocationQuery | composition=CompositionQuery)?;
		@Override public ParserRule getRule() { return rule; }

		//node=Node ("." specialization=LocationQuery | composition=CompositionQuery)?
		public Group getGroup() { return cGroup; }

		//node=Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//Node
		public RuleCall getNodeNodeParserRuleCall_0_0() { return cNodeNodeParserRuleCall_0_0; }

		//("." specialization=LocationQuery | composition=CompositionQuery)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"." specialization=LocationQuery
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }

		//specialization=LocationQuery
		public Assignment getSpecializationAssignment_1_0_1() { return cSpecializationAssignment_1_0_1; }

		//LocationQuery
		public RuleCall getSpecializationLocationQueryParserRuleCall_1_0_1_0() { return cSpecializationLocationQueryParserRuleCall_1_0_1_0; }

		//composition=CompositionQuery
		public Assignment getCompositionAssignment_1_1() { return cCompositionAssignment_1_1; }

		//CompositionQuery
		public RuleCall getCompositionCompositionQueryParserRuleCall_1_1_0() { return cCompositionCompositionQueryParserRuleCall_1_1_0; }
	}

	public class CompositionQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositionQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositionQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierQueryModifierEnumRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubQueriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubQueriesLocationQueryParserRuleCall_3_0 = (RuleCall)cSubQueriesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompositionQuery:
		//	{CompositionQuery} modifier=QueryModifier? "{" subQueries+=LocationQuery* "}";
		@Override public ParserRule getRule() { return rule; }

		//{CompositionQuery} modifier=QueryModifier? "{" subQueries+=LocationQuery* "}"
		public Group getGroup() { return cGroup; }

		//{CompositionQuery}
		public Action getCompositionQueryAction_0() { return cCompositionQueryAction_0; }

		//modifier=QueryModifier?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//QueryModifier
		public RuleCall getModifierQueryModifierEnumRuleCall_1_0() { return cModifierQueryModifierEnumRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//subQueries+=LocationQuery*
		public Assignment getSubQueriesAssignment_3() { return cSubQueriesAssignment_3; }

		//LocationQuery
		public RuleCall getSubQueriesLocationQueryParserRuleCall_3_0() { return cSubQueriesLocationQueryParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSubPathNodeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cWildcardNodeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cParentNodeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cContainerNodeParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParamQueryParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		
		//Node:
		//	(SubPathNode | WildcardNode | ParentNode | ContainerNode) parameter=ParamQuery?;
		@Override public ParserRule getRule() { return rule; }

		//(SubPathNode | WildcardNode | ParentNode | ContainerNode) parameter=ParamQuery?
		public Group getGroup() { return cGroup; }

		//SubPathNode | WildcardNode | ParentNode | ContainerNode
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SubPathNode
		public RuleCall getSubPathNodeParserRuleCall_0_0() { return cSubPathNodeParserRuleCall_0_0; }

		//WildcardNode
		public RuleCall getWildcardNodeParserRuleCall_0_1() { return cWildcardNodeParserRuleCall_0_1; }

		//ParentNode
		public RuleCall getParentNodeParserRuleCall_0_2() { return cParentNodeParserRuleCall_0_2; }

		//ContainerNode
		public RuleCall getContainerNodeParserRuleCall_0_3() { return cContainerNodeParserRuleCall_0_3; }

		//parameter=ParamQuery?
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//ParamQuery
		public RuleCall getParameterParamQueryParserRuleCall_1_0() { return cParameterParamQueryParserRuleCall_1_0; }
	}

	public class ParamQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueriesParamOperatorParserRuleCall_1_0 = (RuleCall)cQueriesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParamQuery:
		//	"[" queries+=ParamOperator+ "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" queries+=ParamOperator+ "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//queries+=ParamOperator+
		public Assignment getQueriesAssignment_1() { return cQueriesAssignment_1; }

		//ParamOperator
		public RuleCall getQueriesParamOperatorParserRuleCall_1_0() { return cQueriesParamOperatorParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ParamOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParamCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cParamExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLogicAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLogicLogicOperatorEnumRuleCall_1_1_0 = (RuleCall)cLogicAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightParamCompareParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ParamOperator returns ParamExpression:
		//	ParamCompare ({ParamExpression.left=current} logic=LogicOperator right=ParamCompare)?;
		@Override public ParserRule getRule() { return rule; }

		//ParamCompare ({ParamExpression.left=current} logic=LogicOperator right=ParamCompare)?
		public Group getGroup() { return cGroup; }

		//ParamCompare
		public RuleCall getParamCompareParserRuleCall_0() { return cParamCompareParserRuleCall_0; }

		//({ParamExpression.left=current} logic=LogicOperator right=ParamCompare)?
		public Group getGroup_1() { return cGroup_1; }

		//{ParamExpression.left=current}
		public Action getParamExpressionLeftAction_1_0() { return cParamExpressionLeftAction_1_0; }

		//logic=LogicOperator
		public Assignment getLogicAssignment_1_1() { return cLogicAssignment_1_1; }

		//LogicOperator
		public RuleCall getLogicLogicOperatorEnumRuleCall_1_1_0() { return cLogicLogicOperatorEnumRuleCall_1_1_0; }

		//right=ParamCompare
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ParamCompare
		public RuleCall getRightParamCompareParserRuleCall_1_2_0() { return cRightParamCompareParserRuleCall_1_2_0; }
	}

	public class ParamCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cParamExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ParamCompare returns ParamExpression:
		//	Value ({ParamExpression.left=current} operator=LogicOperator right=Value)?;
		@Override public ParserRule getRule() { return rule; }

		//Value ({ParamExpression.left=current} operator=LogicOperator right=Value)?
		public Group getGroup() { return cGroup; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//({ParamExpression.left=current} operator=LogicOperator right=Value)?
		public Group getGroup_1() { return cGroup_1; }

		//{ParamExpression.left=current}
		public Action getParamExpressionLeftAction_1_0() { return cParamExpressionLeftAction_1_0; }

		//operator=LogicOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//LogicOperator
		public RuleCall getOperatorLogicOperatorEnumRuleCall_1_1_0() { return cOperatorLogicOperatorEnumRuleCall_1_1_0; }

		//right=Value
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Value
		public RuleCall getRightValueParserRuleCall_1_2_0() { return cRightValueParserRuleCall_1_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value returns ParamExpression:
		//	StringValue | IntValue | FloatValue | ReferenceValue;
		@Override public ParserRule getRule() { return rule; }

		//StringValue | IntValue | FloatValue | ReferenceValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_2() { return cFloatValueParserRuleCall_2; }

		//ReferenceValue
		public RuleCall getReferenceValueParserRuleCall_3() { return cReferenceValueParserRuleCall_3; }
	}

	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ReferenceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQueryLocationQueryParserRuleCall_0_0 = (RuleCall)cQueryAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		
		//ReferenceValue:
		//	query=LocationQuery? parameter=Parameter;
		@Override public ParserRule getRule() { return rule; }

		//query=LocationQuery? parameter=Parameter
		public Group getGroup() { return cGroup; }

		//query=LocationQuery?
		public Assignment getQueryAssignment_0() { return cQueryAssignment_0; }

		//LocationQuery
		public RuleCall getQueryLocationQueryParserRuleCall_0_0() { return cQueryLocationQueryParserRuleCall_0_0; }

		//parameter=Parameter
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_1_0() { return cParameterParameterParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuntimePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReflectionPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInternalFunctionPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Parameter:
		//	RuntimeProperty | ReflectionProperty | InternalFunctionProperty;
		@Override public ParserRule getRule() { return rule; }

		//RuntimeProperty | ReflectionProperty | InternalFunctionProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuntimeProperty
		public RuleCall getRuntimePropertyParserRuleCall_0() { return cRuntimePropertyParserRuleCall_0; }

		//ReflectionProperty
		public RuleCall getReflectionPropertyParserRuleCall_1() { return cReflectionPropertyParserRuleCall_1; }

		//InternalFunctionProperty
		public RuleCall getInternalFunctionPropertyParserRuleCall_2() { return cInternalFunctionPropertyParserRuleCall_2; }
	}

	public class InternalFunctionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalFunctionProperty");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionInternalFunctionEnumRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//InternalFunctionProperty:
		//	function=InternalFunction;
		@Override public ParserRule getRule() { return rule; }

		//function=InternalFunction
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }

		//InternalFunction
		public RuleCall getFunctionInternalFunctionEnumRuleCall_0() { return cFunctionInternalFunctionEnumRuleCall_0; }
	}

	public class RuntimePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuntimeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceIDTerminalRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//RuntimeProperty:
		//	"#" reference=ID;
		@Override public ParserRule getRule() { return rule; }

		//"#" reference=ID
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//reference=ID
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//ID
		public RuleCall getReferenceIDTerminalRuleCall_1_0() { return cReferenceIDTerminalRuleCall_1_0; }
	}

	public class ReflectionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReflectionProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionReflectionFunctionEnumRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		
		//ReflectionProperty:
		//	"$" function=ReflectionFunction;
		@Override public ParserRule getRule() { return rule; }

		//"$" function=ReflectionFunction
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//function=ReflectionFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//ReflectionFunction
		public RuleCall getFunctionReflectionFunctionEnumRuleCall_1_0() { return cFunctionReflectionFunctionEnumRuleCall_1_0; }
	}

	public class ContainerNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerNode");
		private final Assignment cContainerAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cContainerContainerCrossReference_0 = (CrossReference)cContainerAssignment.eContents().get(0);
		private final RuleCall cContainerContainerIDTerminalRuleCall_0_1 = (RuleCall)cContainerContainerCrossReference_0.eContents().get(1);
		
		//ContainerNode:
		//	container=[structure::Container];
		@Override public ParserRule getRule() { return rule; }

		//container=[structure::Container]
		public Assignment getContainerAssignment() { return cContainerAssignment; }

		//[structure::Container]
		public CrossReference getContainerContainerCrossReference_0() { return cContainerContainerCrossReference_0; }

		//ID
		public RuleCall getContainerContainerIDTerminalRuleCall_0_1() { return cContainerContainerIDTerminalRuleCall_0_1; }
	}

	public class WildcardNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WildcardNode:
		//	{WildcardNode} "*";
		@Override public ParserRule getRule() { return rule; }

		//{WildcardNode} "*"
		public Group getGroup() { return cGroup; }

		//{WildcardNode}
		public Action getWildcardNodeAction_0() { return cWildcardNodeAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class SubPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubPathNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SubPathNode:
		//	{SubPathNode} "**";
		@Override public ParserRule getRule() { return rule; }

		//{SubPathNode} "**"
		public Group getGroup() { return cGroup; }

		//{SubPathNode}
		public Action getSubPathNodeAction_0() { return cSubPathNodeAction_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
	}

	public class ParentNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParentNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParentNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParentNode:
		//	{ParentNode} "<<";
		@Override public ParserRule getRule() { return rule; }

		//{ParentNode} "<<"
		public Group getGroup() { return cGroup; }

		//{ParentNode}
		public Action getParentNodeAction_0() { return cParentNodeAction_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }
	}

	public class CollectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Collector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInsertionPointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInsertionPointInsertionPointEnumRuleCall_0_0 = (RuleCall)cInsertionPointAssignment_0.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		
		//Collector:
		//	insertionPoint=InsertionPoint events+=Event+;
		@Override public ParserRule getRule() { return rule; }

		//insertionPoint=InsertionPoint events+=Event+
		public Group getGroup() { return cGroup; }

		//insertionPoint=InsertionPoint
		public Assignment getInsertionPointAssignment_0() { return cInsertionPointAssignment_0; }

		//InsertionPoint
		public RuleCall getInsertionPointInsertionPointEnumRuleCall_0_0() { return cInsertionPointInsertionPointEnumRuleCall_0_0; }

		//events+=Event+
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }

		//Event
		public RuleCall getEventsEventParserRuleCall_1_0() { return cEventsEventParserRuleCall_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeRecordTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeRecordTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeRecordTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInitializationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInitializationsValueParserRuleCall_2_0_0 = (RuleCall)cInitializationsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInitializationsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInitializationsValueParserRuleCall_2_1_1_0 = (RuleCall)cInitializationsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Event:
		//	type=[irl::RecordType|QualifiedName] "(" (initializations+=Value ("," initializations+=Value)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//type=[irl::RecordType|QualifiedName] "(" (initializations+=Value ("," initializations+=Value)*)? ")"
		public Group getGroup() { return cGroup; }

		//type=[irl::RecordType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[irl::RecordType|QualifiedName]
		public CrossReference getTypeRecordTypeCrossReference_0_0() { return cTypeRecordTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeRecordTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeRecordTypeQualifiedNameParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(initializations+=Value ("," initializations+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }

		//initializations+=Value
		public Assignment getInitializationsAssignment_2_0() { return cInitializationsAssignment_2_0; }

		//Value
		public RuleCall getInitializationsValueParserRuleCall_2_0_0() { return cInitializationsValueParserRuleCall_2_0_0; }

		//("," initializations+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//initializations+=Value
		public Assignment getInitializationsAssignment_2_1_1() { return cInitializationsAssignment_2_1_1; }

		//Value
		public RuleCall getInitializationsValueParserRuleCall_2_1_1_0() { return cInitializationsValueParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	public class QueryModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "QueryModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCLUDEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCLUDEIncludeKeyword_0_0 = (Keyword)cINCLUDEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXCLUDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXCLUDEExcludeKeyword_1_0 = (Keyword)cEXCLUDEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum QueryModifier:
		//	INCLUDE="include" | EXCLUDE="exclude";
		public EnumRule getRule() { return rule; }

		//INCLUDE="include" | EXCLUDE="exclude"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INCLUDE="include"
		public EnumLiteralDeclaration getINCLUDEEnumLiteralDeclaration_0() { return cINCLUDEEnumLiteralDeclaration_0; }

		//"include"
		public Keyword getINCLUDEIncludeKeyword_0_0() { return cINCLUDEIncludeKeyword_0_0; }

		//EXCLUDE="exclude"
		public EnumLiteralDeclaration getEXCLUDEEnumLiteralDeclaration_1() { return cEXCLUDEEnumLiteralDeclaration_1; }

		//"exclude"
		public Keyword getEXCLUDEExcludeKeyword_1_0() { return cEXCLUDEExcludeKeyword_1_0; }
	}

	public class LogicOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOperator:
		//	AND="&&" | OR="||";
		public EnumRule getRule() { return rule; }

		//AND="&&" | OR="||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_0_0() { return cANDAmpersandAmpersandKeyword_0_0; }

		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_1_0() { return cORVerticalLineVerticalLineKeyword_1_0; }
	}

	public class InternalFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InternalFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTIMETimeKeyword_0_0 = (Keyword)cTIMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRACE_IDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRACE_IDTraceIdKeyword_1_0 = (Keyword)cTRACE_IDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cORDER_INDEXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cORDER_INDEXOrderIndexKeyword_2_0 = (Keyword)cORDER_INDEXEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InternalFunction:
		//	TIME="time" | TRACE_ID="traceId" | ORDER_INDEX="orderIndex";
		public EnumRule getRule() { return rule; }

		//TIME="time" | TRACE_ID="traceId" | ORDER_INDEX="orderIndex"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TIME="time"
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_0() { return cTIMEEnumLiteralDeclaration_0; }

		//"time"
		public Keyword getTIMETimeKeyword_0_0() { return cTIMETimeKeyword_0_0; }

		//TRACE_ID="traceId"
		public EnumLiteralDeclaration getTRACE_IDEnumLiteralDeclaration_1() { return cTRACE_IDEnumLiteralDeclaration_1; }

		//"traceId"
		public Keyword getTRACE_IDTraceIdKeyword_1_0() { return cTRACE_IDTraceIdKeyword_1_0; }

		//ORDER_INDEX="orderIndex"
		public EnumLiteralDeclaration getORDER_INDEXEnumLiteralDeclaration_2() { return cORDER_INDEXEnumLiteralDeclaration_2; }

		//"orderIndex"
		public Keyword getORDER_INDEXOrderIndexKeyword_2_0() { return cORDER_INDEXOrderIndexKeyword_2_0; }
	}

	public class ReflectionFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ReflectionFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNAMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNAMENameKeyword_0_0 = (Keyword)cNAMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNATUREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSIGNATURESignatureKeyword_1_0 = (Keyword)cSIGNATUREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLASSClassnameKeyword_2_0 = (Keyword)cCLASSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRETURN_TYPEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRETURN_TYPEReturnTypeKeyword_3_0 = (Keyword)cRETURN_TYPEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ReflectionFunction:
		//	NAME="name" | SIGNATURE="signature" | CLASS="classname" | RETURN_TYPE="return-type";
		public EnumRule getRule() { return rule; }

		//NAME="name" | SIGNATURE="signature" | CLASS="classname" | RETURN_TYPE="return-type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NAME="name"
		public EnumLiteralDeclaration getNAMEEnumLiteralDeclaration_0() { return cNAMEEnumLiteralDeclaration_0; }

		//"name"
		public Keyword getNAMENameKeyword_0_0() { return cNAMENameKeyword_0_0; }

		//SIGNATURE="signature"
		public EnumLiteralDeclaration getSIGNATUREEnumLiteralDeclaration_1() { return cSIGNATUREEnumLiteralDeclaration_1; }

		//"signature"
		public Keyword getSIGNATURESignatureKeyword_1_0() { return cSIGNATURESignatureKeyword_1_0; }

		//CLASS="classname"
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_2() { return cCLASSEnumLiteralDeclaration_2; }

		//"classname"
		public Keyword getCLASSClassnameKeyword_2_0() { return cCLASSClassnameKeyword_2_0; }

		//RETURN_TYPE="return-type"
		public EnumLiteralDeclaration getRETURN_TYPEEnumLiteralDeclaration_3() { return cRETURN_TYPEEnumLiteralDeclaration_3; }

		//"return-type"
		public Keyword getRETURN_TYPEReturnTypeKeyword_3_0() { return cRETURN_TYPEReturnTypeKeyword_3_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLIKEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLIKETildeKeyword_1_0 = (Keyword)cLIKEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_2_0 = (Keyword)cNEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGRGreaterThanSignKeyword_3_0 = (Keyword)cGREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLWLessThanSignKeyword_4_0 = (Keyword)cLWEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLELessThanSignEqualsSignKeyword_6_0 = (Keyword)cLEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Operator:
		//	EQ="=" | LIKE="~" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<=";
		public EnumRule getRule() { return rule; }

		//EQ="=" | LIKE="~" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//LIKE="~"
		public EnumLiteralDeclaration getLIKEEnumLiteralDeclaration_1() { return cLIKEEnumLiteralDeclaration_1; }

		//"~"
		public Keyword getLIKETildeKeyword_1_0() { return cLIKETildeKeyword_1_0; }

		//NE="!="
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_2() { return cNEEnumLiteralDeclaration_2; }

		//"!="
		public Keyword getNEExclamationMarkEqualsSignKeyword_2_0() { return cNEExclamationMarkEqualsSignKeyword_2_0; }

		//GR=">"
		public EnumLiteralDeclaration getGREnumLiteralDeclaration_3() { return cGREnumLiteralDeclaration_3; }

		//">"
		public Keyword getGRGreaterThanSignKeyword_3_0() { return cGRGreaterThanSignKeyword_3_0; }

		//LW="<"
		public EnumLiteralDeclaration getLWEnumLiteralDeclaration_4() { return cLWEnumLiteralDeclaration_4; }

		//"<"
		public Keyword getLWLessThanSignKeyword_4_0() { return cLWLessThanSignKeyword_4_0; }

		//GE=">="
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_5() { return cGEEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_5_0() { return cGEGreaterThanSignEqualsSignKeyword_5_0; }

		//LE="<="
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_6() { return cLEEnumLiteralDeclaration_6; }

		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_6_0() { return cLELessThanSignEqualsSignKeyword_6_0; }
	}

	public class InsertionPointElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InsertionPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBEFOREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBEFOREBeforeKeyword_0_0 = (Keyword)cBEFOREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAFTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAFTERAfterKeyword_1_0 = (Keyword)cAFTEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InsertionPoint:
		//	BEFORE="before" | AFTER="after";
		public EnumRule getRule() { return rule; }

		//BEFORE="before" | AFTER="after"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BEFORE="before"
		public EnumLiteralDeclaration getBEFOREEnumLiteralDeclaration_0() { return cBEFOREEnumLiteralDeclaration_0; }

		//"before"
		public Keyword getBEFOREBeforeKeyword_0_0() { return cBEFOREBeforeKeyword_0_0; }

		//AFTER="after"
		public EnumLiteralDeclaration getAFTEREnumLiteralDeclaration_1() { return cAFTEREnumLiteralDeclaration_1; }

		//"after"
		public Keyword getAFTERAfterKeyword_1_0() { return cAFTERAfterKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final ApplicationModelElements pApplicationModel;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final AspectElements pAspect;
	private final UtilizeAdviceElements pUtilizeAdvice;
	private final AdviceElements pAdvice;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final PointcutElements pPointcut;
	private final MethodQueryElements pMethodQuery;
	private final ParameterQueryElements pParameterQuery;
	private final LocationQueryElements pLocationQuery;
	private final CompositionQueryElements pCompositionQuery;
	private final QueryModifierElements unknownRuleQueryModifier;
	private final NodeElements pNode;
	private final ParamQueryElements pParamQuery;
	private final ParamOperatorElements pParamOperator;
	private final LogicOperatorElements unknownRuleLogicOperator;
	private final ParamCompareElements pParamCompare;
	private final ValueElements pValue;
	private final FloatValueElements pFloatValue;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final ReferenceValueElements pReferenceValue;
	private final ParameterElements pParameter;
	private final InternalFunctionPropertyElements pInternalFunctionProperty;
	private final InternalFunctionElements unknownRuleInternalFunction;
	private final RuntimePropertyElements pRuntimeProperty;
	private final ReflectionPropertyElements pReflectionProperty;
	private final ReflectionFunctionElements unknownRuleReflectionFunction;
	private final OperatorElements unknownRuleOperator;
	private final ContainerNodeElements pContainerNode;
	private final WildcardNodeElements pWildcardNode;
	private final SubPathNodeElements pSubPathNode;
	private final ParentNodeElements pParentNode;
	private final CollectorElements pCollector;
	private final EventElements pEvent;
	private final InsertionPointElements unknownRuleInsertionPoint;
	
	private final Grammar grammar;

	private final AnnotationsGrammarAccess gaAnnotations;

	@Inject
	public AspectLangGrammarAccess(GrammarProvider grammarProvider,
		AnnotationsGrammarAccess gaAnnotations) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAnnotations = gaAnnotations;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pApplicationModel = new ApplicationModelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pAspect = new AspectElements();
		this.pUtilizeAdvice = new UtilizeAdviceElements();
		this.pAdvice = new AdviceElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pPointcut = new PointcutElements();
		this.pMethodQuery = new MethodQueryElements();
		this.pParameterQuery = new ParameterQueryElements();
		this.pLocationQuery = new LocationQueryElements();
		this.pCompositionQuery = new CompositionQueryElements();
		this.unknownRuleQueryModifier = new QueryModifierElements();
		this.pNode = new NodeElements();
		this.pParamQuery = new ParamQueryElements();
		this.pParamOperator = new ParamOperatorElements();
		this.unknownRuleLogicOperator = new LogicOperatorElements();
		this.pParamCompare = new ParamCompareElements();
		this.pValue = new ValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pReferenceValue = new ReferenceValueElements();
		this.pParameter = new ParameterElements();
		this.pInternalFunctionProperty = new InternalFunctionPropertyElements();
		this.unknownRuleInternalFunction = new InternalFunctionElements();
		this.pRuntimeProperty = new RuntimePropertyElements();
		this.pReflectionProperty = new ReflectionPropertyElements();
		this.unknownRuleReflectionFunction = new ReflectionFunctionElements();
		this.unknownRuleOperator = new OperatorElements();
		this.pContainerNode = new ContainerNodeElements();
		this.pWildcardNode = new WildcardNodeElements();
		this.pSubPathNode = new SubPathNodeElements();
		this.pParentNode = new ParentNodeElements();
		this.pCollector = new CollectorElements();
		this.pEvent = new EventElements();
		this.unknownRuleInsertionPoint = new InsertionPointElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.instrumentation.al.AspectLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	
	//Model:
	//	"package" name=QualifiedName imports+=Import* sources+=ApplicationModel* (advices+=Advice | pointcuts+=Pointcut |
	//	aspects+=Aspect)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ApplicationModel:
	//	"use" handler=ID "on" name=ID model=STRING;
	public ApplicationModelElements getApplicationModelAccess() {
		return pApplicationModel;
	}
	
	public ParserRule getApplicationModelRule() {
		return getApplicationModelAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//// define subgraph-pattern to locate structures in models
	//// define selector for reference destination
	//Aspect:
	//	"aspect" pointcut=[Pointcut|QualifiedName] ":" advices+=UtilizeAdvice ("," advices+=UtilizeAdvice)*;
	public AspectElements getAspectAccess() {
		return pAspect;
	}
	
	public ParserRule getAspectRule() {
		return getAspectAccess().getRule();
	}

	//UtilizeAdvice:
	//	advice=[Advice|QualifiedName] ("(" (parameterAssignments+=Value ("," parameterAssignments+=Value)*)? ")")?;
	public UtilizeAdviceElements getUtilizeAdviceAccess() {
		return pUtilizeAdvice;
	}
	
	public ParserRule getUtilizeAdviceRule() {
		return getUtilizeAdviceAccess().getRule();
	}

	//Advice:
	//	"advice" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" collectors+=Collector* "}";
	public AdviceElements getAdviceAccess() {
		return pAdvice;
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//ParameterDeclaration:
	//	type="type" name=ID;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//Pointcut:
	//	annotation=Annotation? "pointcut" name=ID "class" location=LocationQuery ("operation" method=MethodQuery)?;
	public PointcutElements getPointcutAccess() {
		return pPointcut;
	}
	
	public ParserRule getPointcutRule() {
		return getPointcutAccess().getRule();
	}

	//MethodQuery:
	//	{MethodQuery} modifier=[structure::MethodModifier]? returnType=[structure::Type]? (methodReference=[structure::Method]
	//	("(" parameterQueries+=ParameterQuery ("," parameterQueries+=ParameterQuery)* ")")? | "*");
	public MethodQueryElements getMethodQueryAccess() {
		return pMethodQuery;
	}
	
	public ParserRule getMethodQueryRule() {
		return getMethodQueryAccess().getRule();
	}

	//ParameterQuery:
	//	modifier=[structure::ParameterModifier]? type=[structure::Type] parameter=[structure::Parameter]?;
	public ParameterQueryElements getParameterQueryAccess() {
		return pParameterQuery;
	}
	
	public ParserRule getParameterQueryRule() {
		return getParameterQueryAccess().getRule();
	}

	//LocationQuery:
	//	node=Node ("." specialization=LocationQuery | composition=CompositionQuery)?;
	public LocationQueryElements getLocationQueryAccess() {
		return pLocationQuery;
	}
	
	public ParserRule getLocationQueryRule() {
		return getLocationQueryAccess().getRule();
	}

	//CompositionQuery:
	//	{CompositionQuery} modifier=QueryModifier? "{" subQueries+=LocationQuery* "}";
	public CompositionQueryElements getCompositionQueryAccess() {
		return pCompositionQuery;
	}
	
	public ParserRule getCompositionQueryRule() {
		return getCompositionQueryAccess().getRule();
	}

	//enum QueryModifier:
	//	INCLUDE="include" | EXCLUDE="exclude";
	public QueryModifierElements getQueryModifierAccess() {
		return unknownRuleQueryModifier;
	}
	
	public EnumRule getQueryModifierRule() {
		return getQueryModifierAccess().getRule();
	}

	//Node:
	//	(SubPathNode | WildcardNode | ParentNode | ContainerNode) parameter=ParamQuery?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//ParamQuery:
	//	"[" queries+=ParamOperator+ "]";
	public ParamQueryElements getParamQueryAccess() {
		return pParamQuery;
	}
	
	public ParserRule getParamQueryRule() {
		return getParamQueryAccess().getRule();
	}

	//ParamOperator returns ParamExpression:
	//	ParamCompare ({ParamExpression.left=current} logic=LogicOperator right=ParamCompare)?;
	public ParamOperatorElements getParamOperatorAccess() {
		return pParamOperator;
	}
	
	public ParserRule getParamOperatorRule() {
		return getParamOperatorAccess().getRule();
	}

	//enum LogicOperator:
	//	AND="&&" | OR="||";
	public LogicOperatorElements getLogicOperatorAccess() {
		return unknownRuleLogicOperator;
	}
	
	public EnumRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}

	//ParamCompare returns ParamExpression:
	//	Value ({ParamExpression.left=current} operator=LogicOperator right=Value)?;
	public ParamCompareElements getParamCompareAccess() {
		return pParamCompare;
	}
	
	public ParserRule getParamCompareRule() {
		return getParamCompareAccess().getRule();
	}

	//Value returns ParamExpression:
	//	StringValue | IntValue | FloatValue | ReferenceValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//FloatValue:
	//	value=FLOAT;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//ReferenceValue:
	//	query=LocationQuery? parameter=Parameter;
	public ReferenceValueElements getReferenceValueAccess() {
		return pReferenceValue;
	}
	
	public ParserRule getReferenceValueRule() {
		return getReferenceValueAccess().getRule();
	}

	//Parameter:
	//	RuntimeProperty | ReflectionProperty | InternalFunctionProperty;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//InternalFunctionProperty:
	//	function=InternalFunction;
	public InternalFunctionPropertyElements getInternalFunctionPropertyAccess() {
		return pInternalFunctionProperty;
	}
	
	public ParserRule getInternalFunctionPropertyRule() {
		return getInternalFunctionPropertyAccess().getRule();
	}

	//enum InternalFunction:
	//	TIME="time" | TRACE_ID="traceId" | ORDER_INDEX="orderIndex";
	public InternalFunctionElements getInternalFunctionAccess() {
		return unknownRuleInternalFunction;
	}
	
	public EnumRule getInternalFunctionRule() {
		return getInternalFunctionAccess().getRule();
	}

	//RuntimeProperty:
	//	"#" reference=ID;
	public RuntimePropertyElements getRuntimePropertyAccess() {
		return pRuntimeProperty;
	}
	
	public ParserRule getRuntimePropertyRule() {
		return getRuntimePropertyAccess().getRule();
	}

	//ReflectionProperty:
	//	"$" function=ReflectionFunction;
	public ReflectionPropertyElements getReflectionPropertyAccess() {
		return pReflectionProperty;
	}
	
	public ParserRule getReflectionPropertyRule() {
		return getReflectionPropertyAccess().getRule();
	}

	//enum ReflectionFunction:
	//	NAME="name" | SIGNATURE="signature" | CLASS="classname" | RETURN_TYPE="return-type";
	public ReflectionFunctionElements getReflectionFunctionAccess() {
		return unknownRuleReflectionFunction;
	}
	
	public EnumRule getReflectionFunctionRule() {
		return getReflectionFunctionAccess().getRule();
	}

	//enum Operator:
	//	EQ="=" | LIKE="~" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<=";
	public OperatorElements getOperatorAccess() {
		return unknownRuleOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//ContainerNode:
	//	container=[structure::Container];
	public ContainerNodeElements getContainerNodeAccess() {
		return pContainerNode;
	}
	
	public ParserRule getContainerNodeRule() {
		return getContainerNodeAccess().getRule();
	}

	//WildcardNode:
	//	{WildcardNode} "*";
	public WildcardNodeElements getWildcardNodeAccess() {
		return pWildcardNode;
	}
	
	public ParserRule getWildcardNodeRule() {
		return getWildcardNodeAccess().getRule();
	}

	//SubPathNode:
	//	{SubPathNode} "**";
	public SubPathNodeElements getSubPathNodeAccess() {
		return pSubPathNode;
	}
	
	public ParserRule getSubPathNodeRule() {
		return getSubPathNodeAccess().getRule();
	}

	//ParentNode:
	//	{ParentNode} "<<";
	public ParentNodeElements getParentNodeAccess() {
		return pParentNode;
	}
	
	public ParserRule getParentNodeRule() {
		return getParentNodeAccess().getRule();
	}

	//Collector:
	//	insertionPoint=InsertionPoint events+=Event+;
	public CollectorElements getCollectorAccess() {
		return pCollector;
	}
	
	public ParserRule getCollectorRule() {
		return getCollectorAccess().getRule();
	}

	//Event:
	//	type=[irl::RecordType|QualifiedName] "(" (initializations+=Value ("," initializations+=Value)*)? ")";
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//enum InsertionPoint:
	//	BEFORE="before" | AFTER="after";
	public InsertionPointElements getInsertionPointAccess() {
		return unknownRuleInsertionPoint;
	}
	
	public EnumRule getInsertionPointRule() {
		return getInsertionPointAccess().getRule();
	}

	//// --------------------------
	////
	////   ANNOTATIONS
	////
	//// --------------------------
	//Annotation:
	//	CommentAnnotation | TagAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyBooleanValueAnnotation | KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//ValuedAnnotation returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// e.g.: / ** semantic comment * /
	//CommentAnnotation returns StringAnnotation:
	//	value=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// e.g.: @HVlayout
	//TagAnnotation returns Annotation:
	//	"@" name=ExtendedID ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// e.g.: @layouter dot;   
	//KeyStringValueAnnotation returns StringAnnotation:
	//	"@" name=ExtendedID value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation returns BooleanAnnotation:
	//	"@" name=ExtendedID value=BOOLEAN ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaAnnotations.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation returns IntAnnotation:
	//	"@" name=ExtendedID value=INT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaAnnotations.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation returns FloatAnnotation:
	//	"@" name=ExtendedID value=FLOAT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaAnnotations.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// needed for importing other resources
	//ImportAnnotation:
	//	"import" importURI=STRING;
	public AnnotationsGrammarAccess.ImportAnnotationElements getImportAnnotationAccess() {
		return gaAnnotations.getImportAnnotationAccess();
	}
	
	public ParserRule getImportAnnotationRule() {
		return getImportAnnotationAccess().getRule();
	}

	//// allow strings without quotes as they don'c contain spaces
	//EString returns ecore::EString:
	//	STRING | ID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//ExtendedID returns ecore::EString:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// --------------------------
	////
	////  Terminals...
	////
	//// --------------------------
	//// custom terminals
	//// custom terminal rule introducing semantic comments
	//terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//// modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one 
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	} 

	//// generic terminals
	//terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//// make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EFloatObject:
	//	"-"? NUMBER+ ("." NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? "f"? | "-"? NUMBER+ "f";
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//// introduce boolean values
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//// custom terminal rule for strings
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaAnnotations.getANY_OTHERRule();
	} 
}
