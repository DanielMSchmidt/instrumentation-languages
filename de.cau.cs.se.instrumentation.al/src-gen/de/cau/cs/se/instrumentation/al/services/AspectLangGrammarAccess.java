/*
 * generated by Xtext
 */
package de.cau.cs.se.instrumentation.al.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AspectLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AspectModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.AspectModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cSourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourcesApplicationModelParserRuleCall_3_0 = (RuleCall)cSourcesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAdvicesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAdvicesAdviceParserRuleCall_4_0_0 = (RuleCall)cAdvicesAssignment_4_0.eContents().get(0);
		private final Assignment cPointcutsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPointcutsPointcutParserRuleCall_4_1_0 = (RuleCall)cPointcutsAssignment_4_1.eContents().get(0);
		private final Assignment cAspectsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cAspectsAspectParserRuleCall_4_2_0 = (RuleCall)cAspectsAssignment_4_2.eContents().get(0);
		
		//AspectModel:
		//	'package' name=QualifiedName
		//	imports+=Import*
		//	sources+=ApplicationModel* (advices+=Advice | pointcuts+=Pointcut | aspects+=Aspect)*;
		@Override public ParserRule getRule() { return rule; }

		//'package' name=QualifiedName imports+=Import* sources+=ApplicationModel* (advices+=Advice | pointcuts+=Pointcut |
		//aspects+=Aspect)*
		public Group getGroup() { return cGroup; }

		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//sources+=ApplicationModel*
		public Assignment getSourcesAssignment_3() { return cSourcesAssignment_3; }

		//ApplicationModel
		public RuleCall getSourcesApplicationModelParserRuleCall_3_0() { return cSourcesApplicationModelParserRuleCall_3_0; }

		//(advices+=Advice | pointcuts+=Pointcut | aspects+=Aspect)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//advices+=Advice
		public Assignment getAdvicesAssignment_4_0() { return cAdvicesAssignment_4_0; }

		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_4_0_0() { return cAdvicesAdviceParserRuleCall_4_0_0; }

		//pointcuts+=Pointcut
		public Assignment getPointcutsAssignment_4_1() { return cPointcutsAssignment_4_1; }

		//Pointcut
		public RuleCall getPointcutsPointcutParserRuleCall_4_1_0() { return cPointcutsPointcutParserRuleCall_4_1_0; }

		//aspects+=Aspect
		public Assignment getAspectsAssignment_4_2() { return cAspectsAssignment_4_2; }

		//Aspect
		public RuleCall getAspectsAspectParserRuleCall_4_2_0() { return cAspectsAspectParserRuleCall_4_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ApplicationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ApplicationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHandlerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHandlerIDTerminalRuleCall_1_0 = (RuleCall)cHandlerAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelSTRINGTerminalRuleCall_4_0 = (RuleCall)cModelAssignment_4.eContents().get(0);
		
		//ApplicationModel:
		//	'use' handler=ID 'on' name=ID model=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'use' handler=ID 'on' name=ID model=STRING
		public Group getGroup() { return cGroup; }

		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//handler=ID
		public Assignment getHandlerAssignment_1() { return cHandlerAssignment_1; }

		//ID
		public RuleCall getHandlerIDTerminalRuleCall_1_0() { return cHandlerIDTerminalRuleCall_1_0; }

		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//model=STRING
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }

		//STRING
		public RuleCall getModelSTRINGTerminalRuleCall_4_0() { return cModelSTRINGTerminalRuleCall_4_0; }
	}

	public class AspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Aspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAspectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPointcutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPointcutPointcutCrossReference_1_0 = (CrossReference)cPointcutAssignment_1.eContents().get(0);
		private final RuleCall cPointcutPointcutQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cPointcutPointcutCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAdvicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAdvicesUtilizeAdviceParserRuleCall_3_0 = (RuleCall)cAdvicesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAdvicesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAdvicesUtilizeAdviceParserRuleCall_4_1_0 = (RuleCall)cAdvicesAssignment_4_1.eContents().get(0);
		
		//Aspect:
		//	'aspect' pointcut=[Pointcut|QualifiedName] ':' advices+=UtilizeAdvice (',' advices+=UtilizeAdvice)*;
		@Override public ParserRule getRule() { return rule; }

		//'aspect' pointcut=[Pointcut|QualifiedName] ':' advices+=UtilizeAdvice (',' advices+=UtilizeAdvice)*
		public Group getGroup() { return cGroup; }

		//'aspect'
		public Keyword getAspectKeyword_0() { return cAspectKeyword_0; }

		//pointcut=[Pointcut|QualifiedName]
		public Assignment getPointcutAssignment_1() { return cPointcutAssignment_1; }

		//[Pointcut|QualifiedName]
		public CrossReference getPointcutPointcutCrossReference_1_0() { return cPointcutPointcutCrossReference_1_0; }

		//QualifiedName
		public RuleCall getPointcutPointcutQualifiedNameParserRuleCall_1_0_1() { return cPointcutPointcutQualifiedNameParserRuleCall_1_0_1; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//advices+=UtilizeAdvice
		public Assignment getAdvicesAssignment_3() { return cAdvicesAssignment_3; }

		//UtilizeAdvice
		public RuleCall getAdvicesUtilizeAdviceParserRuleCall_3_0() { return cAdvicesUtilizeAdviceParserRuleCall_3_0; }

		//(',' advices+=UtilizeAdvice)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//advices+=UtilizeAdvice
		public Assignment getAdvicesAssignment_4_1() { return cAdvicesAssignment_4_1; }

		//UtilizeAdvice
		public RuleCall getAdvicesUtilizeAdviceParserRuleCall_4_1_0() { return cAdvicesUtilizeAdviceParserRuleCall_4_1_0; }
	}

	public class UtilizeAdviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.UtilizeAdvice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAdviceAdviceCrossReference_0_0 = (CrossReference)cAdviceAssignment_0.eContents().get(0);
		private final RuleCall cAdviceAdviceQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAdviceAdviceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParameterAssignmentsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParameterAssignmentsValueParserRuleCall_1_1_0_0 = (RuleCall)cParameterAssignmentsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignmentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParameterAssignmentsValueParserRuleCall_1_1_1_1_0 = (RuleCall)cParameterAssignmentsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//UtilizeAdvice:
		//	advice=[Advice|QualifiedName] ('(' (parameterAssignments+=Value (',' parameterAssignments+=Value)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }

		//advice=[Advice|QualifiedName] ('(' (parameterAssignments+=Value (',' parameterAssignments+=Value)*)? ')')?
		public Group getGroup() { return cGroup; }

		//advice=[Advice|QualifiedName]
		public Assignment getAdviceAssignment_0() { return cAdviceAssignment_0; }

		//[Advice|QualifiedName]
		public CrossReference getAdviceAdviceCrossReference_0_0() { return cAdviceAdviceCrossReference_0_0; }

		//QualifiedName
		public RuleCall getAdviceAdviceQualifiedNameParserRuleCall_0_0_1() { return cAdviceAdviceQualifiedNameParserRuleCall_0_0_1; }

		//('(' (parameterAssignments+=Value (',' parameterAssignments+=Value)*)? ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(parameterAssignments+=Value (',' parameterAssignments+=Value)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//parameterAssignments+=Value
		public Assignment getParameterAssignmentsAssignment_1_1_0() { return cParameterAssignmentsAssignment_1_1_0; }

		//Value
		public RuleCall getParameterAssignmentsValueParserRuleCall_1_1_0_0() { return cParameterAssignmentsValueParserRuleCall_1_1_0_0; }

		//(',' parameterAssignments+=Value)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//parameterAssignments+=Value
		public Assignment getParameterAssignmentsAssignment_1_1_1_1() { return cParameterAssignmentsAssignment_1_1_1_1; }

		//Value
		public RuleCall getParameterAssignmentsValueParserRuleCall_1_1_1_1_0() { return cParameterAssignmentsValueParserRuleCall_1_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AdviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Advice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsAdviceParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsAdviceParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCollectorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCollectorsCollectorParserRuleCall_4_0 = (RuleCall)cCollectorsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// * ------------------------------- * / / * advice                          * / Advice:
		//	'advice' name=ID ('(' (parameterDeclarations+=AdviceParameterDeclaration (','
		//	parameterDeclarations+=AdviceParameterDeclaration)*)? ')')? '{'
		//	collectors+=Collector*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'advice' name=ID ('(' (parameterDeclarations+=AdviceParameterDeclaration (','
		//parameterDeclarations+=AdviceParameterDeclaration)*)? ')')? '{' collectors+=Collector* '}'
		public Group getGroup() { return cGroup; }

		//'advice'
		public Keyword getAdviceKeyword_0() { return cAdviceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('(' (parameterDeclarations+=AdviceParameterDeclaration (',' parameterDeclarations+=AdviceParameterDeclaration)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameterDeclarations+=AdviceParameterDeclaration (',' parameterDeclarations+=AdviceParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameterDeclarations+=AdviceParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }

		//AdviceParameterDeclaration
		public RuleCall getParameterDeclarationsAdviceParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsAdviceParameterDeclarationParserRuleCall_2_1_0_0; }

		//(',' parameterDeclarations+=AdviceParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameterDeclarations+=AdviceParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }

		//AdviceParameterDeclaration
		public RuleCall getParameterDeclarationsAdviceParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsAdviceParameterDeclarationParserRuleCall_2_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//collectors+=Collector*
		public Assignment getCollectorsAssignment_4() { return cCollectorsAssignment_4; }

		//Collector
		public RuleCall getCollectorsCollectorParserRuleCall_4_0() { return cCollectorsCollectorParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AdviceParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.AdviceParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeTypeKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AdviceParameterDeclaration:
		//	type='type' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type='type' name=ID
		public Group getGroup() { return cGroup; }

		//type='type'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//'type'
		public Keyword getTypeTypeKeyword_0_0() { return cTypeTypeKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class CollectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Collector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInsertionPointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInsertionPointInsertionPointEnumRuleCall_0_0 = (RuleCall)cInsertionPointAssignment_0.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		
		//Collector:
		//	insertionPoint=InsertionPoint events+=Event+;
		@Override public ParserRule getRule() { return rule; }

		//insertionPoint=InsertionPoint events+=Event+
		public Group getGroup() { return cGroup; }

		//insertionPoint=InsertionPoint
		public Assignment getInsertionPointAssignment_0() { return cInsertionPointAssignment_0; }

		//InsertionPoint
		public RuleCall getInsertionPointInsertionPointEnumRuleCall_0_0() { return cInsertionPointInsertionPointEnumRuleCall_0_0; }

		//events+=Event+
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }

		//Event
		public RuleCall getEventsEventParserRuleCall_1_0() { return cEventsEventParserRuleCall_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeRecordTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeRecordTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeRecordTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInitializationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInitializationsValueParserRuleCall_2_0_0 = (RuleCall)cInitializationsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInitializationsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInitializationsValueParserRuleCall_2_1_1_0 = (RuleCall)cInitializationsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Event:
		//	type=[irl::RecordType|QualifiedName] '(' (initializations+=Value (',' initializations+=Value)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//type=[irl::RecordType|QualifiedName] '(' (initializations+=Value (',' initializations+=Value)*)? ')'
		public Group getGroup() { return cGroup; }

		//type=[irl::RecordType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[irl::RecordType|QualifiedName]
		public CrossReference getTypeRecordTypeCrossReference_0_0() { return cTypeRecordTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeRecordTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeRecordTypeQualifiedNameParserRuleCall_0_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(initializations+=Value (',' initializations+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }

		//initializations+=Value
		public Assignment getInitializationsAssignment_2_0() { return cInitializationsAssignment_2_0; }

		//Value
		public RuleCall getInitializationsValueParserRuleCall_2_0_0() { return cInitializationsValueParserRuleCall_2_0_0; }

		//(',' initializations+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//initializations+=Value
		public Assignment getInitializationsAssignment_2_1_1() { return cInitializationsAssignment_2_1_1; }

		//Value
		public RuleCall getInitializationsValueParserRuleCall_2_1_1_0() { return cInitializationsValueParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	Literal | ReferenceValue;
		@Override public ParserRule getRule() { return rule; }

		//Literal | ReferenceValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//ReferenceValue
		public RuleCall getReferenceValueParserRuleCall_1() { return cReferenceValueParserRuleCall_1; }
	}

	public class ReferenceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ReferenceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQueryLocationQueryParserRuleCall_0_0 = (RuleCall)cQueryAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		
		//ReferenceValue:
		//	query=LocationQuery? property=Property;
		@Override public ParserRule getRule() { return rule; }

		//query=LocationQuery? property=Property
		public Group getGroup() { return cGroup; }

		//query=LocationQuery?
		public Assignment getQueryAssignment_0() { return cQueryAssignment_0; }

		//LocationQuery
		public RuleCall getQueryLocationQueryParserRuleCall_0_0() { return cQueryLocationQueryParserRuleCall_0_0; }

		//property=Property
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_0() { return cPropertyPropertyParserRuleCall_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInternalFunctionPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReflectionPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	InternalFunctionProperty | ReflectionProperty;
		@Override public ParserRule getRule() { return rule; }

		//InternalFunctionProperty | ReflectionProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//InternalFunctionProperty
		public RuleCall getInternalFunctionPropertyParserRuleCall_0() { return cInternalFunctionPropertyParserRuleCall_0; }

		//ReflectionProperty
		public RuleCall getReflectionPropertyParserRuleCall_1() { return cReflectionPropertyParserRuleCall_1; }
	}

	public class InternalFunctionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.InternalFunctionProperty");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionInternalFunctionEnumRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//InternalFunctionProperty:
		//	function=InternalFunction;
		@Override public ParserRule getRule() { return rule; }

		//function=InternalFunction
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }

		//InternalFunction
		public RuleCall getFunctionInternalFunctionEnumRuleCall_0() { return cFunctionInternalFunctionEnumRuleCall_0; }
	}

	public class ReflectionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ReflectionProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionReflectionFunctionEnumRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		
		//ReflectionProperty:
		//	'$' function=ReflectionFunction;
		@Override public ParserRule getRule() { return rule; }

		//'$' function=ReflectionFunction
		public Group getGroup() { return cGroup; }

		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//function=ReflectionFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//ReflectionFunction
		public RuleCall getFunctionReflectionFunctionEnumRuleCall_1_0() { return cFunctionReflectionFunctionEnumRuleCall_1_0; }
	}

	public class PointcutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Pointcut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cPointcutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocationLocationQueryParserRuleCall_4_0 = (RuleCall)cLocationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOperationKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOperationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperationOperationQueryParserRuleCall_5_1_0 = (RuleCall)cOperationAssignment_5_1.eContents().get(0);
		
		/// * ------------------------------- * / / * pointcut                        * / Pointcut:
		//	annotation=Annotation?
		//	'pointcut' name=ID
		//	'class' location=LocationQuery ('operation' operation=OperationQuery)?;
		@Override public ParserRule getRule() { return rule; }

		//annotation=Annotation? 'pointcut' name=ID 'class' location=LocationQuery ('operation' operation=OperationQuery)?
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//'pointcut'
		public Keyword getPointcutKeyword_1() { return cPointcutKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'class'
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }

		//location=LocationQuery
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }

		//LocationQuery
		public RuleCall getLocationLocationQueryParserRuleCall_4_0() { return cLocationLocationQueryParserRuleCall_4_0; }

		//('operation' operation=OperationQuery)?
		public Group getGroup_5() { return cGroup_5; }

		//'operation'
		public Keyword getOperationKeyword_5_0() { return cOperationKeyword_5_0; }

		//operation=OperationQuery
		public Assignment getOperationAssignment_5_1() { return cOperationAssignment_5_1; }

		//OperationQuery
		public RuleCall getOperationOperationQueryParserRuleCall_5_1_0() { return cOperationOperationQueryParserRuleCall_5_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Annotation:
		//	'@' name=ID value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'@' name=ID value=STRING
		public Group getGroup() { return cGroup; }

		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class LocationQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.LocationQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cSpecializationAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSpecializationLocationQueryParserRuleCall_1_0_1_0 = (RuleCall)cSpecializationAssignment_1_0_1.eContents().get(0);
		private final Assignment cCompositionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCompositionCompositionQueryParserRuleCall_1_1_0 = (RuleCall)cCompositionAssignment_1_1.eContents().get(0);
		
		//LocationQuery:
		//	node=Node ('.' specialization=LocationQuery | composition=CompositionQuery)?;
		@Override public ParserRule getRule() { return rule; }

		//node=Node ('.' specialization=LocationQuery | composition=CompositionQuery)?
		public Group getGroup() { return cGroup; }

		//node=Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//Node
		public RuleCall getNodeNodeParserRuleCall_0_0() { return cNodeNodeParserRuleCall_0_0; }

		//('.' specialization=LocationQuery | composition=CompositionQuery)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'.' specialization=LocationQuery
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }

		//specialization=LocationQuery
		public Assignment getSpecializationAssignment_1_0_1() { return cSpecializationAssignment_1_0_1; }

		//LocationQuery
		public RuleCall getSpecializationLocationQueryParserRuleCall_1_0_1_0() { return cSpecializationLocationQueryParserRuleCall_1_0_1_0; }

		//composition=CompositionQuery
		public Assignment getCompositionAssignment_1_1() { return cCompositionAssignment_1_1; }

		//CompositionQuery
		public RuleCall getCompositionCompositionQueryParserRuleCall_1_1_0() { return cCompositionCompositionQueryParserRuleCall_1_1_0; }
	}

	public class CompositionQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.CompositionQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositionQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierQueryModifierEnumRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubQueriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubQueriesLocationQueryParserRuleCall_3_0 = (RuleCall)cSubQueriesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompositionQuery:
		//	{CompositionQuery} modifier=QueryModifier? '{' subQueries+=LocationQuery* '}';
		@Override public ParserRule getRule() { return rule; }

		//{CompositionQuery} modifier=QueryModifier? '{' subQueries+=LocationQuery* '}'
		public Group getGroup() { return cGroup; }

		//{CompositionQuery}
		public Action getCompositionQueryAction_0() { return cCompositionQueryAction_0; }

		//modifier=QueryModifier?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//QueryModifier
		public RuleCall getModifierQueryModifierEnumRuleCall_1_0() { return cModifierQueryModifierEnumRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//subQueries+=LocationQuery*
		public Assignment getSubQueriesAssignment_3() { return cSubQueriesAssignment_3; }

		//LocationQuery
		public RuleCall getSubQueriesLocationQueryParserRuleCall_3_0() { return cSubQueriesLocationQueryParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OperationQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.OperationQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModifierOperationModifierCrossReference_1_0 = (CrossReference)cModifierAssignment_1.eContents().get(0);
		private final RuleCall cModifierOperationModifierIDTerminalRuleCall_1_0_1 = (RuleCall)cModifierOperationModifierCrossReference_1_0.eContents().get(1);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReturnTypeTypeCrossReference_2_0 = (CrossReference)cReturnTypeAssignment_2.eContents().get(0);
		private final RuleCall cReturnTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cReturnTypeTypeCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cOperationReferenceAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cOperationReferenceOperationCrossReference_3_0_0_0 = (CrossReference)cOperationReferenceAssignment_3_0_0.eContents().get(0);
		private final RuleCall cOperationReferenceOperationIDTerminalRuleCall_3_0_0_0_1 = (RuleCall)cOperationReferenceOperationCrossReference_3_0_0_0.eContents().get(1);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cParameterQueriesAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cParameterQueriesParameterQueryParserRuleCall_3_0_1_1_0 = (RuleCall)cParameterQueriesAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_0_1_2 = (Group)cGroup_3_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_1_2_0 = (Keyword)cGroup_3_0_1_2.eContents().get(0);
		private final Assignment cParameterQueriesAssignment_3_0_1_2_1 = (Assignment)cGroup_3_0_1_2.eContents().get(1);
		private final RuleCall cParameterQueriesParameterQueryParserRuleCall_3_0_1_2_1_0 = (RuleCall)cParameterQueriesAssignment_3_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_1_3 = (Keyword)cGroup_3_0_1.eContents().get(3);
		private final Keyword cAsteriskKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//OperationQuery:
		//	{OperationQuery} modifier=[mapping::OperationModifier]?
		//	returnType=[mapping::Type]? (operationReference=[mapping::Operation] ('(' parameterQueries+=ParameterQuery (','
		//	parameterQueries+=ParameterQuery)* ')')?
		//	|
		//	'*');
		@Override public ParserRule getRule() { return rule; }

		//{OperationQuery} modifier=[mapping::OperationModifier]? returnType=[mapping::Type]?
		//(operationReference=[mapping::Operation] ('(' parameterQueries+=ParameterQuery (',' parameterQueries+=ParameterQuery)*
		//')')? | '*')
		public Group getGroup() { return cGroup; }

		//{OperationQuery}
		public Action getOperationQueryAction_0() { return cOperationQueryAction_0; }

		//modifier=[mapping::OperationModifier]?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//[mapping::OperationModifier]
		public CrossReference getModifierOperationModifierCrossReference_1_0() { return cModifierOperationModifierCrossReference_1_0; }

		//ID
		public RuleCall getModifierOperationModifierIDTerminalRuleCall_1_0_1() { return cModifierOperationModifierIDTerminalRuleCall_1_0_1; }

		//returnType=[mapping::Type]?
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//[mapping::Type]
		public CrossReference getReturnTypeTypeCrossReference_2_0() { return cReturnTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getReturnTypeTypeIDTerminalRuleCall_2_0_1() { return cReturnTypeTypeIDTerminalRuleCall_2_0_1; }

		//(operationReference=[mapping::Operation] ('(' parameterQueries+=ParameterQuery (',' parameterQueries+=ParameterQuery)*
		//')')? | '*')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//operationReference=[mapping::Operation] ('(' parameterQueries+=ParameterQuery (',' parameterQueries+=ParameterQuery)*
		//')')?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//operationReference=[mapping::Operation]
		public Assignment getOperationReferenceAssignment_3_0_0() { return cOperationReferenceAssignment_3_0_0; }

		//[mapping::Operation]
		public CrossReference getOperationReferenceOperationCrossReference_3_0_0_0() { return cOperationReferenceOperationCrossReference_3_0_0_0; }

		//ID
		public RuleCall getOperationReferenceOperationIDTerminalRuleCall_3_0_0_0_1() { return cOperationReferenceOperationIDTerminalRuleCall_3_0_0_0_1; }

		//('(' parameterQueries+=ParameterQuery (',' parameterQueries+=ParameterQuery)* ')')?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_0_1_0() { return cLeftParenthesisKeyword_3_0_1_0; }

		//parameterQueries+=ParameterQuery
		public Assignment getParameterQueriesAssignment_3_0_1_1() { return cParameterQueriesAssignment_3_0_1_1; }

		//ParameterQuery
		public RuleCall getParameterQueriesParameterQueryParserRuleCall_3_0_1_1_0() { return cParameterQueriesParameterQueryParserRuleCall_3_0_1_1_0; }

		//(',' parameterQueries+=ParameterQuery)*
		public Group getGroup_3_0_1_2() { return cGroup_3_0_1_2; }

		//','
		public Keyword getCommaKeyword_3_0_1_2_0() { return cCommaKeyword_3_0_1_2_0; }

		//parameterQueries+=ParameterQuery
		public Assignment getParameterQueriesAssignment_3_0_1_2_1() { return cParameterQueriesAssignment_3_0_1_2_1; }

		//ParameterQuery
		public RuleCall getParameterQueriesParameterQueryParserRuleCall_3_0_1_2_1_0() { return cParameterQueriesParameterQueryParserRuleCall_3_0_1_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_0_1_3() { return cRightParenthesisKeyword_3_0_1_3; }

		//'*'
		public Keyword getAsteriskKeyword_3_1() { return cAsteriskKeyword_3_1; }
	}

	public class ParameterQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ParameterQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModifierParameterModifierCrossReference_1_0 = (CrossReference)cModifierAssignment_1.eContents().get(0);
		private final RuleCall cModifierParameterModifierIDTerminalRuleCall_1_0_1 = (RuleCall)cModifierParameterModifierCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_2_0_0 = (CrossReference)cTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_0_1 = (RuleCall)cTypeTypeCrossReference_2_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParameterParameterCrossReference_3_0 = (CrossReference)cParameterAssignment_3.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_3_0_1 = (RuleCall)cParameterParameterCrossReference_3_0.eContents().get(1);
		
		//ParameterQuery:
		//	{ParameterQuery} modifier=[mapping::ParameterModifier]? (type=[mapping::Type] | '*') parameter=[mapping::Parameter]?;
		@Override public ParserRule getRule() { return rule; }

		//{ParameterQuery} modifier=[mapping::ParameterModifier]? (type=[mapping::Type] | '*') parameter=[mapping::Parameter]?
		public Group getGroup() { return cGroup; }

		//{ParameterQuery}
		public Action getParameterQueryAction_0() { return cParameterQueryAction_0; }

		//modifier=[mapping::ParameterModifier]?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//[mapping::ParameterModifier]
		public CrossReference getModifierParameterModifierCrossReference_1_0() { return cModifierParameterModifierCrossReference_1_0; }

		//ID
		public RuleCall getModifierParameterModifierIDTerminalRuleCall_1_0_1() { return cModifierParameterModifierIDTerminalRuleCall_1_0_1; }

		//(type=[mapping::Type] | '*')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=[mapping::Type]
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//[mapping::Type]
		public CrossReference getTypeTypeCrossReference_2_0_0() { return cTypeTypeCrossReference_2_0_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_0_1; }

		//'*'
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }

		//// this must be fixed for collections
		//parameter=[mapping::Parameter]?
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }

		//[mapping::Parameter]
		public CrossReference getParameterParameterCrossReference_3_0() { return cParameterParameterCrossReference_3_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_3_0_1() { return cParameterParameterIDTerminalRuleCall_3_0_1; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSubPathNodeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cWildcardNodeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cParentNodeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cContainerNodeParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstraintAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintPropertyConstraintParserRuleCall_1_1_0 = (RuleCall)cConstraintAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Node:
		//	(SubPathNode | WildcardNode | ParentNode | ContainerNode) ('[' constraint=PropertyConstraint ']')?;
		@Override public ParserRule getRule() { return rule; }

		//(SubPathNode | WildcardNode | ParentNode | ContainerNode) ('[' constraint=PropertyConstraint ']')?
		public Group getGroup() { return cGroup; }

		//(SubPathNode | WildcardNode | ParentNode | ContainerNode)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SubPathNode
		public RuleCall getSubPathNodeParserRuleCall_0_0() { return cSubPathNodeParserRuleCall_0_0; }

		//WildcardNode
		public RuleCall getWildcardNodeParserRuleCall_0_1() { return cWildcardNodeParserRuleCall_0_1; }

		//ParentNode
		public RuleCall getParentNodeParserRuleCall_0_2() { return cParentNodeParserRuleCall_0_2; }

		//ContainerNode
		public RuleCall getContainerNodeParserRuleCall_0_3() { return cContainerNodeParserRuleCall_0_3; }

		//('[' constraint=PropertyConstraint ']')?
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//constraint=PropertyConstraint
		public Assignment getConstraintAssignment_1_1() { return cConstraintAssignment_1_1; }

		//PropertyConstraint
		public RuleCall getConstraintPropertyConstraintParserRuleCall_1_1_0() { return cConstraintPropertyConstraintParserRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class ContainerNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ContainerNode");
		private final Assignment cContainerAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cContainerContainerCrossReference_0 = (CrossReference)cContainerAssignment.eContents().get(0);
		private final RuleCall cContainerContainerIDTerminalRuleCall_0_1 = (RuleCall)cContainerContainerCrossReference_0.eContents().get(1);
		
		//ContainerNode:
		//	container=[mapping::Container];
		@Override public ParserRule getRule() { return rule; }

		//container=[mapping::Container]
		public Assignment getContainerAssignment() { return cContainerAssignment; }

		//[mapping::Container]
		public CrossReference getContainerContainerCrossReference_0() { return cContainerContainerCrossReference_0; }

		//ID
		public RuleCall getContainerContainerIDTerminalRuleCall_0_1() { return cContainerContainerIDTerminalRuleCall_0_1; }
	}

	public class WildcardNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.WildcardNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WildcardNode:
		//	{WildcardNode}
		//	'*';
		@Override public ParserRule getRule() { return rule; }

		//{WildcardNode} '*'
		public Group getGroup() { return cGroup; }

		//{WildcardNode}
		public Action getWildcardNodeAction_0() { return cWildcardNodeAction_0; }

		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class SubPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.SubPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubPathNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SubPathNode:
		//	{SubPathNode}
		//	'**';
		@Override public ParserRule getRule() { return rule; }

		//{SubPathNode} '**'
		public Group getGroup() { return cGroup; }

		//{SubPathNode}
		public Action getSubPathNodeAction_0() { return cSubPathNodeAction_0; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
	}

	public class ParentNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ParentNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParentNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParentNode:
		//	{ParentNode}
		//	'up';
		@Override public ParserRule getRule() { return rule; }

		//{ParentNode} 'up'
		public Group getGroup() { return cGroup; }

		//{ParentNode}
		public Action getParentNodeAction_0() { return cParentNodeAction_0; }

		//'up'
		public Keyword getUpKeyword_1() { return cUpKeyword_1; }
	}

	public class PropertyConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.PropertyConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyConstraintCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPropertyConstraintExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLogicAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLogicLogicOperatorEnumRuleCall_1_1_0 = (RuleCall)cLogicAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPropertyConstraintCompareParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PropertyConstraint PropertyConstraintExpression:
		//	PropertyConstraintCompare ({PropertyConstraintExpression.left=current} logic=LogicOperator
		//	right=PropertyConstraintCompare)?
		@Override public ParserRule getRule() { return rule; }

		//PropertyConstraintCompare ({PropertyConstraintExpression.left=current} logic=LogicOperator
		//right=PropertyConstraintCompare)?
		public Group getGroup() { return cGroup; }

		//PropertyConstraintCompare
		public RuleCall getPropertyConstraintCompareParserRuleCall_0() { return cPropertyConstraintCompareParserRuleCall_0; }

		//({PropertyConstraintExpression.left=current} logic=LogicOperator right=PropertyConstraintCompare)?
		public Group getGroup_1() { return cGroup_1; }

		//{PropertyConstraintExpression.left=current}
		public Action getPropertyConstraintExpressionLeftAction_1_0() { return cPropertyConstraintExpressionLeftAction_1_0; }

		//logic=LogicOperator
		public Assignment getLogicAssignment_1_1() { return cLogicAssignment_1_1; }

		//LogicOperator
		public RuleCall getLogicLogicOperatorEnumRuleCall_1_1_0() { return cLogicLogicOperatorEnumRuleCall_1_1_0; }

		//right=PropertyConstraintCompare
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PropertyConstraintCompare
		public RuleCall getRightPropertyConstraintCompareParserRuleCall_1_2_0() { return cRightPropertyConstraintCompareParserRuleCall_1_2_0; }
	}

	public class PropertyConstraintCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.PropertyConstraintCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstraintElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPropertyConstraintExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cCompareAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompareCompareOperatorEnumRuleCall_1_1_0 = (RuleCall)cCompareAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConstraintElementParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PropertyConstraintCompare PropertyConstraintExpression:
		//	ConstraintElement ({PropertyConstraintExpression.left=current} compare=CompareOperator right=ConstraintElement)?
		@Override public ParserRule getRule() { return rule; }

		//ConstraintElement ({PropertyConstraintExpression.left=current} compare=CompareOperator right=ConstraintElement)?
		public Group getGroup() { return cGroup; }

		//ConstraintElement
		public RuleCall getConstraintElementParserRuleCall_0() { return cConstraintElementParserRuleCall_0; }

		//({PropertyConstraintExpression.left=current} compare=CompareOperator right=ConstraintElement)?
		public Group getGroup_1() { return cGroup_1; }

		//{PropertyConstraintExpression.left=current}
		public Action getPropertyConstraintExpressionLeftAction_1_0() { return cPropertyConstraintExpressionLeftAction_1_0; }

		//compare=CompareOperator
		public Assignment getCompareAssignment_1_1() { return cCompareAssignment_1_1; }

		//CompareOperator
		public RuleCall getCompareCompareOperatorEnumRuleCall_1_1_0() { return cCompareCompareOperatorEnumRuleCall_1_1_0; }

		//right=ConstraintElement
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ConstraintElement
		public RuleCall getRightConstraintElementParserRuleCall_1_2_0() { return cRightConstraintElementParserRuleCall_1_2_0; }
	}

	public class ConstraintElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ConstraintElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintElement:
		//	Literal | LocalQuery;
		@Override public ParserRule getRule() { return rule; }

		//Literal | LocalQuery
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//LocalQuery
		public RuleCall getLocalQueryParserRuleCall_1() { return cLocalQueryParserRuleCall_1; }
	}

	public class LocalQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.LocalQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationQueryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationQueryLocationQueryParserRuleCall_0_0 = (RuleCall)cLocationQueryAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPropertyModelPropertyParserRuleCall_1_0_0 = (RuleCall)cPropertyAssignment_1_0.eContents().get(0);
		private final Assignment cTypeofAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeofTypeofParserRuleCall_1_1_0 = (RuleCall)cTypeofAssignment_1_1.eContents().get(0);
		
		//LocalQuery:
		//	locationQuery=LocationQuery? (property=ModelProperty | typeof=Typeof);
		@Override public ParserRule getRule() { return rule; }

		//locationQuery=LocationQuery? (property=ModelProperty | typeof=Typeof)
		public Group getGroup() { return cGroup; }

		//locationQuery=LocationQuery?
		public Assignment getLocationQueryAssignment_0() { return cLocationQueryAssignment_0; }

		//LocationQuery
		public RuleCall getLocationQueryLocationQueryParserRuleCall_0_0() { return cLocationQueryLocationQueryParserRuleCall_0_0; }

		//(property=ModelProperty | typeof=Typeof)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//property=ModelProperty
		public Assignment getPropertyAssignment_1_0() { return cPropertyAssignment_1_0; }

		//ModelProperty
		public RuleCall getPropertyModelPropertyParserRuleCall_1_0_0() { return cPropertyModelPropertyParserRuleCall_1_0_0; }

		//typeof=Typeof
		public Assignment getTypeofAssignment_1_1() { return cTypeofAssignment_1_1; }

		//Typeof
		public RuleCall getTypeofTypeofParserRuleCall_1_1_0() { return cTypeofTypeofParserRuleCall_1_1_0; }
	}

	public class ModelPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ModelProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceFeatureCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceFeatureCrossReference_1_0.eContents().get(1);
		
		//ModelProperty:
		//	'#' reference=[mapping::Feature];
		@Override public ParserRule getRule() { return rule; }

		//'#' reference=[mapping::Feature]
		public Group getGroup() { return cGroup; }

		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//reference=[mapping::Feature]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[mapping::Feature]
		public CrossReference getReferenceFeatureCrossReference_1_0() { return cReferenceFeatureCrossReference_1_0; }

		//ID
		public RuleCall getReferenceFeatureIDTerminalRuleCall_1_0_1() { return cReferenceFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class TypeofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Typeof");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIstypeofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferenceNamedTypeCrossReference_2_0 = (CrossReference)cReferenceAssignment_2.eContents().get(0);
		private final RuleCall cReferenceNamedTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cReferenceNamedTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Typeof:
		//	'istypeof' '(' reference=[mapping::NamedType] ')' // should be replaced with generate type reference rule
		//;
		@Override public ParserRule getRule() { return rule; }

		//'istypeof' '(' reference=[mapping::NamedType] ')'
		public Group getGroup() { return cGroup; }

		//'istypeof'
		public Keyword getIstypeofKeyword_0() { return cIstypeofKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//reference=[mapping::NamedType]
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//[mapping::NamedType]
		public CrossReference getReferenceNamedTypeCrossReference_2_0() { return cReferenceNamedTypeCrossReference_2_0; }

		//ID
		public RuleCall getReferenceNamedTypeIDTerminalRuleCall_2_0_1() { return cReferenceNamedTypeIDTerminalRuleCall_2_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// * ------------------------------- * / / * literals                        * / Literal:
		//	StringLiteral | IntLiteral | FloatLiteral;
		@Override public ParserRule getRule() { return rule; }

		//StringLiteral | IntLiteral | FloatLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_2() { return cFloatLiteralParserRuleCall_2; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.FloatLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatLiteral:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * ------------------------------- * / / * Terminals and literal rules     * / QualifiedName:
		//	ID (=> '.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID (=> '.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> '.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ('.' '*')?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	public class InsertionPointElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.InsertionPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBEFOREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBEFOREBeforeKeyword_0_0 = (Keyword)cBEFOREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAFTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAFTERAfterKeyword_1_0 = (Keyword)cAFTEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InsertionPoint:
		//	BEFORE='before' |
		//	AFTER='after';
		public EnumRule getRule() { return rule; }

		//BEFORE='before' | AFTER='after'
		public Alternatives getAlternatives() { return cAlternatives; }

		//BEFORE='before'
		public EnumLiteralDeclaration getBEFOREEnumLiteralDeclaration_0() { return cBEFOREEnumLiteralDeclaration_0; }

		//'before'
		public Keyword getBEFOREBeforeKeyword_0_0() { return cBEFOREBeforeKeyword_0_0; }

		//AFTER='after'
		public EnumLiteralDeclaration getAFTEREnumLiteralDeclaration_1() { return cAFTEREnumLiteralDeclaration_1; }

		//'after'
		public Keyword getAFTERAfterKeyword_1_0() { return cAFTERAfterKeyword_1_0; }
	}

	public class InternalFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.InternalFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTIMETimeKeyword_0_0 = (Keyword)cTIMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRACE_IDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRACE_IDTraceIdKeyword_1_0 = (Keyword)cTRACE_IDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cORDER_INDEXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cORDER_INDEXOrderIndexKeyword_2_0 = (Keyword)cORDER_INDEXEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InternalFunction:
		//	TIME='time' |
		//	TRACE_ID='traceId' |
		//	ORDER_INDEX='orderIndex';
		public EnumRule getRule() { return rule; }

		//TIME='time' | TRACE_ID='traceId' | ORDER_INDEX='orderIndex'
		public Alternatives getAlternatives() { return cAlternatives; }

		//TIME='time'
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_0() { return cTIMEEnumLiteralDeclaration_0; }

		//'time'
		public Keyword getTIMETimeKeyword_0_0() { return cTIMETimeKeyword_0_0; }

		//TRACE_ID='traceId'
		public EnumLiteralDeclaration getTRACE_IDEnumLiteralDeclaration_1() { return cTRACE_IDEnumLiteralDeclaration_1; }

		//'traceId'
		public Keyword getTRACE_IDTraceIdKeyword_1_0() { return cTRACE_IDTraceIdKeyword_1_0; }

		//ORDER_INDEX='orderIndex'
		public EnumLiteralDeclaration getORDER_INDEXEnumLiteralDeclaration_2() { return cORDER_INDEXEnumLiteralDeclaration_2; }

		//'orderIndex'
		public Keyword getORDER_INDEXOrderIndexKeyword_2_0() { return cORDER_INDEXOrderIndexKeyword_2_0; }
	}

	public class ReflectionFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.ReflectionFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNAMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNAMENameKeyword_0_0 = (Keyword)cNAMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNATUREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSIGNATURESignatureKeyword_1_0 = (Keyword)cSIGNATUREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLASSClassnameKeyword_2_0 = (Keyword)cCLASSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRETURN_TYPEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRETURN_TYPEReturnTypeKeyword_3_0 = (Keyword)cRETURN_TYPEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ReflectionFunction:
		//	NAME='name' |
		//	SIGNATURE='signature' |
		//	CLASS='classname' |
		//	RETURN_TYPE='return-type';
		public EnumRule getRule() { return rule; }

		//NAME='name' | SIGNATURE='signature' | CLASS='classname' | RETURN_TYPE='return-type'
		public Alternatives getAlternatives() { return cAlternatives; }

		//NAME='name'
		public EnumLiteralDeclaration getNAMEEnumLiteralDeclaration_0() { return cNAMEEnumLiteralDeclaration_0; }

		//'name'
		public Keyword getNAMENameKeyword_0_0() { return cNAMENameKeyword_0_0; }

		//SIGNATURE='signature'
		public EnumLiteralDeclaration getSIGNATUREEnumLiteralDeclaration_1() { return cSIGNATUREEnumLiteralDeclaration_1; }

		//'signature'
		public Keyword getSIGNATURESignatureKeyword_1_0() { return cSIGNATURESignatureKeyword_1_0; }

		//CLASS='classname'
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_2() { return cCLASSEnumLiteralDeclaration_2; }

		//'classname'
		public Keyword getCLASSClassnameKeyword_2_0() { return cCLASSClassnameKeyword_2_0; }

		//RETURN_TYPE='return-type'
		public EnumLiteralDeclaration getRETURN_TYPEEnumLiteralDeclaration_3() { return cRETURN_TYPEEnumLiteralDeclaration_3; }

		//'return-type'
		public Keyword getRETURN_TYPEReturnTypeKeyword_3_0() { return cRETURN_TYPEReturnTypeKeyword_3_0; }
	}

	public class QueryModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.QueryModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCLUDEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCLUDEIncludeKeyword_0_0 = (Keyword)cINCLUDEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXCLUDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXCLUDEExcludeKeyword_1_0 = (Keyword)cEXCLUDEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum QueryModifier:
		//	INCLUDE='include' |
		//	EXCLUDE='exclude';
		public EnumRule getRule() { return rule; }

		//INCLUDE='include' | EXCLUDE='exclude'
		public Alternatives getAlternatives() { return cAlternatives; }

		//INCLUDE='include'
		public EnumLiteralDeclaration getINCLUDEEnumLiteralDeclaration_0() { return cINCLUDEEnumLiteralDeclaration_0; }

		//'include'
		public Keyword getINCLUDEIncludeKeyword_0_0() { return cINCLUDEIncludeKeyword_0_0; }

		//EXCLUDE='exclude'
		public EnumLiteralDeclaration getEXCLUDEEnumLiteralDeclaration_1() { return cEXCLUDEEnumLiteralDeclaration_1; }

		//'exclude'
		public Keyword getEXCLUDEExcludeKeyword_1_0() { return cEXCLUDEExcludeKeyword_1_0; }
	}

	public class LogicOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOperator:
		//	AND='&&' |
		//	OR='||';
		public EnumRule getRule() { return rule; }

		//AND='&&' | OR='||'
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND='&&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//'&&'
		public Keyword getANDAmpersandAmpersandKeyword_0_0() { return cANDAmpersandAmpersandKeyword_0_0; }

		//OR='||'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//'||'
		public Keyword getORVerticalLineVerticalLineKeyword_1_0() { return cORVerticalLineVerticalLineKeyword_1_0; }
	}

	public class CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLIKEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLIKETildeKeyword_1_0 = (Keyword)cLIKEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_2_0 = (Keyword)cNEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGRGreaterThanSignKeyword_3_0 = (Keyword)cGREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLWLessThanSignKeyword_4_0 = (Keyword)cLWEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLELessThanSignEqualsSignKeyword_6_0 = (Keyword)cLEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum CompareOperator:
		//	EQ='=' |
		//	LIKE='~' |
		//	NE='!=' |
		//	GR='>' |
		//	LW='<' |
		//	GE='>=' |
		//	LE='<=';
		public EnumRule getRule() { return rule; }

		//EQ='=' | LIKE='~' | NE='!=' | GR='>' | LW='<' | GE='>=' | LE='<='
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ='='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//'='
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//LIKE='~'
		public EnumLiteralDeclaration getLIKEEnumLiteralDeclaration_1() { return cLIKEEnumLiteralDeclaration_1; }

		//'~'
		public Keyword getLIKETildeKeyword_1_0() { return cLIKETildeKeyword_1_0; }

		//NE='!='
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_2() { return cNEEnumLiteralDeclaration_2; }

		//'!='
		public Keyword getNEExclamationMarkEqualsSignKeyword_2_0() { return cNEExclamationMarkEqualsSignKeyword_2_0; }

		//GR='>'
		public EnumLiteralDeclaration getGREnumLiteralDeclaration_3() { return cGREnumLiteralDeclaration_3; }

		//'>'
		public Keyword getGRGreaterThanSignKeyword_3_0() { return cGRGreaterThanSignKeyword_3_0; }

		//LW='<'
		public EnumLiteralDeclaration getLWEnumLiteralDeclaration_4() { return cLWEnumLiteralDeclaration_4; }

		//'<'
		public Keyword getLWLessThanSignKeyword_4_0() { return cLWLessThanSignKeyword_4_0; }

		//GE='>='
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_5() { return cGEEnumLiteralDeclaration_5; }

		//'>='
		public Keyword getGEGreaterThanSignEqualsSignKeyword_5_0() { return cGEGreaterThanSignEqualsSignKeyword_5_0; }

		//LE='<='
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_6() { return cLEEnumLiteralDeclaration_6; }

		//'<='
		public Keyword getLELessThanSignEqualsSignKeyword_6_0() { return cLELessThanSignEqualsSignKeyword_6_0; }
	}
	
	private final AspectModelElements pAspectModel;
	private final ImportElements pImport;
	private final ApplicationModelElements pApplicationModel;
	private final AspectElements pAspect;
	private final UtilizeAdviceElements pUtilizeAdvice;
	private final AdviceElements pAdvice;
	private final AdviceParameterDeclarationElements pAdviceParameterDeclaration;
	private final CollectorElements pCollector;
	private final EventElements pEvent;
	private final InsertionPointElements eInsertionPoint;
	private final ValueElements pValue;
	private final ReferenceValueElements pReferenceValue;
	private final PropertyElements pProperty;
	private final InternalFunctionPropertyElements pInternalFunctionProperty;
	private final InternalFunctionElements eInternalFunction;
	private final ReflectionPropertyElements pReflectionProperty;
	private final ReflectionFunctionElements eReflectionFunction;
	private final PointcutElements pPointcut;
	private final AnnotationElements pAnnotation;
	private final LocationQueryElements pLocationQuery;
	private final CompositionQueryElements pCompositionQuery;
	private final QueryModifierElements eQueryModifier;
	private final OperationQueryElements pOperationQuery;
	private final ParameterQueryElements pParameterQuery;
	private final NodeElements pNode;
	private final ContainerNodeElements pContainerNode;
	private final WildcardNodeElements pWildcardNode;
	private final SubPathNodeElements pSubPathNode;
	private final ParentNodeElements pParentNode;
	private final PropertyConstraintElements pPropertyConstraint;
	private final LogicOperatorElements eLogicOperator;
	private final PropertyConstraintCompareElements pPropertyConstraintCompare;
	private final CompareOperatorElements eCompareOperator;
	private final ConstraintElementElements pConstraintElement;
	private final LocalQueryElements pLocalQuery;
	private final ModelPropertyElements pModelProperty;
	private final TypeofElements pTypeof;
	private final LiteralElements pLiteral;
	private final FloatLiteralElements pFloatLiteral;
	private final IntLiteralElements pIntLiteral;
	private final StringLiteralElements pStringLiteral;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TerminalRule tFLOAT;
	private final TerminalRule tNUMBER;
	private final TerminalRule tINT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AspectLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAspectModel = new AspectModelElements();
		this.pImport = new ImportElements();
		this.pApplicationModel = new ApplicationModelElements();
		this.pAspect = new AspectElements();
		this.pUtilizeAdvice = new UtilizeAdviceElements();
		this.pAdvice = new AdviceElements();
		this.pAdviceParameterDeclaration = new AdviceParameterDeclarationElements();
		this.pCollector = new CollectorElements();
		this.pEvent = new EventElements();
		this.eInsertionPoint = new InsertionPointElements();
		this.pValue = new ValueElements();
		this.pReferenceValue = new ReferenceValueElements();
		this.pProperty = new PropertyElements();
		this.pInternalFunctionProperty = new InternalFunctionPropertyElements();
		this.eInternalFunction = new InternalFunctionElements();
		this.pReflectionProperty = new ReflectionPropertyElements();
		this.eReflectionFunction = new ReflectionFunctionElements();
		this.pPointcut = new PointcutElements();
		this.pAnnotation = new AnnotationElements();
		this.pLocationQuery = new LocationQueryElements();
		this.pCompositionQuery = new CompositionQueryElements();
		this.eQueryModifier = new QueryModifierElements();
		this.pOperationQuery = new OperationQueryElements();
		this.pParameterQuery = new ParameterQueryElements();
		this.pNode = new NodeElements();
		this.pContainerNode = new ContainerNodeElements();
		this.pWildcardNode = new WildcardNodeElements();
		this.pSubPathNode = new SubPathNodeElements();
		this.pParentNode = new ParentNodeElements();
		this.pPropertyConstraint = new PropertyConstraintElements();
		this.eLogicOperator = new LogicOperatorElements();
		this.pPropertyConstraintCompare = new PropertyConstraintCompareElements();
		this.eCompareOperator = new CompareOperatorElements();
		this.pConstraintElement = new ConstraintElementElements();
		this.pLocalQuery = new LocalQueryElements();
		this.pModelProperty = new ModelPropertyElements();
		this.pTypeof = new TypeofElements();
		this.pLiteral = new LiteralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.FLOAT");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.NUMBER");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.instrumentation.al.AspectLang.INT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.instrumentation.al.AspectLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AspectModel:
	//	'package' name=QualifiedName
	//	imports+=Import*
	//	sources+=ApplicationModel* (advices+=Advice | pointcuts+=Pointcut | aspects+=Aspect)*;
	public AspectModelElements getAspectModelAccess() {
		return pAspectModel;
	}
	
	public ParserRule getAspectModelRule() {
		return getAspectModelAccess().getRule();
	}

	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ApplicationModel:
	//	'use' handler=ID 'on' name=ID model=STRING;
	public ApplicationModelElements getApplicationModelAccess() {
		return pApplicationModel;
	}
	
	public ParserRule getApplicationModelRule() {
		return getApplicationModelAccess().getRule();
	}

	//Aspect:
	//	'aspect' pointcut=[Pointcut|QualifiedName] ':' advices+=UtilizeAdvice (',' advices+=UtilizeAdvice)*;
	public AspectElements getAspectAccess() {
		return pAspect;
	}
	
	public ParserRule getAspectRule() {
		return getAspectAccess().getRule();
	}

	//UtilizeAdvice:
	//	advice=[Advice|QualifiedName] ('(' (parameterAssignments+=Value (',' parameterAssignments+=Value)*)? ')')?;
	public UtilizeAdviceElements getUtilizeAdviceAccess() {
		return pUtilizeAdvice;
	}
	
	public ParserRule getUtilizeAdviceRule() {
		return getUtilizeAdviceAccess().getRule();
	}

	/// * ------------------------------- * / / * advice                          * / Advice:
	//	'advice' name=ID ('(' (parameterDeclarations+=AdviceParameterDeclaration (','
	//	parameterDeclarations+=AdviceParameterDeclaration)*)? ')')? '{'
	//	collectors+=Collector*
	//	'}';
	public AdviceElements getAdviceAccess() {
		return pAdvice;
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//AdviceParameterDeclaration:
	//	type='type' name=ID;
	public AdviceParameterDeclarationElements getAdviceParameterDeclarationAccess() {
		return pAdviceParameterDeclaration;
	}
	
	public ParserRule getAdviceParameterDeclarationRule() {
		return getAdviceParameterDeclarationAccess().getRule();
	}

	//Collector:
	//	insertionPoint=InsertionPoint events+=Event+;
	public CollectorElements getCollectorAccess() {
		return pCollector;
	}
	
	public ParserRule getCollectorRule() {
		return getCollectorAccess().getRule();
	}

	//Event:
	//	type=[irl::RecordType|QualifiedName] '(' (initializations+=Value (',' initializations+=Value)*)? ')';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//enum InsertionPoint:
	//	BEFORE='before' |
	//	AFTER='after';
	public InsertionPointElements getInsertionPointAccess() {
		return eInsertionPoint;
	}
	
	public EnumRule getInsertionPointRule() {
		return getInsertionPointAccess().getRule();
	}

	//Value:
	//	Literal | ReferenceValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ReferenceValue:
	//	query=LocationQuery? property=Property;
	public ReferenceValueElements getReferenceValueAccess() {
		return pReferenceValue;
	}
	
	public ParserRule getReferenceValueRule() {
		return getReferenceValueAccess().getRule();
	}

	//Property:
	//	InternalFunctionProperty | ReflectionProperty;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//InternalFunctionProperty:
	//	function=InternalFunction;
	public InternalFunctionPropertyElements getInternalFunctionPropertyAccess() {
		return pInternalFunctionProperty;
	}
	
	public ParserRule getInternalFunctionPropertyRule() {
		return getInternalFunctionPropertyAccess().getRule();
	}

	//enum InternalFunction:
	//	TIME='time' |
	//	TRACE_ID='traceId' |
	//	ORDER_INDEX='orderIndex';
	public InternalFunctionElements getInternalFunctionAccess() {
		return eInternalFunction;
	}
	
	public EnumRule getInternalFunctionRule() {
		return getInternalFunctionAccess().getRule();
	}

	//ReflectionProperty:
	//	'$' function=ReflectionFunction;
	public ReflectionPropertyElements getReflectionPropertyAccess() {
		return pReflectionProperty;
	}
	
	public ParserRule getReflectionPropertyRule() {
		return getReflectionPropertyAccess().getRule();
	}

	//enum ReflectionFunction:
	//	NAME='name' |
	//	SIGNATURE='signature' |
	//	CLASS='classname' |
	//	RETURN_TYPE='return-type';
	public ReflectionFunctionElements getReflectionFunctionAccess() {
		return eReflectionFunction;
	}
	
	public EnumRule getReflectionFunctionRule() {
		return getReflectionFunctionAccess().getRule();
	}

	/// * ------------------------------- * / / * pointcut                        * / Pointcut:
	//	annotation=Annotation?
	//	'pointcut' name=ID
	//	'class' location=LocationQuery ('operation' operation=OperationQuery)?;
	public PointcutElements getPointcutAccess() {
		return pPointcut;
	}
	
	public ParserRule getPointcutRule() {
		return getPointcutAccess().getRule();
	}

	//Annotation:
	//	'@' name=ID value=STRING;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//LocationQuery:
	//	node=Node ('.' specialization=LocationQuery | composition=CompositionQuery)?;
	public LocationQueryElements getLocationQueryAccess() {
		return pLocationQuery;
	}
	
	public ParserRule getLocationQueryRule() {
		return getLocationQueryAccess().getRule();
	}

	//CompositionQuery:
	//	{CompositionQuery} modifier=QueryModifier? '{' subQueries+=LocationQuery* '}';
	public CompositionQueryElements getCompositionQueryAccess() {
		return pCompositionQuery;
	}
	
	public ParserRule getCompositionQueryRule() {
		return getCompositionQueryAccess().getRule();
	}

	//enum QueryModifier:
	//	INCLUDE='include' |
	//	EXCLUDE='exclude';
	public QueryModifierElements getQueryModifierAccess() {
		return eQueryModifier;
	}
	
	public EnumRule getQueryModifierRule() {
		return getQueryModifierAccess().getRule();
	}

	//OperationQuery:
	//	{OperationQuery} modifier=[mapping::OperationModifier]?
	//	returnType=[mapping::Type]? (operationReference=[mapping::Operation] ('(' parameterQueries+=ParameterQuery (','
	//	parameterQueries+=ParameterQuery)* ')')?
	//	|
	//	'*');
	public OperationQueryElements getOperationQueryAccess() {
		return pOperationQuery;
	}
	
	public ParserRule getOperationQueryRule() {
		return getOperationQueryAccess().getRule();
	}

	//ParameterQuery:
	//	{ParameterQuery} modifier=[mapping::ParameterModifier]? (type=[mapping::Type] | '*') parameter=[mapping::Parameter]?;
	public ParameterQueryElements getParameterQueryAccess() {
		return pParameterQuery;
	}
	
	public ParserRule getParameterQueryRule() {
		return getParameterQueryAccess().getRule();
	}

	//Node:
	//	(SubPathNode | WildcardNode | ParentNode | ContainerNode) ('[' constraint=PropertyConstraint ']')?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//ContainerNode:
	//	container=[mapping::Container];
	public ContainerNodeElements getContainerNodeAccess() {
		return pContainerNode;
	}
	
	public ParserRule getContainerNodeRule() {
		return getContainerNodeAccess().getRule();
	}

	//WildcardNode:
	//	{WildcardNode}
	//	'*';
	public WildcardNodeElements getWildcardNodeAccess() {
		return pWildcardNode;
	}
	
	public ParserRule getWildcardNodeRule() {
		return getWildcardNodeAccess().getRule();
	}

	//SubPathNode:
	//	{SubPathNode}
	//	'**';
	public SubPathNodeElements getSubPathNodeAccess() {
		return pSubPathNode;
	}
	
	public ParserRule getSubPathNodeRule() {
		return getSubPathNodeAccess().getRule();
	}

	//ParentNode:
	//	{ParentNode}
	//	'up';
	public ParentNodeElements getParentNodeAccess() {
		return pParentNode;
	}
	
	public ParserRule getParentNodeRule() {
		return getParentNodeAccess().getRule();
	}

	//PropertyConstraint PropertyConstraintExpression:
	//	PropertyConstraintCompare ({PropertyConstraintExpression.left=current} logic=LogicOperator
	//	right=PropertyConstraintCompare)?
	public PropertyConstraintElements getPropertyConstraintAccess() {
		return pPropertyConstraint;
	}
	
	public ParserRule getPropertyConstraintRule() {
		return getPropertyConstraintAccess().getRule();
	}

	//enum LogicOperator:
	//	AND='&&' |
	//	OR='||';
	public LogicOperatorElements getLogicOperatorAccess() {
		return eLogicOperator;
	}
	
	public EnumRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}

	//PropertyConstraintCompare PropertyConstraintExpression:
	//	ConstraintElement ({PropertyConstraintExpression.left=current} compare=CompareOperator right=ConstraintElement)?
	public PropertyConstraintCompareElements getPropertyConstraintCompareAccess() {
		return pPropertyConstraintCompare;
	}
	
	public ParserRule getPropertyConstraintCompareRule() {
		return getPropertyConstraintCompareAccess().getRule();
	}

	//enum CompareOperator:
	//	EQ='=' |
	//	LIKE='~' |
	//	NE='!=' |
	//	GR='>' |
	//	LW='<' |
	//	GE='>=' |
	//	LE='<=';
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//ConstraintElement:
	//	Literal | LocalQuery;
	public ConstraintElementElements getConstraintElementAccess() {
		return pConstraintElement;
	}
	
	public ParserRule getConstraintElementRule() {
		return getConstraintElementAccess().getRule();
	}

	//LocalQuery:
	//	locationQuery=LocationQuery? (property=ModelProperty | typeof=Typeof);
	public LocalQueryElements getLocalQueryAccess() {
		return pLocalQuery;
	}
	
	public ParserRule getLocalQueryRule() {
		return getLocalQueryAccess().getRule();
	}

	//ModelProperty:
	//	'#' reference=[mapping::Feature];
	public ModelPropertyElements getModelPropertyAccess() {
		return pModelProperty;
	}
	
	public ParserRule getModelPropertyRule() {
		return getModelPropertyAccess().getRule();
	}

	//Typeof:
	//	'istypeof' '(' reference=[mapping::NamedType] ')' // should be replaced with generate type reference rule
	//;
	public TypeofElements getTypeofAccess() {
		return pTypeof;
	}
	
	public ParserRule getTypeofRule() {
		return getTypeofAccess().getRule();
	}

	/// * ------------------------------- * / / * literals                        * / Literal:
	//	StringLiteral | IntLiteral | FloatLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//FloatLiteral:
	//	value=FLOAT;
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	/// * ------------------------------- * / / * Terminals and literal rules     * / QualifiedName:
	//	ID (=> '.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ('.' '*')?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
