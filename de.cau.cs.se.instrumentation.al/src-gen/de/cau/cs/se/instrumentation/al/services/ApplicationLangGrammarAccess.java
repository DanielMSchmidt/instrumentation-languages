/*
* generated by Xtext
*/
package de.cau.cs.se.instrumentation.al.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ApplicationLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetamodelsMetaModelParserRuleCall_2_0 = (RuleCall)cMetamodelsAssignment_2.eContents().get(0);
		private final Assignment cSourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourcesApplicationModelParserRuleCall_3_0 = (RuleCall)cSourcesAssignment_3.eContents().get(0);
		private final Assignment cAspectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAspectsAspectParserRuleCall_4_0 = (RuleCall)cAspectsAssignment_4.eContents().get(0);
		
		//Model:
		//	"package" name=QualifiedName metamodels+=MetaModel* sources+=ApplicationModel* aspects+=Aspect*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName metamodels+=MetaModel* sources+=ApplicationModel* aspects+=Aspect*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//metamodels+=MetaModel*
		public Assignment getMetamodelsAssignment_2() { return cMetamodelsAssignment_2; }

		//MetaModel
		public RuleCall getMetamodelsMetaModelParserRuleCall_2_0() { return cMetamodelsMetaModelParserRuleCall_2_0; }

		//sources+=ApplicationModel*
		public Assignment getSourcesAssignment_3() { return cSourcesAssignment_3; }

		//ApplicationModel
		public RuleCall getSourcesApplicationModelParserRuleCall_3_0() { return cSourcesApplicationModelParserRuleCall_3_0; }

		//aspects+=Aspect*
		public Assignment getAspectsAssignment_4() { return cAspectsAssignment_4; }

		//Aspect
		public RuleCall getAspectsAspectParserRuleCall_4_0() { return cAspectsAspectParserRuleCall_4_0; }
	}

	public class MetaModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegisterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPackageEPackageCrossReference_2_0 = (CrossReference)cPackageAssignment_2.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cPackageEPackageCrossReference_2_0.eContents().get(1);
		
		//MetaModel:
		//	"register" name=ID package=[ecore::EPackage|STRING];
		public ParserRule getRule() { return rule; }

		//"register" name=ID package=[ecore::EPackage|STRING]
		public Group getGroup() { return cGroup; }

		//"register"
		public Keyword getRegisterKeyword_0() { return cRegisterKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_2() { return cPackageAssignment_2; }

		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_2_0() { return cPackageEPackageCrossReference_2_0; }

		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_2_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_2_0_1; }
	}

	public class ApplicationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplicationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetamodelMetaModelCrossReference_1_0 = (CrossReference)cMetamodelAssignment_1.eContents().get(0);
		private final RuleCall cMetamodelMetaModelIDTerminalRuleCall_1_0_1 = (RuleCall)cMetamodelMetaModelCrossReference_1_0.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelSTRINGTerminalRuleCall_4_0 = (RuleCall)cModelAssignment_4.eContents().get(0);
		
		//ApplicationModel:
		//	"use" metamodel=[MetaModel] "on" name=ID model=STRING;
		public ParserRule getRule() { return rule; }

		//"use" metamodel=[MetaModel] "on" name=ID model=STRING
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//metamodel=[MetaModel]
		public Assignment getMetamodelAssignment_1() { return cMetamodelAssignment_1; }

		//[MetaModel]
		public CrossReference getMetamodelMetaModelCrossReference_1_0() { return cMetamodelMetaModelCrossReference_1_0; }

		//ID
		public RuleCall getMetamodelMetaModelIDTerminalRuleCall_1_0_1() { return cMetamodelMetaModelIDTerminalRuleCall_1_0_1; }

		//"on"
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//model=STRING
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }

		//STRING
		public RuleCall getModelSTRINGTerminalRuleCall_4_0() { return cModelSTRINGTerminalRuleCall_4_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class AspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAspectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollectorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCollectorsCollectorParserRuleCall_3_0 = (RuleCall)cCollectorsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// define subgraph-pattern to locate structures in models
		//// define selector for reference destination
		//Aspect: //annotation=Annotation
		//	"aspect" query=Query "{" collectors+=Collector "}";
		public ParserRule getRule() { return rule; }

		////annotation=Annotation
		//"aspect" query=Query "{" collectors+=Collector "}"
		public Group getGroup() { return cGroup; }

		////annotation=Annotation
		//"aspect"
		public Keyword getAspectKeyword_0() { return cAspectKeyword_0; }

		//query=Query
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }

		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//collectors+=Collector
		public Assignment getCollectorsAssignment_3() { return cCollectorsAssignment_3; }

		//Collector
		public RuleCall getCollectorsCollectorParserRuleCall_3_0() { return cCollectorsCollectorParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationLocationQueryParserRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cModifierAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final CrossReference cModifierMethodModifierCrossReference_1_0_0_0 = (CrossReference)cModifierAssignment_1_0_0.eContents().get(0);
		private final RuleCall cModifierMethodModifierIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cModifierMethodModifierCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cReturnTypeAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final CrossReference cReturnTypeTypeCrossReference_1_1_0_0 = (CrossReference)cReturnTypeAssignment_1_1_0.eContents().get(0);
		private final RuleCall cReturnTypeTypeIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cReturnTypeTypeCrossReference_1_1_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cMethodAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMethodMethodCrossReference_1_2_0 = (CrossReference)cMethodAssignment_1_2.eContents().get(0);
		private final RuleCall cMethodMethodIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMethodMethodCrossReference_1_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cParameterAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cParameterParameterPatternParserRuleCall_1_4_0 = (RuleCall)cParameterAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cParameterAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cParameterParameterPatternParserRuleCall_1_5_1_0 = (RuleCall)cParameterAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Query:
		//	location=LocationQuery ((modifier=[structure::MethodModifier] | "*") (returnType=[structure::Type] | "*")
		//	method=[structure::Method] "(" parameter+=ParameterPattern ("," parameter+=ParameterPattern)* ")")?;
		public ParserRule getRule() { return rule; }

		//location=LocationQuery ((modifier=[structure::MethodModifier] | "*") (returnType=[structure::Type] | "*")
		//method=[structure::Method] "(" parameter+=ParameterPattern ("," parameter+=ParameterPattern)* ")")?
		public Group getGroup() { return cGroup; }

		//location=LocationQuery
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }

		//LocationQuery
		public RuleCall getLocationLocationQueryParserRuleCall_0_0() { return cLocationLocationQueryParserRuleCall_0_0; }

		//((modifier=[structure::MethodModifier] | "*") (returnType=[structure::Type] | "*") method=[structure::Method] "("
		//parameter+=ParameterPattern ("," parameter+=ParameterPattern)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//modifier=[structure::MethodModifier] | "*"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//modifier=[structure::MethodModifier]
		public Assignment getModifierAssignment_1_0_0() { return cModifierAssignment_1_0_0; }

		//[structure::MethodModifier]
		public CrossReference getModifierMethodModifierCrossReference_1_0_0_0() { return cModifierMethodModifierCrossReference_1_0_0_0; }

		//ID
		public RuleCall getModifierMethodModifierIDTerminalRuleCall_1_0_0_0_1() { return cModifierMethodModifierIDTerminalRuleCall_1_0_0_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }

		//returnType=[structure::Type] | "*"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//returnType=[structure::Type]
		public Assignment getReturnTypeAssignment_1_1_0() { return cReturnTypeAssignment_1_1_0; }

		//[structure::Type]
		public CrossReference getReturnTypeTypeCrossReference_1_1_0_0() { return cReturnTypeTypeCrossReference_1_1_0_0; }

		//ID
		public RuleCall getReturnTypeTypeIDTerminalRuleCall_1_1_0_0_1() { return cReturnTypeTypeIDTerminalRuleCall_1_1_0_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_1() { return cAsteriskKeyword_1_1_1; }

		//method=[structure::Method]
		public Assignment getMethodAssignment_1_2() { return cMethodAssignment_1_2; }

		//[structure::Method]
		public CrossReference getMethodMethodCrossReference_1_2_0() { return cMethodMethodCrossReference_1_2_0; }

		//ID
		public RuleCall getMethodMethodIDTerminalRuleCall_1_2_0_1() { return cMethodMethodIDTerminalRuleCall_1_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }

		//parameter+=ParameterPattern
		public Assignment getParameterAssignment_1_4() { return cParameterAssignment_1_4; }

		//ParameterPattern
		public RuleCall getParameterParameterPatternParserRuleCall_1_4_0() { return cParameterParameterPatternParserRuleCall_1_4_0; }

		//("," parameter+=ParameterPattern)*
		public Group getGroup_1_5() { return cGroup_1_5; }

		//","
		public Keyword getCommaKeyword_1_5_0() { return cCommaKeyword_1_5_0; }

		//parameter+=ParameterPattern
		public Assignment getParameterAssignment_1_5_1() { return cParameterAssignment_1_5_1; }

		//ParameterPattern
		public RuleCall getParameterParameterPatternParserRuleCall_1_5_1_0() { return cParameterParameterPatternParserRuleCall_1_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
	}

	public class ParameterPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModifierParameterModifierCrossReference_0_0 = (CrossReference)cModifierAssignment_0.eContents().get(0);
		private final RuleCall cModifierParameterModifierIDTerminalRuleCall_0_0_1 = (RuleCall)cModifierParameterModifierCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParameterParameterCrossReference_2_0 = (CrossReference)cParameterAssignment_2.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_2_0_1 = (RuleCall)cParameterParameterCrossReference_2_0.eContents().get(1);
		
		//ParameterPattern:
		//	modifier=[structure::ParameterModifier] type=[structure::Type] parameter=[structure::Parameter];
		public ParserRule getRule() { return rule; }

		//modifier=[structure::ParameterModifier] type=[structure::Type] parameter=[structure::Parameter]
		public Group getGroup() { return cGroup; }

		//modifier=[structure::ParameterModifier]
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//[structure::ParameterModifier]
		public CrossReference getModifierParameterModifierCrossReference_0_0() { return cModifierParameterModifierCrossReference_0_0; }

		//ID
		public RuleCall getModifierParameterModifierIDTerminalRuleCall_0_0_1() { return cModifierParameterModifierIDTerminalRuleCall_0_0_1; }

		//type=[structure::Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[structure::Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }

		//parameter=[structure::Parameter]
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }

		//[structure::Parameter]
		public CrossReference getParameterParameterCrossReference_2_0() { return cParameterParameterCrossReference_2_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_2_0_1() { return cParameterParameterIDTerminalRuleCall_2_0_1; }
	}

	public class LocationQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSpecializationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSpecializationLocationQueryParserRuleCall_1_1_0 = (RuleCall)cSpecializationAssignment_1_1.eContents().get(0);
		
		//LocationQuery:
		//	node=Node ("." specialization=LocationQuery)?;
		public ParserRule getRule() { return rule; }

		//node=Node ("." specialization=LocationQuery)?
		public Group getGroup() { return cGroup; }

		//node=Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//Node
		public RuleCall getNodeNodeParserRuleCall_0_0() { return cNodeNodeParserRuleCall_0_0; }

		//("." specialization=LocationQuery)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//specialization=LocationQuery
		public Assignment getSpecializationAssignment_1_1() { return cSpecializationAssignment_1_1; }

		//LocationQuery
		public RuleCall getSpecializationLocationQueryParserRuleCall_1_1_0() { return cSpecializationLocationQueryParserRuleCall_1_1_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSubPathNodeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cWildcardNodeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cContainerNodeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParamQueryParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		
		//Node:
		//	(SubPathNode | WildcardNode | ContainerNode) parameter=ParamQuery?;
		public ParserRule getRule() { return rule; }

		//(SubPathNode | WildcardNode | ContainerNode) parameter=ParamQuery?
		public Group getGroup() { return cGroup; }

		//SubPathNode | WildcardNode | ContainerNode
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SubPathNode
		public RuleCall getSubPathNodeParserRuleCall_0_0() { return cSubPathNodeParserRuleCall_0_0; }

		//WildcardNode
		public RuleCall getWildcardNodeParserRuleCall_0_1() { return cWildcardNodeParserRuleCall_0_1; }

		//ContainerNode
		public RuleCall getContainerNodeParserRuleCall_0_2() { return cContainerNodeParserRuleCall_0_2; }

		//parameter=ParamQuery?
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//ParamQuery
		public RuleCall getParameterParamQueryParserRuleCall_1_0() { return cParameterParamQueryParserRuleCall_1_0; }
	}

	public class ParamQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueriesParamCompareParserRuleCall_1_0 = (RuleCall)cQueriesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// extend ParamQuery to boolean expression with | & !
		//ParamQuery:
		//	"[" queries+=ParamCompare+ "]";
		public ParserRule getRule() { return rule; }

		//"[" queries+=ParamCompare+ "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//queries+=ParamCompare+
		public Assignment getQueriesAssignment_1() { return cQueriesAssignment_1; }

		//ParamCompare
		public RuleCall getQueriesParamCompareParserRuleCall_1_0() { return cQueriesParamCompareParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ParamCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftValueParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightValueParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ParamCompare:
		//	left=Value (operator=Operator right=Value);
		public ParserRule getRule() { return rule; }

		//left=Value (operator=Operator right=Value)
		public Group getGroup() { return cGroup; }

		//left=Value
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Value
		public RuleCall getLeftValueParserRuleCall_0_0() { return cLeftValueParserRuleCall_0_0; }

		//operator=Operator right=Value
		public Group getGroup_1() { return cGroup_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0_0() { return cOperatorOperatorEnumRuleCall_1_0_0; }

		//right=Value
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Value
		public RuleCall getRightValueParserRuleCall_1_1_0() { return cRightValueParserRuleCall_1_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//	StringValue | IntValue | FloatValue | ReferenceValue;
		public ParserRule getRule() { return rule; }

		//StringValue | IntValue | FloatValue | ReferenceValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_2() { return cFloatValueParserRuleCall_2; }

		//ReferenceValue
		public RuleCall getReferenceValueParserRuleCall_3() { return cReferenceValueParserRuleCall_3; }
	}

	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//	value= //FLOAT
		//	INT;
		public ParserRule getRule() { return rule; }

		//value= //FLOAT
		//INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		////FLOAT
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ReferenceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQueryLocationQueryParserRuleCall_0_0 = (RuleCall)cQueryAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		
		//ReferenceValue:
		//	query=LocationQuery parameter=Parameter;
		public ParserRule getRule() { return rule; }

		//query=LocationQuery parameter=Parameter
		public Group getGroup() { return cGroup; }

		//query=LocationQuery
		public Assignment getQueryAssignment_0() { return cQueryAssignment_0; }

		//LocationQuery
		public RuleCall getQueryLocationQueryParserRuleCall_0_0() { return cQueryLocationQueryParserRuleCall_0_0; }

		//parameter=Parameter
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_1_0() { return cParameterParameterParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuntimePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReflectionPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Parameter:
		//	RuntimeProperty | ReflectionProperty;
		public ParserRule getRule() { return rule; }

		//RuntimeProperty | ReflectionProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuntimeProperty
		public RuleCall getRuntimePropertyParserRuleCall_0() { return cRuntimePropertyParserRuleCall_0; }

		//ReflectionProperty
		public RuleCall getReflectionPropertyParserRuleCall_1() { return cReflectionPropertyParserRuleCall_1; }
	}

	public class RuntimePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuntimeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceIDTerminalRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//RuntimeProperty:
		//	"#" reference=ID;
		public ParserRule getRule() { return rule; }

		//"#" reference=ID
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//reference=ID
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//ID
		public RuleCall getReferenceIDTerminalRuleCall_1_0() { return cReferenceIDTerminalRuleCall_1_0; }
	}

	public class ReflectionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReflectionProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionReflectionFunctionEnumRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		
		//ReflectionProperty:
		//	"$" function=ReflectionFunction;
		public ParserRule getRule() { return rule; }

		//"$" function=ReflectionFunction
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//function=ReflectionFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//ReflectionFunction
		public RuleCall getFunctionReflectionFunctionEnumRuleCall_1_0() { return cFunctionReflectionFunctionEnumRuleCall_1_0; }
	}

	public class ContainerNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerNode");
		private final Assignment cContainerAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cContainerContainerCrossReference_0 = (CrossReference)cContainerAssignment.eContents().get(0);
		private final RuleCall cContainerContainerIDTerminalRuleCall_0_1 = (RuleCall)cContainerContainerCrossReference_0.eContents().get(1);
		
		//ContainerNode:
		//	container=[structure::Container];
		public ParserRule getRule() { return rule; }

		//container=[structure::Container]
		public Assignment getContainerAssignment() { return cContainerAssignment; }

		//[structure::Container]
		public CrossReference getContainerContainerCrossReference_0() { return cContainerContainerCrossReference_0; }

		//ID
		public RuleCall getContainerContainerIDTerminalRuleCall_0_1() { return cContainerContainerIDTerminalRuleCall_0_1; }
	}

	public class WildcardNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WildcardNode:
		//	{WildcardNode} "*";
		public ParserRule getRule() { return rule; }

		//{WildcardNode} "*"
		public Group getGroup() { return cGroup; }

		//{WildcardNode}
		public Action getWildcardNodeAction_0() { return cWildcardNodeAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class SubPathNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubPathNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubPathNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SubPathNode:
		//	{SubPathNode} "**";
		public ParserRule getRule() { return rule; }

		//{SubPathNode} "**"
		public Group getGroup() { return cGroup; }

		//{SubPathNode}
		public Action getSubPathNodeAction_0() { return cSubPathNodeAction_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
	}

	public class CollectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Collector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInsertionPointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInsertionPointInsertionPointEnumRuleCall_0_0 = (RuleCall)cInsertionPointAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeRecordTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeRecordTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeRecordTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInitializationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInitializationsValueParserRuleCall_3_0_0 = (RuleCall)cInitializationsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitializationsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitializationsValueParserRuleCall_3_1_1_0 = (RuleCall)cInitializationsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Collector:
		//	insertionPoint=InsertionPoint type=[irl::RecordType|QualifiedName] "(" (initializations+=Value (","
		//	initializations+=Value)*)? ")";
		public ParserRule getRule() { return rule; }

		//insertionPoint=InsertionPoint type=[irl::RecordType|QualifiedName] "(" (initializations+=Value (","
		//initializations+=Value)*)? ")"
		public Group getGroup() { return cGroup; }

		//insertionPoint=InsertionPoint
		public Assignment getInsertionPointAssignment_0() { return cInsertionPointAssignment_0; }

		//InsertionPoint
		public RuleCall getInsertionPointInsertionPointEnumRuleCall_0_0() { return cInsertionPointInsertionPointEnumRuleCall_0_0; }

		//type=[irl::RecordType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[irl::RecordType|QualifiedName]
		public CrossReference getTypeRecordTypeCrossReference_1_0() { return cTypeRecordTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeRecordTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeRecordTypeQualifiedNameParserRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(initializations+=Value ("," initializations+=Value)*)?
		public Group getGroup_3() { return cGroup_3; }

		//initializations+=Value
		public Assignment getInitializationsAssignment_3_0() { return cInitializationsAssignment_3_0; }

		//Value
		public RuleCall getInitializationsValueParserRuleCall_3_0_0() { return cInitializationsValueParserRuleCall_3_0_0; }

		//("," initializations+=Value)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//initializations+=Value
		public Assignment getInitializationsAssignment_3_1_1() { return cInitializationsAssignment_3_1_1; }

		//Value
		public RuleCall getInitializationsValueParserRuleCall_3_1_1_0() { return cInitializationsValueParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	public class ReflectionFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ReflectionFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNAMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNAMENameKeyword_0_0 = (Keyword)cNAMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNATUREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSIGNATURESignatureKeyword_1_0 = (Keyword)cSIGNATUREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLASSClassKeyword_2_0 = (Keyword)cCLASSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRETURN_TYPEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRETURN_TYPEReturnTypeKeyword_3_0 = (Keyword)cRETURN_TYPEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ReflectionFunction:
		//	NAME="name" | SIGNATURE="signature" | CLASS="class" | RETURN_TYPE="return-type";
		public EnumRule getRule() { return rule; }

		//NAME="name" | SIGNATURE="signature" | CLASS="class" | RETURN_TYPE="return-type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NAME="name"
		public EnumLiteralDeclaration getNAMEEnumLiteralDeclaration_0() { return cNAMEEnumLiteralDeclaration_0; }

		//"name"
		public Keyword getNAMENameKeyword_0_0() { return cNAMENameKeyword_0_0; }

		//SIGNATURE="signature"
		public EnumLiteralDeclaration getSIGNATUREEnumLiteralDeclaration_1() { return cSIGNATUREEnumLiteralDeclaration_1; }

		//"signature"
		public Keyword getSIGNATURESignatureKeyword_1_0() { return cSIGNATURESignatureKeyword_1_0; }

		//CLASS="class"
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_2() { return cCLASSEnumLiteralDeclaration_2; }

		//"class"
		public Keyword getCLASSClassKeyword_2_0() { return cCLASSClassKeyword_2_0; }

		//RETURN_TYPE="return-type"
		public EnumLiteralDeclaration getRETURN_TYPEEnumLiteralDeclaration_3() { return cRETURN_TYPEEnumLiteralDeclaration_3; }

		//"return-type"
		public Keyword getRETURN_TYPEReturnTypeKeyword_3_0() { return cRETURN_TYPEReturnTypeKeyword_3_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLIKEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLIKETildeKeyword_1_0 = (Keyword)cLIKEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_2_0 = (Keyword)cNEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGRGreaterThanSignKeyword_3_0 = (Keyword)cGREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLWLessThanSignKeyword_4_0 = (Keyword)cLWEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLELessThanSignEqualsSignKeyword_6_0 = (Keyword)cLEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Operator:
		//	EQ="=" | LIKE="~" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<=";
		public EnumRule getRule() { return rule; }

		//EQ="=" | LIKE="~" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//LIKE="~"
		public EnumLiteralDeclaration getLIKEEnumLiteralDeclaration_1() { return cLIKEEnumLiteralDeclaration_1; }

		//"~"
		public Keyword getLIKETildeKeyword_1_0() { return cLIKETildeKeyword_1_0; }

		//NE="!="
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_2() { return cNEEnumLiteralDeclaration_2; }

		//"!="
		public Keyword getNEExclamationMarkEqualsSignKeyword_2_0() { return cNEExclamationMarkEqualsSignKeyword_2_0; }

		//GR=">"
		public EnumLiteralDeclaration getGREnumLiteralDeclaration_3() { return cGREnumLiteralDeclaration_3; }

		//">"
		public Keyword getGRGreaterThanSignKeyword_3_0() { return cGRGreaterThanSignKeyword_3_0; }

		//LW="<"
		public EnumLiteralDeclaration getLWEnumLiteralDeclaration_4() { return cLWEnumLiteralDeclaration_4; }

		//"<"
		public Keyword getLWLessThanSignKeyword_4_0() { return cLWLessThanSignKeyword_4_0; }

		//GE=">="
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_5() { return cGEEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_5_0() { return cGEGreaterThanSignEqualsSignKeyword_5_0; }

		//LE="<="
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_6() { return cLEEnumLiteralDeclaration_6; }

		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_6_0() { return cLELessThanSignEqualsSignKeyword_6_0; }
	}

	public class InsertionPointElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InsertionPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBEFOREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBEFOREBeforeKeyword_0_0 = (Keyword)cBEFOREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAFTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAFTERAfterKeyword_1_0 = (Keyword)cAFTEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InsertionPoint:
		//	BEFORE="before" | AFTER="after";
		public EnumRule getRule() { return rule; }

		//BEFORE="before" | AFTER="after"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BEFORE="before"
		public EnumLiteralDeclaration getBEFOREEnumLiteralDeclaration_0() { return cBEFOREEnumLiteralDeclaration_0; }

		//"before"
		public Keyword getBEFOREBeforeKeyword_0_0() { return cBEFOREBeforeKeyword_0_0; }

		//AFTER="after"
		public EnumLiteralDeclaration getAFTEREnumLiteralDeclaration_1() { return cAFTEREnumLiteralDeclaration_1; }

		//"after"
		public Keyword getAFTERAfterKeyword_1_0() { return cAFTERAfterKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private MetaModelElements pMetaModel;
	private ApplicationModelElements pApplicationModel;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private AspectElements pAspect;
	private QueryElements pQuery;
	private ParameterPatternElements pParameterPattern;
	private LocationQueryElements pLocationQuery;
	private NodeElements pNode;
	private ParamQueryElements pParamQuery;
	private ParamCompareElements pParamCompare;
	private ValueElements pValue;
	private FloatValueElements pFloatValue;
	private IntValueElements pIntValue;
	private StringValueElements pStringValue;
	private ReferenceValueElements pReferenceValue;
	private ParameterElements pParameter;
	private RuntimePropertyElements pRuntimeProperty;
	private ReflectionPropertyElements pReflectionProperty;
	private ReflectionFunctionElements unknownRuleReflectionFunction;
	private OperatorElements unknownRuleOperator;
	private ContainerNodeElements pContainerNode;
	private WildcardNodeElements pWildcardNode;
	private SubPathNodeElements pSubPathNode;
	private CollectorElements pCollector;
	private InsertionPointElements unknownRuleInsertionPoint;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ApplicationLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.instrumentation.al.ApplicationLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"package" name=QualifiedName metamodels+=MetaModel* sources+=ApplicationModel* aspects+=Aspect*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//MetaModel:
	//	"register" name=ID package=[ecore::EPackage|STRING];
	public MetaModelElements getMetaModelAccess() {
		return (pMetaModel != null) ? pMetaModel : (pMetaModel = new MetaModelElements());
	}
	
	public ParserRule getMetaModelRule() {
		return getMetaModelAccess().getRule();
	}

	//ApplicationModel:
	//	"use" metamodel=[MetaModel] "on" name=ID model=STRING;
	public ApplicationModelElements getApplicationModelAccess() {
		return (pApplicationModel != null) ? pApplicationModel : (pApplicationModel = new ApplicationModelElements());
	}
	
	public ParserRule getApplicationModelRule() {
		return getApplicationModelAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//// define subgraph-pattern to locate structures in models
	//// define selector for reference destination
	//Aspect: //annotation=Annotation
	//	"aspect" query=Query "{" collectors+=Collector "}";
	public AspectElements getAspectAccess() {
		return (pAspect != null) ? pAspect : (pAspect = new AspectElements());
	}
	
	public ParserRule getAspectRule() {
		return getAspectAccess().getRule();
	}

	//Query:
	//	location=LocationQuery ((modifier=[structure::MethodModifier] | "*") (returnType=[structure::Type] | "*")
	//	method=[structure::Method] "(" parameter+=ParameterPattern ("," parameter+=ParameterPattern)* ")")?;
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//ParameterPattern:
	//	modifier=[structure::ParameterModifier] type=[structure::Type] parameter=[structure::Parameter];
	public ParameterPatternElements getParameterPatternAccess() {
		return (pParameterPattern != null) ? pParameterPattern : (pParameterPattern = new ParameterPatternElements());
	}
	
	public ParserRule getParameterPatternRule() {
		return getParameterPatternAccess().getRule();
	}

	//LocationQuery:
	//	node=Node ("." specialization=LocationQuery)?;
	public LocationQueryElements getLocationQueryAccess() {
		return (pLocationQuery != null) ? pLocationQuery : (pLocationQuery = new LocationQueryElements());
	}
	
	public ParserRule getLocationQueryRule() {
		return getLocationQueryAccess().getRule();
	}

	//Node:
	//	(SubPathNode | WildcardNode | ContainerNode) parameter=ParamQuery?;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//// extend ParamQuery to boolean expression with | & !
	//ParamQuery:
	//	"[" queries+=ParamCompare+ "]";
	public ParamQueryElements getParamQueryAccess() {
		return (pParamQuery != null) ? pParamQuery : (pParamQuery = new ParamQueryElements());
	}
	
	public ParserRule getParamQueryRule() {
		return getParamQueryAccess().getRule();
	}

	//ParamCompare:
	//	left=Value (operator=Operator right=Value);
	public ParamCompareElements getParamCompareAccess() {
		return (pParamCompare != null) ? pParamCompare : (pParamCompare = new ParamCompareElements());
	}
	
	public ParserRule getParamCompareRule() {
		return getParamCompareAccess().getRule();
	}

	//Value:
	//	StringValue | IntValue | FloatValue | ReferenceValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//FloatValue:
	//	value= //FLOAT
	//	INT;
	public FloatValueElements getFloatValueAccess() {
		return (pFloatValue != null) ? pFloatValue : (pFloatValue = new FloatValueElements());
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//ReferenceValue:
	//	query=LocationQuery parameter=Parameter;
	public ReferenceValueElements getReferenceValueAccess() {
		return (pReferenceValue != null) ? pReferenceValue : (pReferenceValue = new ReferenceValueElements());
	}
	
	public ParserRule getReferenceValueRule() {
		return getReferenceValueAccess().getRule();
	}

	//Parameter:
	//	RuntimeProperty | ReflectionProperty;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//RuntimeProperty:
	//	"#" reference=ID;
	public RuntimePropertyElements getRuntimePropertyAccess() {
		return (pRuntimeProperty != null) ? pRuntimeProperty : (pRuntimeProperty = new RuntimePropertyElements());
	}
	
	public ParserRule getRuntimePropertyRule() {
		return getRuntimePropertyAccess().getRule();
	}

	//ReflectionProperty:
	//	"$" function=ReflectionFunction;
	public ReflectionPropertyElements getReflectionPropertyAccess() {
		return (pReflectionProperty != null) ? pReflectionProperty : (pReflectionProperty = new ReflectionPropertyElements());
	}
	
	public ParserRule getReflectionPropertyRule() {
		return getReflectionPropertyAccess().getRule();
	}

	//enum ReflectionFunction:
	//	NAME="name" | SIGNATURE="signature" | CLASS="class" | RETURN_TYPE="return-type";
	public ReflectionFunctionElements getReflectionFunctionAccess() {
		return (unknownRuleReflectionFunction != null) ? unknownRuleReflectionFunction : (unknownRuleReflectionFunction = new ReflectionFunctionElements());
	}
	
	public EnumRule getReflectionFunctionRule() {
		return getReflectionFunctionAccess().getRule();
	}

	//enum Operator:
	//	EQ="=" | LIKE="~" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<=";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//ContainerNode:
	//	container=[structure::Container];
	public ContainerNodeElements getContainerNodeAccess() {
		return (pContainerNode != null) ? pContainerNode : (pContainerNode = new ContainerNodeElements());
	}
	
	public ParserRule getContainerNodeRule() {
		return getContainerNodeAccess().getRule();
	}

	//WildcardNode:
	//	{WildcardNode} "*";
	public WildcardNodeElements getWildcardNodeAccess() {
		return (pWildcardNode != null) ? pWildcardNode : (pWildcardNode = new WildcardNodeElements());
	}
	
	public ParserRule getWildcardNodeRule() {
		return getWildcardNodeAccess().getRule();
	}

	//SubPathNode:
	//	{SubPathNode} "**";
	public SubPathNodeElements getSubPathNodeAccess() {
		return (pSubPathNode != null) ? pSubPathNode : (pSubPathNode = new SubPathNodeElements());
	}
	
	public ParserRule getSubPathNodeRule() {
		return getSubPathNodeAccess().getRule();
	}

	//Collector:
	//	insertionPoint=InsertionPoint type=[irl::RecordType|QualifiedName] "(" (initializations+=Value (","
	//	initializations+=Value)*)? ")";
	public CollectorElements getCollectorAccess() {
		return (pCollector != null) ? pCollector : (pCollector = new CollectorElements());
	}
	
	public ParserRule getCollectorRule() {
		return getCollectorAccess().getRule();
	}

	//enum InsertionPoint:
	//	BEFORE="before" | AFTER="after";
	public InsertionPointElements getInsertionPointAccess() {
		return (unknownRuleInsertionPoint != null) ? unknownRuleInsertionPoint : (unknownRuleInsertionPoint = new InsertionPointElements());
	}
	
	public EnumRule getInsertionPointRule() {
		return getInsertionPointAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
