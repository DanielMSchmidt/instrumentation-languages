/*
* generated by Xtext
*/
package de.cau.cs.se.instrumentation.rl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RecordLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPackagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackagesPackageParserRuleCall_2_0 = (RuleCall)cPackagesAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypesTypeParserRuleCall_4_0 = (RuleCall)cTypesAssignment_4.eContents().get(0);
		
		//Model:
		//	"package" name=QualifiedName packages+=Package* imports+=Import* types+=Type*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName packages+=Package* imports+=Import* types+=Type*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//packages+=Package*
		public Assignment getPackagesAssignment_2() { return cPackagesAssignment_2; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_2_0() { return cPackagesPackageParserRuleCall_2_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//types+=Type*
		public Assignment getTypesAssignment_4() { return cTypesAssignment_4; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_4_0() { return cTypesTypeParserRuleCall_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPackageEPackageCrossReference_2_0 = (CrossReference)cPackageAssignment_2.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cPackageEPackageCrossReference_2_0.eContents().get(1);
		
		//Package:
		//	"use" name=ID package=[ecore::EPackage|STRING];
		public ParserRule getRule() { return rule; }

		//"use" name=ID package=[ecore::EPackage|STRING]
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_2() { return cPackageAssignment_2; }

		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_2_0() { return cPackageEPackageCrossReference_2_0; }

		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_2_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_2_0_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRecordTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartialRecordTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	RecordType | PartialRecordType;
		public ParserRule getRule() { return rule; }

		//RecordType | PartialRecordType
		public Alternatives getAlternatives() { return cAlternatives; }

		//RecordType
		public RuleCall getRecordTypeParserRuleCall_0() { return cRecordTypeParserRuleCall_0; }

		//PartialRecordType
		public RuleCall getPartialRecordTypeParserRuleCall_1() { return cPartialRecordTypeParserRuleCall_1; }
	}

	public class PartialRecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartialRecordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParentsPartialRecordTypeCrossReference_2_1_0 = (CrossReference)cParentsAssignment_2_1.eContents().get(0);
		private final RuleCall cParentsPartialRecordTypeQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cParentsPartialRecordTypeCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cParentsPartialRecordTypeCrossReference_2_2_1_0 = (CrossReference)cParentsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cParentsPartialRecordTypeQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cParentsPartialRecordTypeCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cPropertiesAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0_0 = (RuleCall)cPropertiesAssignment_3_1_0.eContents().get(0);
		private final Assignment cConstantsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_3_1_1_0 = (RuleCall)cConstantsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PartialRecordType:
		//	"template" name=ID (":" parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)?
		//	("{" (properties+=Property | constants+=Constant)* "}")?;
		public ParserRule getRule() { return rule; }

		//"template" name=ID (":" parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)?
		//("{" (properties+=Property | constants+=Constant)* "}")?
		public Group getGroup() { return cGroup; }

		//"template"
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//parents+=[PartialRecordType|QualifiedName]
		public Assignment getParentsAssignment_2_1() { return cParentsAssignment_2_1; }

		//[PartialRecordType|QualifiedName]
		public CrossReference getParentsPartialRecordTypeCrossReference_2_1_0() { return cParentsPartialRecordTypeCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getParentsPartialRecordTypeQualifiedNameParserRuleCall_2_1_0_1() { return cParentsPartialRecordTypeQualifiedNameParserRuleCall_2_1_0_1; }

		//("," parents+=[PartialRecordType|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parents+=[PartialRecordType|QualifiedName]
		public Assignment getParentsAssignment_2_2_1() { return cParentsAssignment_2_2_1; }

		//[PartialRecordType|QualifiedName]
		public CrossReference getParentsPartialRecordTypeCrossReference_2_2_1_0() { return cParentsPartialRecordTypeCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getParentsPartialRecordTypeQualifiedNameParserRuleCall_2_2_1_0_1() { return cParentsPartialRecordTypeQualifiedNameParserRuleCall_2_2_1_0_1; }

		//("{" (properties+=Property | constants+=Constant)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//(properties+=Property | constants+=Constant)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//properties+=Property
		public Assignment getPropertiesAssignment_3_1_0() { return cPropertiesAssignment_3_1_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0_0() { return cPropertiesPropertyParserRuleCall_3_1_0_0; }

		//constants+=Constant
		public Assignment getConstantsAssignment_3_1_1() { return cConstantsAssignment_3_1_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_3_1_1_0() { return cConstantsConstantParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class RecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cParentRecordTypeCrossReference_3_1_0 = (CrossReference)cParentAssignment_3_1.eContents().get(0);
		private final RuleCall cParentRecordTypeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cParentRecordTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cParentsPartialRecordTypeCrossReference_4_1_0 = (CrossReference)cParentsAssignment_4_1.eContents().get(0);
		private final RuleCall cParentsPartialRecordTypeQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cParentsPartialRecordTypeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParentsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cParentsPartialRecordTypeCrossReference_4_2_1_0 = (CrossReference)cParentsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cParentsPartialRecordTypeQualifiedNameParserRuleCall_4_2_1_0_1 = (RuleCall)cParentsPartialRecordTypeCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cPropertiesAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_1_0_0 = (RuleCall)cPropertiesAssignment_5_1_0.eContents().get(0);
		private final Assignment cConstantsAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_5_1_1_0 = (RuleCall)cConstantsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//RecordType:
		//	abstract?="abstract"? "entity" name=ID ("extends" parent=[RecordType|QualifiedName])? (":"
		//	parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)? ("{"
		//	(properties+=Property | constants+=Constant)* "}")?;
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "entity" name=ID ("extends" parent=[RecordType|QualifiedName])? (":"
		//parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)? ("{"
		//(properties+=Property | constants+=Constant)* "}")?
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" parent=[RecordType|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//parent=[RecordType|QualifiedName]
		public Assignment getParentAssignment_3_1() { return cParentAssignment_3_1; }

		//[RecordType|QualifiedName]
		public CrossReference getParentRecordTypeCrossReference_3_1_0() { return cParentRecordTypeCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getParentRecordTypeQualifiedNameParserRuleCall_3_1_0_1() { return cParentRecordTypeQualifiedNameParserRuleCall_3_1_0_1; }

		//(":" parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//parents+=[PartialRecordType|QualifiedName]
		public Assignment getParentsAssignment_4_1() { return cParentsAssignment_4_1; }

		//[PartialRecordType|QualifiedName]
		public CrossReference getParentsPartialRecordTypeCrossReference_4_1_0() { return cParentsPartialRecordTypeCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getParentsPartialRecordTypeQualifiedNameParserRuleCall_4_1_0_1() { return cParentsPartialRecordTypeQualifiedNameParserRuleCall_4_1_0_1; }

		//("," parents+=[PartialRecordType|QualifiedName])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//parents+=[PartialRecordType|QualifiedName]
		public Assignment getParentsAssignment_4_2_1() { return cParentsAssignment_4_2_1; }

		//[PartialRecordType|QualifiedName]
		public CrossReference getParentsPartialRecordTypeCrossReference_4_2_1_0() { return cParentsPartialRecordTypeCrossReference_4_2_1_0; }

		//QualifiedName
		public RuleCall getParentsPartialRecordTypeQualifiedNameParserRuleCall_4_2_1_0_1() { return cParentsPartialRecordTypeQualifiedNameParserRuleCall_4_2_1_0_1; }

		//("{" (properties+=Property | constants+=Constant)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//(properties+=Property | constants+=Constant)*
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//properties+=Property
		public Assignment getPropertiesAssignment_5_1_0() { return cPropertiesAssignment_5_1_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_1_0_0() { return cPropertiesPropertyParserRuleCall_5_1_0_0; }

		//constants+=Constant
		public Assignment getConstantsAssignment_5_1_1() { return cConstantsAssignment_5_1_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_5_1_1_0() { return cConstantsConstantParserRuleCall_5_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueLiteralParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Constant:
		//	"const" type=Classifier name=ID "=" value=Literal;
		public ParserRule getRule() { return rule; }

		//"const" type=Classifier name=ID "=" value=Literal
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//type=Classifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Classifier
		public RuleCall getTypeClassifierParserRuleCall_1_0() { return cTypeClassifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=Literal
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_4_0() { return cValueLiteralParserRuleCall_4_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypeClassifierParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cAliasKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cReferToAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cReferToPropertyCrossReference_0_1_1_0 = (CrossReference)cReferToAssignment_0_1_1.eContents().get(0);
		private final RuleCall cReferToPropertyIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cReferToPropertyCrossReference_0_1_1_0.eContents().get(1);
		private final Keyword cAsKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPropertiesReferencePropertyParserRuleCall_2_0_1_0 = (RuleCall)cPropertiesAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		
		//Property:
		//	(type=Classifier | "alias" referTo=[Property] "as") name=ID ("{" properties+=ReferenceProperty* "}" | "="
		//	value=Literal)?;
		public ParserRule getRule() { return rule; }

		//(type=Classifier | "alias" referTo=[Property] "as") name=ID ("{" properties+=ReferenceProperty* "}" | "="
		//value=Literal)?
		public Group getGroup() { return cGroup; }

		//type=Classifier | "alias" referTo=[Property] "as"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//type=Classifier
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//Classifier
		public RuleCall getTypeClassifierParserRuleCall_0_0_0() { return cTypeClassifierParserRuleCall_0_0_0; }

		//"alias" referTo=[Property] "as"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"alias"
		public Keyword getAliasKeyword_0_1_0() { return cAliasKeyword_0_1_0; }

		//referTo=[Property]
		public Assignment getReferToAssignment_0_1_1() { return cReferToAssignment_0_1_1; }

		//[Property]
		public CrossReference getReferToPropertyCrossReference_0_1_1_0() { return cReferToPropertyCrossReference_0_1_1_0; }

		//ID
		public RuleCall getReferToPropertyIDTerminalRuleCall_0_1_1_0_1() { return cReferToPropertyIDTerminalRuleCall_0_1_1_0_1; }

		//"as"
		public Keyword getAsKeyword_0_1_2() { return cAsKeyword_0_1_2; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" properties+=ReferenceProperty* "}" | "=" value=Literal)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" properties+=ReferenceProperty* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//properties+=ReferenceProperty*
		public Assignment getPropertiesAssignment_2_0_1() { return cPropertiesAssignment_2_0_1; }

		//ReferenceProperty
		public RuleCall getPropertiesReferencePropertyParserRuleCall_2_0_1_0() { return cPropertiesReferencePropertyParserRuleCall_2_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//"=" value=Literal
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }

		//value=Literal
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_1_1_0() { return cValueLiteralParserRuleCall_2_1_1_0; }
	}

	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPackagePackageCrossReference_0_0_0 = (CrossReference)cPackageAssignment_0_0.eContents().get(0);
		private final RuleCall cPackagePackageIDTerminalRuleCall_0_0_0_1 = (RuleCall)cPackagePackageCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassEClassifierCrossReference_1_0 = (CrossReference)cClassAssignment_1.eContents().get(0);
		private final RuleCall cClassEClassifierIDTerminalRuleCall_1_0_1 = (RuleCall)cClassEClassifierCrossReference_1_0.eContents().get(1);
		private final Assignment cSizesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizesArraySizeParserRuleCall_2_0 = (RuleCall)cSizesAssignment_2.eContents().get(0);
		
		//Classifier:
		//	(package=[Package] ".")? class=[ecore::EClassifier] sizes+=ArraySize*;
		public ParserRule getRule() { return rule; }

		//(package=[Package] ".")? class=[ecore::EClassifier] sizes+=ArraySize*
		public Group getGroup() { return cGroup; }

		//(package=[Package] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//package=[Package]
		public Assignment getPackageAssignment_0_0() { return cPackageAssignment_0_0; }

		//[Package]
		public CrossReference getPackagePackageCrossReference_0_0_0() { return cPackagePackageCrossReference_0_0_0; }

		//ID
		public RuleCall getPackagePackageIDTerminalRuleCall_0_0_0_1() { return cPackagePackageIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//class=[ecore::EClassifier]
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//[ecore::EClassifier]
		public CrossReference getClassEClassifierCrossReference_1_0() { return cClassEClassifierCrossReference_1_0; }

		//ID
		public RuleCall getClassEClassifierIDTerminalRuleCall_1_0_1() { return cClassEClassifierIDTerminalRuleCall_1_0_1; }

		//sizes+=ArraySize*
		public Assignment getSizesAssignment_2() { return cSizesAssignment_2; }

		//ArraySize
		public RuleCall getSizesArraySizeParserRuleCall_2_0() { return cSizesArraySizeParserRuleCall_2_0; }
	}

	public class ArraySizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArraySize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArraySizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArraySize:
		//	{ArraySize} "[" size=INT? "]";
		public ParserRule getRule() { return rule; }

		//{ArraySize} "[" size=INT? "]"
		public Group getGroup() { return cGroup; }

		//{ArraySize}
		public Action getArraySizeAction_0() { return cArraySizeAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//size=INT?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ReferencePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefEStructuralFeatureCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefEStructuralFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cRefEStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesReferencePropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReferenceProperty:
		//	ref=[ecore::EStructuralFeature] "{" properties+=ReferenceProperty* "}";
		public ParserRule getRule() { return rule; }

		//ref=[ecore::EStructuralFeature] "{" properties+=ReferenceProperty* "}"
		public Group getGroup() { return cGroup; }

		//ref=[ecore::EStructuralFeature]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ecore::EStructuralFeature]
		public CrossReference getRefEStructuralFeatureCrossReference_0_0() { return cRefEStructuralFeatureCrossReference_0_0; }

		//ID
		public RuleCall getRefEStructuralFeatureIDTerminalRuleCall_0_0_1() { return cRefEStructuralFeatureIDTerminalRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=ReferenceProperty*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//ReferenceProperty
		public RuleCall getPropertiesReferencePropertyParserRuleCall_2_0() { return cPropertiesReferencePropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal:
		//	StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ConstantLiteral;
		public ParserRule getRule() { return rule; }

		//StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ConstantLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_2() { return cFloatLiteralParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }

		//ConstantLiteral
		public RuleCall getConstantLiteralParserRuleCall_4() { return cConstantLiteralParserRuleCall_4; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatLiteral:
		//	value=FLOAT;
		public ParserRule getRule() { return rule; }

		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}

	public class ConstantLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueConstantCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueConstantIDTerminalRuleCall_0_1 = (RuleCall)cValueConstantCrossReference_0.eContents().get(1);
		
		//ConstantLiteral:
		//	value=[Constant];
		public ParserRule getRule() { return rule; }

		//value=[Constant]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[Constant]
		public CrossReference getValueConstantCrossReference_0() { return cValueConstantCrossReference_0; }

		//ID
		public RuleCall getValueConstantIDTerminalRuleCall_0_1() { return cValueConstantIDTerminalRuleCall_0_1; }
	}
	
	
	private ModelElements pModel;
	private ImportElements pImport;
	private PackageElements pPackage;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private TypeElements pType;
	private PartialRecordTypeElements pPartialRecordType;
	private RecordTypeElements pRecordType;
	private ConstantElements pConstant;
	private PropertyElements pProperty;
	private ClassifierElements pClassifier;
	private ArraySizeElements pArraySize;
	private ReferencePropertyElements pReferenceProperty;
	private LiteralElements pLiteral;
	private StringLiteralElements pStringLiteral;
	private IntLiteralElements pIntLiteral;
	private FloatLiteralElements pFloatLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private ConstantLiteralElements pConstantLiteral;
	private TerminalRule tNUMBER;
	private TerminalRule tINT;
	private TerminalRule tFLOAT;
	private TerminalRule tBOOLEAN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RecordLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.instrumentation.rl.RecordLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"package" name=QualifiedName packages+=Package* imports+=Import* types+=Type*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Package:
	//	"use" name=ID package=[ecore::EPackage|STRING];
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//Type:
	//	RecordType | PartialRecordType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PartialRecordType:
	//	"template" name=ID (":" parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)?
	//	("{" (properties+=Property | constants+=Constant)* "}")?;
	public PartialRecordTypeElements getPartialRecordTypeAccess() {
		return (pPartialRecordType != null) ? pPartialRecordType : (pPartialRecordType = new PartialRecordTypeElements());
	}
	
	public ParserRule getPartialRecordTypeRule() {
		return getPartialRecordTypeAccess().getRule();
	}

	//RecordType:
	//	abstract?="abstract"? "entity" name=ID ("extends" parent=[RecordType|QualifiedName])? (":"
	//	parents+=[PartialRecordType|QualifiedName] ("," parents+=[PartialRecordType|QualifiedName])*)? ("{"
	//	(properties+=Property | constants+=Constant)* "}")?;
	public RecordTypeElements getRecordTypeAccess() {
		return (pRecordType != null) ? pRecordType : (pRecordType = new RecordTypeElements());
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}

	//Constant:
	//	"const" type=Classifier name=ID "=" value=Literal;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Property:
	//	(type=Classifier | "alias" referTo=[Property] "as") name=ID ("{" properties+=ReferenceProperty* "}" | "="
	//	value=Literal)?;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Classifier:
	//	(package=[Package] ".")? class=[ecore::EClassifier] sizes+=ArraySize*;
	public ClassifierElements getClassifierAccess() {
		return (pClassifier != null) ? pClassifier : (pClassifier = new ClassifierElements());
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}

	//ArraySize:
	//	{ArraySize} "[" size=INT? "]";
	public ArraySizeElements getArraySizeAccess() {
		return (pArraySize != null) ? pArraySize : (pArraySize = new ArraySizeElements());
	}
	
	public ParserRule getArraySizeRule() {
		return getArraySizeAccess().getRule();
	}

	//ReferenceProperty:
	//	ref=[ecore::EStructuralFeature] "{" properties+=ReferenceProperty* "}";
	public ReferencePropertyElements getReferencePropertyAccess() {
		return (pReferenceProperty != null) ? pReferenceProperty : (pReferenceProperty = new ReferencePropertyElements());
	}
	
	public ParserRule getReferencePropertyRule() {
		return getReferencePropertyAccess().getRule();
	}

	//Literal:
	//	StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ConstantLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//FloatLiteral:
	//	value=FLOAT;
	public FloatLiteralElements getFloatLiteralAccess() {
		return (pFloatLiteral != null) ? pFloatLiteral : (pFloatLiteral = new FloatLiteralElements());
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=BOOLEAN;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantLiteral:
	//	value=[Constant];
	public ConstantLiteralElements getConstantLiteralAccess() {
		return (pConstantLiteral != null) ? pConstantLiteral : (pConstantLiteral = new ConstantLiteralElements());
	}
	
	public ParserRule getConstantLiteralRule() {
		return getConstantLiteralAccess().getRule();
	}

	//// terminals
	//terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? NUMBER+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//// make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EFloatObject:
	//	"-"? NUMBER+ ("." NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? "f"? | "-"? NUMBER+ "f";
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//// introduce boolean values
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
